{"version":3,"file":"index-DxoXVbae.js","sources":["../../node_modules/react-dom/client.js","../../src/lib/utils.js","../../src/components/ui/card.jsx","../../node_modules/class-variance-authority/dist/index.mjs","../../src/components/ui/button.jsx","../../src/components/ui/tabs.jsx","../../src/components/ui/alert.jsx","../../src/components/TimeseriesUploader.jsx","../../src/components/ui/table.jsx","../../src/components/ui/select.jsx","../../src/components/PageTimeseriesView.jsx","../../src/components/MonthlyComparisonView.jsx","../../src/services/reach_calculator.js","../../src/utils/metric_categorizer.js","../../src/core/timeseries_models.js","../../src/components/TrendAnalysisView.jsx","../../src/utils/timeseries_storage.js","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { clsx } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\n/**\r\n * Kombinerar CSS-klasser och hanterar Tailwind-konflikter\r\n * @param  {...any} inputs - CSS-klasser att kombinera\r\n * @returns {string} - Kombinerade CSS-klasser\r\n */\r\nexport function cn(...inputs) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\n/**\r\n * Formaterar ett datum enligt svensk standard\r\n * @param {Date|string} date - Datum att formatera\r\n * @returns {string} - Formaterat datum\r\n */\r\nexport function formatDate(date) {\r\n  const d = new Date(date)\r\n  return d.toLocaleDateString('sv-SE', {\r\n    year: 'numeric',\r\n    month: 'long',\r\n    day: 'numeric',\r\n  })\r\n}\r\n\r\n/**\r\n * Formaterar ett nummer med tusentalsavgränsare\r\n * @param {number} number - Nummer att formatera\r\n * @returns {string} - Formaterat nummer\r\n */\r\nexport function formatNumber(number) {\r\n  return new Intl.NumberFormat('sv-SE').format(number)\r\n}\r\n\r\n/**\r\n * Validerar en CSV-fil\r\n * @param {File} file - Filen att validera\r\n * @returns {boolean} - true om filen är giltig\r\n */\r\nexport function isValidCSVFile(file) {\r\n  return file && (\r\n    file.type === 'text/csv' ||\r\n    file.name.toLowerCase().endsWith('.csv')\r\n  )\r\n}\r\n\r\n/**\r\n * Genererar en unik ID-sträng\r\n * @returns {string} - Unik ID\r\n */\r\nexport function generateId() {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36)\r\n}\r\n\r\n/**\r\n * Formaterar månadsnamn för visning\r\n * @param {number} monthNumber - Månadsnummer (1-12)\r\n * @returns {string} - Formaterat månadsnamn på svenska\r\n */\r\nexport function formatMonthName(monthNumber) {\r\n  const months = [\r\n    'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\r\n    'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\r\n  ]\r\n  return months[monthNumber - 1] || 'Okänd månad'\r\n}\r\n\r\n/**\r\n * Formaterar period för visning (år och månad)\r\n * @param {number} year - År\r\n * @param {number} month - Månad (1-12)\r\n * @returns {string} - Formaterad period\r\n */\r\nexport function formatPeriod(year, month) {\r\n  return `${formatMonthName(month)} ${year}`\r\n}","import * as React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n/**\r\n * Huvudkomponent för Card\r\n */\r\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\n/**\r\n * Header för Card\r\n */\r\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\n/**\r\n * Titel för Card\r\n */\r\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\r\n  <h3\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\n/**\r\n * Beskrivning för Card\r\n */\r\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\r\n  <p\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\n/**\r\n * Innehållssektion för Card\r\n */\r\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\n/**\r\n * Footer för Card\r\n */\r\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","/**\n * Copyright 2022 Joe Bell. All rights reserved.\n *\n * This file is licensed to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */ import { clsx } from \"clsx\";\nconst falsyToString = (value)=>typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n\n","import * as React from \"react\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\r\n        destructive:\r\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\r\n        outline:\r\n          \"border border-input hover:bg-accent hover:text-accent-foreground\",\r\n        secondary:\r\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\r\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\r\n        link: \"underline-offset-4 hover:underline text-primary\",\r\n        facebook: \"bg-facebook-500 text-white hover:bg-facebook-600\",\r\n      },\r\n      size: {\r\n        default: \"h-10 px-4 py-2\",\r\n        sm: \"h-9 rounded-md px-3\",\r\n        lg: \"h-11 rounded-md px-8\",\r\n        icon: \"h-10 w-10\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n      size: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : \"button\"\r\n  return (\r\n    <Comp\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nButton.displayName = \"Button\"\r\n\r\nexport { Button, buttonVariants }","import * as React from \"react\"\r\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Tabs = TabsPrimitive.Root\r\n\r\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.List\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsList.displayName = TabsPrimitive.List.displayName\r\n\r\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\r\n\r\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\r\n  <TabsPrimitive.Content\r\n    ref={ref}\r\n    className={cn(\r\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTabsContent.displayName = TabsPrimitive.Content.displayName\r\n\r\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","import * as React from \"react\"\r\nimport { cva } from \"class-variance-authority\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Variant-definitioner för olika alert-typer\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n        success: \"border-green-500/50 text-green-600 dark:text-green-400 [&>svg]:text-green-600\",\r\n        info: \"border-facebook-300/50 text-facebook-600 dark:text-facebook-400 [&>svg]:text-facebook-600\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\n/**\r\n * Alert-komponent för att visa viktiga meddelanden\r\n * @param {Object} props - Komponentens properties\r\n * @param {string} [props.variant] - Variant av alert (default, destructive, success, info)\r\n * @param {React.ReactNode} props.children - Innehåll att visa i alerten\r\n * @param {string} [props.className] - Extra CSS-klasser\r\n */\r\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\n/**\r\n * Titel-komponent för Alert\r\n */\r\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\n/**\r\n * Beskrivnings-komponent för Alert\r\n */\r\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }","import React, { useState, useRef } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\r\nimport { \r\n  Upload, \r\n  FileText, \r\n  CheckCircle2, \r\n  AlertCircle, \r\n  X, \r\n  Calendar,\r\n  BarChart3,\r\n  Loader2\r\n} from 'lucide-react';\r\nimport Papa from 'papaparse';\r\n\r\n// Förväntade kolumner för Facebook API CSV-filer\r\nconst EXPECTED_COLUMNS = [\r\n  'Page', 'Page ID', 'Reach', 'Engaged Users', 'Engagements', \r\n  'Reactions', 'Publications', 'Status', 'Comment'\r\n];\r\n\r\nfunction TimeseriesUploader({ onDataUploaded, onCancel }) {\r\n  const [files, setFiles] = useState([]);\r\n  const [uploading, setUploading] = useState(false);\r\n  const [dragActive, setDragActive] = useState(false);\r\n  const [validationErrors, setValidationErrors] = useState([]);\r\n  const [processingStatus, setProcessingStatus] = useState({});\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Validera filnamn enligt FB_YYYY_MM.csv format\r\n  const validateFilename = (filename) => {\r\n    const pattern = /^FB_(\\d{4})_(\\d{2})\\.csv$/;\r\n    const match = filename.match(pattern);\r\n    \r\n    if (!match) {\r\n      return { \r\n        isValid: false, \r\n        error: 'Felaktigt filnamnsformat. Förväntat: FB_YYYY_MM.csv (t.ex. FB_2025_08.csv)' \r\n      };\r\n    }\r\n\r\n    const year = parseInt(match[1]);\r\n    const month = parseInt(match[2]);\r\n\r\n    if (month < 1 || month > 12) {\r\n      return { \r\n        isValid: false, \r\n        error: 'Ogiltig månad. Måste vara mellan 01-12.' \r\n      };\r\n    }\r\n\r\n    if (year < 2020 || year > 2030) {\r\n      return { \r\n        isValid: false, \r\n        error: 'Ogiltigt år. Måste vara mellan 2020-2030.' \r\n      };\r\n    }\r\n\r\n    return { \r\n      isValid: true, \r\n      year, \r\n      month,\r\n      displayName: `${getMonthName(month)} ${year}`\r\n    };\r\n  };\r\n\r\n  // Hjälpfunktion för månadsnamn på svenska\r\n  const getMonthName = (month) => {\r\n    const months = [\r\n      'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\r\n      'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\r\n    ];\r\n    return months[month - 1];\r\n  };\r\n\r\n  // Validera CSV-innehåll\r\n  const validateCSVContent = (content, filename) => {\r\n    return new Promise((resolve) => {\r\n      Papa.parse(content, {\r\n        header: true,\r\n        skipEmptyLines: true,\r\n        complete: (results) => {\r\n          if (results.errors.length > 0) {\r\n            resolve({\r\n              isValid: false,\r\n              error: `CSV-parsningsfel: ${results.errors[0].message}`,\r\n              data: null\r\n            });\r\n            return;\r\n          }\r\n\r\n          // Kontrollera kolumner\r\n          const headers = results.meta.fields || [];\r\n          const missingColumns = EXPECTED_COLUMNS.filter(col => !headers.includes(col));\r\n          \r\n          if (missingColumns.length > 0) {\r\n            resolve({\r\n              isValid: false,\r\n              error: `Saknade kolumner: ${missingColumns.join(', ')}`,\r\n              data: null\r\n            });\r\n            return;\r\n          }\r\n\r\n          // Kontrollera att det finns data\r\n          if (results.data.length === 0) {\r\n            resolve({\r\n              isValid: false,\r\n              error: 'CSV-filen innehåller ingen data',\r\n              data: null\r\n            });\r\n            return;\r\n          }\r\n\r\n          resolve({\r\n            isValid: true,\r\n            data: results.data,\r\n            pageCount: results.data.length,\r\n            error: null\r\n          });\r\n        }\r\n      });\r\n    });\r\n  };\r\n\r\n  // Hantera fil-drop\r\n  const handleDrop = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n    \r\n    const droppedFiles = Array.from(e.dataTransfer.files);\r\n    const csvFiles = droppedFiles.filter(file => \r\n      file.name.toLowerCase().endsWith('.csv')\r\n    );\r\n    \r\n    if (csvFiles.length !== droppedFiles.length) {\r\n      setValidationErrors(prev => [...prev, 'Endast CSV-filer är tillåtna']);\r\n    }\r\n    \r\n    if (csvFiles.length > 0) {\r\n      addFiles(csvFiles);\r\n    }\r\n  };\r\n\r\n  // Hantera fil-val\r\n  const handleFileSelect = (e) => {\r\n    const selectedFiles = Array.from(e.target.files);\r\n    addFiles(selectedFiles);\r\n  };\r\n\r\n  // Lägg till filer i listan\r\n  const addFiles = (newFiles) => {\r\n    const validatedFiles = newFiles.map(file => {\r\n      const validation = validateFilename(file.name);\r\n      return {\r\n        file,\r\n        id: Math.random().toString(36),\r\n        name: file.name,\r\n        size: file.size,\r\n        validation,\r\n        status: validation.isValid ? 'pending' : 'error'\r\n      };\r\n    });\r\n\r\n    // Kontrollera dubletter\r\n    const existingNames = files.map(f => f.name);\r\n    const duplicates = validatedFiles.filter(f => existingNames.includes(f.name));\r\n    \r\n    if (duplicates.length > 0) {\r\n      setValidationErrors(prev => [\r\n        ...prev, \r\n        `Följande filer är redan valda: ${duplicates.map(d => d.name).join(', ')}`\r\n      ]);\r\n    }\r\n\r\n    const uniqueFiles = validatedFiles.filter(f => !existingNames.includes(f.name));\r\n    setFiles(prev => [...prev, ...uniqueFiles]);\r\n  };\r\n\r\n  // Ta bort fil från listan\r\n  const removeFile = (fileId) => {\r\n    setFiles(prev => prev.filter(f => f.id !== fileId));\r\n  };\r\n\r\n  // Behandla alla filer\r\n  const processFiles = async () => {\r\n    setUploading(true);\r\n    setValidationErrors([]);\r\n    setProcessingStatus({});\r\n\r\n    const validFiles = files.filter(f => f.validation.isValid);\r\n    const processedPeriods = [];\r\n\r\n    for (const fileItem of validFiles) {\r\n      setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'processing' }));\r\n\r\n      try {\r\n        // Läs filinnehåll\r\n        const content = await readFileContent(fileItem.file);\r\n        \r\n        // Validera CSV-innehåll\r\n        const validation = await validateCSVContent(content, fileItem.name);\r\n        \r\n        if (!validation.isValid) {\r\n          setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'error' }));\r\n          setValidationErrors(prev => [...prev, `${fileItem.name}: ${validation.error}`]);\r\n          continue;\r\n        }\r\n\r\n        // Lägg till period-info\r\n        const periodData = {\r\n          ...fileItem.validation,\r\n          data: validation.data,\r\n          pageCount: validation.pageCount,\r\n          filename: fileItem.name\r\n        };\r\n\r\n        processedPeriods.push(periodData);\r\n        setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'success' }));\r\n\r\n        // Simulera bearbetning (ta bort i produktion)\r\n        await new Promise(resolve => setTimeout(resolve, 500));\r\n\r\n      } catch (error) {\r\n        setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'error' }));\r\n        setValidationErrors(prev => [...prev, `${fileItem.name}: ${error.message}`]);\r\n      }\r\n    }\r\n\r\n    setUploading(false);\r\n\r\n    // Om någon fil behandlades framgångsrikt, rapportera tillbaka\r\n    if (processedPeriods.length > 0) {\r\n      onDataUploaded(processedPeriods);\r\n    }\r\n  };\r\n\r\n  // Läs fil-innehåll\r\n  const readFileContent = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => resolve(e.target.result);\r\n      reader.onerror = () => reject(new Error('Kunde inte läsa fil'));\r\n      reader.readAsText(file);\r\n    });\r\n  };\r\n\r\n  // Hantera drag events\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(true);\r\n  };\r\n\r\n  const handleDragLeave = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    setDragActive(false);\r\n  };\r\n\r\n  // Rensa fel\r\n  const clearErrors = () => {\r\n    setValidationErrors([]);\r\n  };\r\n\r\n  // Räkna giltiga filer\r\n  const validFilesCount = files.filter(f => f.validation.isValid).length;\r\n  const hasValidFiles = validFilesCount > 0;\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Upload className=\"h-5 w-5 text-facebook-500\" />\r\n            Ladda upp Facebook CSV-filer\r\n          </CardTitle>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Släpp dina FB_YYYY_MM.csv filer här eller klicka för att välja filer\r\n          </p>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {/* Drop Zone */}\r\n          <div\r\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\r\n              dragActive \r\n                ? 'border-facebook-400 bg-facebook-50' \r\n                : 'border-gray-300 hover:border-facebook-400 hover:bg-facebook-50'\r\n            }`}\r\n            onDrop={handleDrop}\r\n            onDragOver={handleDragOver}\r\n            onDragLeave={handleDragLeave}\r\n            onClick={() => fileInputRef.current?.click()}\r\n          >\r\n            <input\r\n              type=\"file\"\r\n              ref={fileInputRef}\r\n              onChange={handleFileSelect}\r\n              multiple\r\n              accept=\".csv\"\r\n              className=\"hidden\"\r\n            />\r\n            \r\n            <Upload className=\"h-12 w-12 mx-auto mb-4 text-facebook-400\" />\r\n            <h3 className=\"text-lg font-semibold mb-2\">\r\n              {dragActive ? 'Släpp filerna här' : 'Ladda upp CSV-filer'}\r\n            </h3>\r\n            <p className=\"text-muted-foreground mb-4\">\r\n              Släpp dina FB_YYYY_MM.csv filer här eller klicka för att välja\r\n            </p>\r\n            \r\n            <div className=\"text-xs text-muted-foreground space-y-1\">\r\n              <p><strong>Format:</strong> FB_YYYY_MM.csv (t.ex. FB_2025_08.csv)</p>\r\n              <p><strong>Kolumner:</strong> {EXPECTED_COLUMNS.join(', ')}</p>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Fel-meddelanden */}\r\n      {validationErrors.length > 0 && (\r\n        <Alert variant=\"destructive\">\r\n          <AlertCircle className=\"h-4 w-4\" />\r\n          <AlertTitle>Valideringsfel</AlertTitle>\r\n          <AlertDescription>\r\n            <ul className=\"list-disc list-inside space-y-1\">\r\n              {validationErrors.map((error, index) => (\r\n                <li key={index}>{error}</li>\r\n              ))}\r\n            </ul>\r\n            <Button variant=\"outline\" size=\"sm\" onClick={clearErrors} className=\"mt-2\">\r\n              Rensa fel\r\n            </Button>\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Fil-lista */}\r\n      {files.length > 0 && (\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center justify-between\">\r\n              <span>Valda filer ({files.length})</span>\r\n              <div className=\"text-sm text-muted-foreground\">\r\n                {validFilesCount} giltiga filer\r\n              </div>\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"space-y-2\">\r\n              {files.map((fileItem) => {\r\n                const status = processingStatus[fileItem.id] || fileItem.status;\r\n                \r\n                return (\r\n                  <div\r\n                    key={fileItem.id}\r\n                    className={`flex items-center justify-between p-3 rounded-lg border ${\r\n                      fileItem.validation.isValid \r\n                        ? 'border-green-200 bg-green-50' \r\n                        : 'border-red-200 bg-red-50'\r\n                    }`}\r\n                  >\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <FileText className=\"h-4 w-4\" />\r\n                      <div>\r\n                        <div className=\"font-medium\">{fileItem.name}</div>\r\n                        <div className=\"text-sm text-muted-foreground\">\r\n                          {fileItem.validation.isValid ? (\r\n                            <span className=\"flex items-center gap-1\">\r\n                              <Calendar className=\"h-3 w-3\" />\r\n                              {fileItem.validation.displayName}\r\n                            </span>\r\n                          ) : (\r\n                            <span className=\"text-red-600\">{fileItem.validation.error}</span>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"flex items-center gap-2\">\r\n                      {status === 'processing' && (\r\n                        <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\r\n                      )}\r\n                      {status === 'success' && (\r\n                        <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\r\n                      )}\r\n                      {status === 'error' && (\r\n                        <AlertCircle className=\"h-4 w-4 text-red-500\" />\r\n                      )}\r\n                      \r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeFile(fileItem.id)}\r\n                        disabled={uploading}\r\n                      >\r\n                        <X className=\"h-4 w-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      )}\r\n\r\n      {/* Kontroll-knappar */}\r\n      <div className=\"flex justify-between\">\r\n        <Button variant=\"outline\" onClick={onCancel} disabled={uploading}>\r\n          Avbryt\r\n        </Button>\r\n        \r\n        <div className=\"flex gap-2\">\r\n          {files.length > 0 && (\r\n            <Button \r\n              variant=\"outline\" \r\n              onClick={() => setFiles([])}\r\n              disabled={uploading}\r\n            >\r\n              Rensa alla\r\n            </Button>\r\n          )}\r\n          \r\n          <Button\r\n            onClick={processFiles}\r\n            disabled={!hasValidFiles || uploading}\r\n            className=\"min-w-[120px]\"\r\n          >\r\n            {uploading ? (\r\n              <>\r\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                Bearbetar...\r\n              </>\r\n            ) : (\r\n              <>\r\n                <BarChart3 className=\"mr-2 h-4 w-4\" />\r\n                Analysera data ({validFilesCount})\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimeseriesUploader;","import * as React from \"react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\r\n  <div className=\"relative w-full overflow-auto\">\r\n    <table\r\n      ref={ref}\r\n      className={cn(\"w-full caption-bottom text-sm\", className)}\r\n      {...props}\r\n    />\r\n  </div>\r\n))\r\nTable.displayName = \"Table\"\r\n\r\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\r\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\r\n))\r\nTableHeader.displayName = \"TableHeader\"\r\n\r\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\r\n  <tbody\r\n    ref={ref}\r\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableBody.displayName = \"TableBody\"\r\n\r\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\r\n  <tr\r\n    ref={ref}\r\n    className={cn(\r\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableRow.displayName = \"TableRow\"\r\n\r\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\r\n  <th\r\n    ref={ref}\r\n    className={cn(\r\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nTableHead.displayName = \"TableHead\"\r\n\r\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\r\n  <td\r\n    ref={ref}\r\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nTableCell.displayName = \"TableCell\"\r\n\r\nexport {\r\n  Table,\r\n  TableHeader,\r\n  TableBody,\r\n  TableRow,\r\n  TableHead,\r\n  TableCell\r\n}","import * as React from \"react\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { Check, ChevronDown } from \"lucide-react\"\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Select = SelectPrimitive.Root\r\n\r\nconst SelectGroup = SelectPrimitive.Group\r\n\r\nconst SelectValue = SelectPrimitive.Value\r\n\r\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <SelectPrimitive.Icon asChild>\r\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n    </SelectPrimitive.Icon>\r\n  </SelectPrimitive.Trigger>\r\n))\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\r\n\r\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1 max-h-[300px] overflow-y-auto\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n))\r\nSelectContent.displayName = SelectPrimitive.Content.displayName\r\n\r\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectLabel.displayName = SelectPrimitive.Label.displayName\r\n\r\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n))\r\nSelectItem.displayName = SelectPrimitive.Item.displayName\r\n\r\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n}","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\r\nimport { \r\n  ArrowUpDown, \r\n  ArrowUp, \r\n  ArrowDown,\r\n  BarChart3,\r\n  TrendingUp,\r\n  TrendingDown,\r\n  Calendar,\r\n  FileDown,\r\n  FileSpreadsheet,\r\n  AlertCircle,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Activity,\r\n  Target\r\n} from 'lucide-react';\r\n\r\n// Sveriges Radio kanal-färger (från original)\r\nconst CHANNEL_COLORS = {\r\n  'P1': '#0066cc', // Blå\r\n  'P2': '#ff6600', // Orange\r\n  'P3': '#00cc66', // Grön\r\n  'P4': '#cc33cc', // Magenta/Lila\r\n  'EKOT': '#005eb8', // Mörk blå (Ekot/Radio Sweden)\r\n  'RADIOSPORTEN': '#1c5c35', // Mörk grön (Radiosporten)\r\n  'SR': '#000000',  // Svart för Sveriges Radio\r\n  'default': '#000000' // Svart som fallback\r\n};\r\n\r\n// ProfileIcon-komponent för Sveriges Radio kanaler (KORRIGERAD)\r\nconst ProfileIcon = ({ pageName }) => {\r\n  // Extrahera namn från sidnamnet\r\n  const name = pageName || 'Okänd';\r\n  \r\n  // Bestäm färg och kanal-text baserat på kanalnamn i sidnamnet\r\n  let backgroundColor = CHANNEL_COLORS.default;\r\n  let channelText = '';\r\n  \r\n  // Kontrollera om sidnamnet innehåller något av kanalnamnen\r\n  const nameLower = name.toLowerCase();\r\n  \r\n  if (nameLower.includes('ekot') || nameLower.includes('radio sweden')) {\r\n    backgroundColor = CHANNEL_COLORS.EKOT;\r\n    channelText = 'E';\r\n  } else if (nameLower.includes('radiosporten') || nameLower.includes('radio sporten')) {\r\n    backgroundColor = CHANNEL_COLORS.RADIOSPORTEN;\r\n    channelText = 'RS';\r\n  } else if (nameLower.includes('p1')) {\r\n    backgroundColor = CHANNEL_COLORS.P1;\r\n    channelText = 'P1';\r\n  } else if (nameLower.includes('p2')) {\r\n    backgroundColor = CHANNEL_COLORS.P2;\r\n    channelText = 'P2';\r\n  } else if (nameLower.includes('p3')) {\r\n    backgroundColor = CHANNEL_COLORS.P3;\r\n    channelText = 'P3';\r\n  } else if (nameLower.includes('p4')) {\r\n    backgroundColor = CHANNEL_COLORS.P4;\r\n    channelText = 'P4';\r\n  } else if (nameLower.includes('sveriges radio') && !nameLower.includes('p1') && \r\n            !nameLower.includes('p2') && !nameLower.includes('p3') && !nameLower.includes('p4')) {\r\n    // Sveriges Radio, men inte specifik kanal\r\n    backgroundColor = CHANNEL_COLORS.SR;\r\n    channelText = 'SR';\r\n  } else {\r\n    // Fallback: använd första bokstaven om ingen kanal hittas\r\n    channelText = name.charAt(0).toUpperCase();\r\n  }\r\n  \r\n  // Bestäm textfärg baserat på bakgrundsfärgen (vit text på mörka bakgrunder)\r\n  const isLightBackground = backgroundColor === CHANNEL_COLORS.P2 || backgroundColor === CHANNEL_COLORS.P3;\r\n  const textColor = isLightBackground ? 'text-black' : 'text-white';\r\n  \r\n  return (\r\n    <div \r\n      className={`flex-shrink-0 w-6 h-6 rounded-sm flex items-center justify-center text-xs font-bold ${textColor}`}\r\n      style={{ backgroundColor }}\r\n      title={pageName}\r\n    >\r\n      {channelText}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sidstorlekar för paginering\r\nconst PAGE_SIZE_OPTIONS = [\r\n  { value: 6, label: '6 per sida' },\r\n  { value: 12, label: '12 per sida' },\r\n  { value: 24, label: '24 per sida' }\r\n];\r\n\r\n// KORRIGERAT: Tillgängliga metrics (utan Engaged Users + rätt svenska namn)\r\nconst AVAILABLE_METRICS = [\r\n  { key: 'reach', label: 'Räckvidd', canSum: false },\r\n  { key: 'engagements', label: 'Engagemang', canSum: true },\r\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\r\n  { key: 'publications', label: 'Publiceringar', canSum: true },\r\n  { key: 'status', label: 'Status', canSum: true },\r\n  { key: 'comment', label: 'Kommentarer', canSum: true }\r\n];\r\n\r\n// Metric-definitioner (korrigerade)\r\nconst METRIC_DEFINITIONS = {\r\n  reach: { displayName: 'Räckvidd', canSumAcrossPages: false, category: 'unique_persons' },\r\n  engagements: { displayName: 'Engagemang', canSumAcrossPages: true, category: 'countable' },\r\n  reactions: { displayName: 'Reaktioner', canSumAcrossPages: true, category: 'countable' },\r\n  publications: { displayName: 'Publiceringar', canSumAcrossPages: true, category: 'countable' },\r\n  status: { displayName: 'Status', canSumAcrossPages: true, category: 'countable' },\r\n  comment: { displayName: 'Kommentarer', canSumAcrossPages: true, category: 'countable' }\r\n};\r\n\r\nfunction PageTimeseriesView({ uploadedPeriods = [] }) {\r\n  // State management\r\n  const [availablePages, setAvailablePages] = useState([]);\r\n  const [selectedPageId, setSelectedPageId] = useState('');\r\n  const [pageTimeseriesData, setPageTimeseriesData] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Analys-state\r\n  const [pageStats, setPageStats] = useState(null);\r\n  const [trendAnalysis, setTrendAnalysis] = useState({});\r\n  \r\n  // Tabell-state\r\n  const [sortConfig, setSortConfig] = useState({ key: 'year_month', direction: 'desc' });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(12);\r\n  const [selectedMetrics, setSelectedMetrics] = useState(['reach', 'engagements', 'publications']);\r\n\r\n  // Ladda tillgängliga sidor vid montering\r\n  useEffect(() => {\r\n    const loadPages = () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        if (uploadedPeriods.length === 0) {\r\n          setAvailablePages([]);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        // Samla alla unika sidor från alla perioder\r\n        const pagesMap = new Map();\r\n        \r\n        uploadedPeriods.forEach(period => {\r\n          if (period.data && Array.isArray(period.data)) {\r\n            period.data.forEach(csvRow => {\r\n              const pageName = csvRow.Page || csvRow.page || 'Okänd sida';\r\n              const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${pageName.replace(/\\s+/g, '_')}`;\r\n              \r\n              if (!pagesMap.has(pageId)) {\r\n                pagesMap.set(pageId, {\r\n                  pageId,\r\n                  pageName\r\n                });\r\n              }\r\n            });\r\n          }\r\n        });\r\n        \r\n        const pages = Array.from(pagesMap.values()).sort((a, b) => \r\n          a.pageName.localeCompare(b.pageName)\r\n        );\r\n        \r\n        setAvailablePages(pages);\r\n        \r\n        // Sätt första sidan som default\r\n        if (pages.length > 0) {\r\n          setSelectedPageId(pages[0].pageId);\r\n        }\r\n        \r\n      } catch (err) {\r\n        console.error('Error loading pages:', err);\r\n        setError('Kunde inte ladda tillgängliga Facebook-sidor');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadPages();\r\n  }, [uploadedPeriods]);\r\n\r\n  // Ladda data när vald sida ändras\r\n  useEffect(() => {\r\n    if (!selectedPageId || uploadedPeriods.length === 0) return;\r\n    \r\n    const loadPageData = () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        // Samla all data för vald sida från alla perioder\r\n        const pageData = [];\r\n        \r\n        uploadedPeriods.forEach(period => {\r\n          if (period.data && Array.isArray(period.data)) {\r\n            const pageRow = period.data.find(csvRow => {\r\n              const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${(csvRow.Page || csvRow.page || '').replace(/\\s+/g, '_')}`;\r\n              return pageId === selectedPageId;\r\n            });\r\n            \r\n            if (pageRow) {\r\n              pageData.push({\r\n                year: period.year,\r\n                month: period.month,\r\n                pageName: pageRow.Page || pageRow.page || 'Okänd sida',\r\n                pageId: selectedPageId,\r\n                metrics: {\r\n                  reach: parseNumericValue(pageRow.Reach || pageRow.reach),\r\n                  engagements: parseNumericValue(pageRow.Engagements || pageRow.engagements),\r\n                  reactions: parseNumericValue(pageRow.Reactions || pageRow.reactions),\r\n                  publications: parseNumericValue(pageRow.Publications || pageRow.publications),\r\n                  status: parseNumericValue(pageRow.Status || pageRow.status),\r\n                  comment: parseNumericValue(pageRow.Comment || pageRow.comment)\r\n                }\r\n              });\r\n            }\r\n          }\r\n        });\r\n        \r\n        if (pageData.length === 0) {\r\n          const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\r\n          setError(`Ingen tidserie-data hittades för ${selectedPage?.pageName || 'vald sida'}`);\r\n          return;\r\n        }\r\n        \r\n        // Sortera data kronologiskt (senaste först som default)\r\n        const sortedData = pageData.sort((a, b) => {\r\n          if (a.year !== b.year) return b.year - a.year;\r\n          return b.month - a.month;\r\n        });\r\n        \r\n        setPageTimeseriesData(sortedData);\r\n        \r\n        // Beräkna statistik för sidan\r\n        calculatePageStatistics(sortedData);\r\n        \r\n      } catch (err) {\r\n        console.error('Error loading page timeseries:', err);\r\n        const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\r\n        setError(`Kunde inte ladda data för ${selectedPage?.pageName || 'vald sida'}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadPageData();\r\n  }, [selectedPageId, uploadedPeriods, availablePages]);\r\n\r\n  // Parse numeriskt värde säkert\r\n  const parseNumericValue = (value) => {\r\n    if (value === null || value === undefined || value === '') return 0;\r\n    const parsed = parseFloat(String(value).replace(/[,\\s]/g, ''));\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  };\r\n\r\n// DEL_1_SLUTAR_HÄR - Fortsätt med del 2 som börjar med calculatePageStatistics\r\n// DEL_2_BÖRJAR_HÄR - Fortsättning från del 1 med calculatePageStatistics\r\n\r\n  // Beräkna statistik för sidan (KORRIGERAT)\r\n  const calculatePageStatistics = (data) => {\r\n    if (data.length === 0) return;\r\n    \r\n    const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\r\n    \r\n    const stats = {\r\n      pageName: selectedPage?.pageName || data[0]?.pageName || 'Okänd sida',\r\n      totalPeriods: data.length,\r\n      firstPeriod: data[data.length - 1], // Äldsta (slutet av sorterad array)\r\n      lastPeriod: data[0], // Senaste (början av sorterad array)\r\n      metrics: {}\r\n    };\r\n    \r\n    // KORRIGERAT: Beräkna statistik för varje metric (utan status & comment)\r\n    const availableMetricKeys = ['reach', 'engagements', 'reactions', 'publications'];\r\n    for (const metric of availableMetricKeys) {\r\n      const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\r\n      \r\n      if (values.length > 0) {\r\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\r\n        const min = Math.min(...values);\r\n        const max = Math.max(...values);\r\n        \r\n        // Hitta bästa och sämsta månader\r\n        const bestMonth = data.find(d => d.metrics[metric] === max);\r\n        const worstMonth = data.find(d => d.metrics[metric] === min);\r\n        \r\n        stats.metrics[metric] = {\r\n          average: Math.round(avg),\r\n          min,\r\n          max,\r\n          bestMonth: bestMonth ? { year: bestMonth.year, month: bestMonth.month, value: max } : null,\r\n          worstMonth: worstMonth ? { year: worstMonth.year, month: worstMonth.month, value: min } : null\r\n        };\r\n      }\r\n    }\r\n    \r\n    setPageStats(stats);\r\n    \r\n    // Beräkna trend-analys för valda metrics\r\n    const trends = {};\r\n    for (const metric of selectedMetrics) {\r\n      if (data.length >= 2) {\r\n        // Förenklad trend-beräkning (första vs senaste)\r\n        const oldestValue = data[data.length - 1]?.metrics[metric] || 0;\r\n        const latestValue = data[0]?.metrics[metric] || 0;\r\n        \r\n        const change = latestValue - oldestValue;\r\n        const percentChange = oldestValue > 0 ? ((change / oldestValue) * 100) : 0;\r\n        \r\n        trends[metric] = {\r\n          change,\r\n          percentChange: Math.round(percentChange * 10) / 10,\r\n          trend: change > 0 ? 'up' : change < 0 ? 'down' : 'stable'\r\n        };\r\n      }\r\n    }\r\n    \r\n    setTrendAnalysis(trends);\r\n  };\r\n\r\n  // Hjälpfunktion för månadsnamn\r\n  const getMonthName = (month) => {\r\n    const months = [\r\n      'Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun',\r\n      'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'\r\n    ];\r\n    return months[month - 1];\r\n  };\r\n\r\n  // Sortera data\r\n  const sortedData = useMemo(() => {\r\n    if (!pageTimeseriesData.length) return [];\r\n    \r\n    return [...pageTimeseriesData].sort((a, b) => {\r\n      let aValue, bValue;\r\n      \r\n      if (sortConfig.key === 'year_month') {\r\n        aValue = a.year * 100 + a.month;\r\n        bValue = b.year * 100 + b.month;\r\n      } else {\r\n        aValue = a.metrics[sortConfig.key] || 0;\r\n        bValue = b.metrics[sortConfig.key] || 0;\r\n      }\r\n      \r\n      const comparison = aValue - bValue;\r\n      return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n    });\r\n  }, [pageTimeseriesData, sortConfig]);\r\n\r\n  // Paginering\r\n  const paginatedData = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    return sortedData.slice(startIndex, startIndex + pageSize);\r\n  }, [sortedData, currentPage, pageSize]);\r\n\r\n  const totalPages = Math.ceil(sortedData.length / pageSize);\r\n\r\n  // Hantera sortering\r\n  const handleSort = (key) => {\r\n    setSortConfig(current => ({\r\n      key,\r\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\r\n    }));\r\n  };\r\n\r\n  // Få sorterings-ikon\r\n  const getSortIcon = (columnKey) => {\r\n    if (sortConfig.key !== columnKey) {\r\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\r\n    }\r\n    return sortConfig.direction === 'asc' ? \r\n      <ArrowUp className=\"h-4 w-4 ml-1\" /> : \r\n      <ArrowDown className=\"h-4 w-4 ml-1\" />;\r\n  };\r\n\r\n  // KORRIGERAT: Hantera metric-val med checkboxar\r\n  const handleMetricToggle = (metricKey) => {\r\n    setSelectedMetrics(current => \r\n      current.includes(metricKey) \r\n        ? current.filter(m => m !== metricKey)\r\n        : [...current, metricKey]\r\n    );\r\n  };\r\n\r\n  // Export till CSV\r\n  const handleExportCSV = () => {\r\n    const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\r\n    const headers = ['År', 'Månad', 'Period', ...selectedMetrics.map(m => {\r\n      const def = METRIC_DEFINITIONS[m];\r\n      return def ? def.displayName : m;\r\n    })];\r\n    \r\n    const csvData = sortedData.map(item => [\r\n      item.year,\r\n      item.month,\r\n      `${getMonthName(item.month)} ${item.year}`,\r\n      ...selectedMetrics.map(m => item.metrics[m] || 0)\r\n    ]);\r\n    \r\n    const csvContent = [\r\n      headers.join(','),\r\n      ...csvData.map(row => row.join(','))\r\n    ].join('\\n');\r\n    \r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    link.setAttribute('href', url);\r\n    link.setAttribute('download', `${selectedPage?.pageName.replace(/[^a-zA-Z0-9]/g, '_')}_tidsserie.csv`);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  // Formatera numeriska värden\r\n  const formatValue = (value) => {\r\n    if (value === null || value === undefined || isNaN(value)) return '-';\r\n    return new Intl.NumberFormat('sv-SE').format(value);\r\n  };\r\n\r\n  // Hitta bästa och sämsta värden för prestanda-highlighting\r\n  const getPerformanceClass = (metric, value, data) => {\r\n    if (!data || data.length < 2 || value === null || value === undefined) return '';\r\n    \r\n    const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\r\n    if (values.length < 2) return '';\r\n    \r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    \r\n    if (value === max && max !== min) return 'bg-green-100 text-green-800 font-medium';\r\n    if (value === min && max !== min) return 'bg-red-100 text-red-800 font-medium';\r\n    return '';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Alert>\r\n        <Activity className=\"h-4 w-4\" />\r\n        <AlertTitle>Laddar data</AlertTitle>\r\n        <AlertDescription>\r\n          Analyserar tidserie-data för Facebook-sidor...\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Fel</AlertTitle>\r\n        <AlertDescription>\r\n          {error}\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (availablePages.length === 0) {\r\n    return (\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Inga sidor hittades</AlertTitle>\r\n        <AlertDescription>\r\n          Kunde inte hitta några Facebook-sidor i den uppladdade datan.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Sida-väljare och kontroller */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BarChart3 className=\"h-5 w-5 text-facebook-500\" />\r\n            Sidanalys över tid\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Välj Facebook-sida</label>\r\n              <Select \r\n                value={selectedPageId}\r\n                onValueChange={setSelectedPageId}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Välj sida att analysera\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {availablePages.map(page => (\r\n                    <SelectItem key={page.pageId} value={page.pageId}>\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <ProfileIcon pageName={page.pageName} />\r\n                        <span>{page.pageName}</span>\r\n                      </div>\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              {selectedPage && (\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  ID: {selectedPage.pageId}\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Metrics att visa</label>\r\n              {/* KORRIGERAT: Checkboxar istället för knappar */}\r\n              <div className=\"flex flex-wrap gap-3\">\r\n                {AVAILABLE_METRICS.map(metric => {\r\n                  const isSelected = selectedMetrics.includes(metric.key);\r\n                  \r\n                  return (\r\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleMetricToggle(metric.key)}\r\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\r\n                      {!metric.canSum && (\r\n                        <span className=\"text-xs text-orange-600 font-medium\">*</span>\r\n                      )}\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground mt-2\">\r\n                * = Kan inte summeras över månader (unika personer)\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Statistik-sammanfattning */}\r\n          {pageStats && (\r\n            <div className=\"grid md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/30 rounded-lg\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-facebook-600 flex items-center justify-center gap-2\">\r\n                  <ProfileIcon pageName={pageStats.pageName} />\r\n                  {pageStats.totalPeriods}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Månader data</div>\r\n              </div>\r\n              \r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-semibold\">\r\n                  {getMonthName(pageStats.firstPeriod.month)} {pageStats.firstPeriod.year}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Första månad</div>\r\n              </div>\r\n              \r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-semibold\">\r\n                  {getMonthName(pageStats.lastPeriod.month)} {pageStats.lastPeriod.year}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Senaste månad</div>\r\n              </div>\r\n\r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-semibold text-facebook-600\">\r\n                  {selectedPage?.pageName || 'Okänd sida'}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Vald sida</div>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Trend-indikatorer för valda metrics */}\r\n          {Object.keys(trendAnalysis).length > 0 && (\r\n            <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\r\n              {selectedMetrics.slice(0, 3).map(metric => {\r\n                const trend = trendAnalysis[metric];\r\n                const definition = METRIC_DEFINITIONS[metric];\r\n                \r\n                if (!trend || !definition) return null;\r\n                \r\n                return (\r\n                  <div key={metric} className=\"flex items-center gap-3 p-3 bg-white border rounded-lg\">\r\n                    {trend.trend === 'up' && <TrendingUp className=\"h-5 w-5 text-green-600\" />}\r\n                    {trend.trend === 'down' && <TrendingDown className=\"h-5 w-5 text-red-600\" />}\r\n                    {trend.trend === 'stable' && <Activity className=\"h-5 w-5 text-gray-500\" />}\r\n                    \r\n                    <div className=\"flex-1\">\r\n                      <div className=\"font-medium text-sm\">{definition.displayName}</div>\r\n                      <div className=\"text-xs text-muted-foreground\">\r\n                        {trend.percentChange > 0 ? '+' : ''}{trend.percentChange}% sedan första månad\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Tidserie-tabell */}\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5\" />\r\n            Månadsvis utveckling - {selectedPage?.pageName || 'Okänd sida'}\r\n          </CardTitle>\r\n          <div className=\"flex gap-2\">\r\n            <Button onClick={handleExportCSV} variant=\"outline\" size=\"sm\">\r\n              <FileDown className=\"h-4 w-4 mr-2\" />\r\n              CSV\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {pageTimeseriesData.length === 0 ? (\r\n            <p className=\"text-center text-muted-foreground py-8\">\r\n              Ingen tidserie-data tillgänglig för vald sida\r\n            </p>\r\n          ) : (\r\n            <>\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead \r\n                      className=\"cursor-pointer select-none\"\r\n                      onClick={() => handleSort('year_month')}\r\n                    >\r\n                      <div className=\"flex items-center\">\r\n                        Period\r\n                        {getSortIcon('year_month')}\r\n                      </div>\r\n                    </TableHead>\r\n                    {selectedMetrics.map(metric => {\r\n                      const definition = METRIC_DEFINITIONS[metric];\r\n                      return (\r\n                        <TableHead \r\n                          key={metric}\r\n                          className=\"text-right cursor-pointer select-none\"\r\n                          onClick={() => handleSort(metric)}\r\n                        >\r\n                          <div className=\"flex items-center justify-end\">\r\n                            {definition?.displayName || metric}\r\n                            {getSortIcon(metric)}\r\n                            {!definition?.canSumAcrossPages && (\r\n                              <span className=\"ml-1 text-orange-600\">*</span>\r\n                            )}\r\n                          </div>\r\n                        </TableHead>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {paginatedData.map((item, index) => (\r\n                    <TableRow key={`${item.year}_${item.month}`}>\r\n                      <TableCell className=\"font-medium\">\r\n                        {getMonthName(item.month)} {item.year}\r\n                      </TableCell>\r\n                      {selectedMetrics.map(metric => (\r\n                        <TableCell \r\n                          key={metric}\r\n                          className=\"text-right\"\r\n                        >\r\n                          <div className=\"flex items-center justify-end gap-1\">\r\n                            {formatValue(item.metrics[metric])}\r\n                            {pageStats?.metrics[metric]?.bestMonth && \r\n                             pageStats.metrics[metric].bestMonth.year === item.year &&\r\n                             pageStats.metrics[metric].bestMonth.month === item.month && (\r\n                              <span className=\"text-yellow-600\" title=\"Bästa värde för denna sida\">🏆</span>\r\n                            )}\r\n                            {pageStats?.metrics[metric]?.worstMonth && \r\n                             pageStats.metrics[metric].worstMonth.year === item.year &&\r\n                             pageStats.metrics[metric].worstMonth.month === item.month && (\r\n                              <span className=\"text-gray-500\" title=\"Sämsta värde för denna sida\">📉</span>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n\r\n              {/* Paginering */}\r\n              <div className=\"flex items-center justify-between mt-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-sm text-muted-foreground\">Visa:</span>\r\n                  <Select\r\n                    value={pageSize.toString()}\r\n                    onValueChange={(value) => {\r\n                      setPageSize(Number(value));\r\n                      setCurrentPage(1);\r\n                    }}\r\n                  >\r\n                    <SelectTrigger className=\"w-[120px]\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {PAGE_SIZE_OPTIONS.map(option => (\r\n                        <SelectItem key={option.value} value={option.value.toString()}>\r\n                          {option.label}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-6\">\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    Visar {((currentPage - 1) * pageSize) + 1} till {Math.min(currentPage * pageSize, sortedData.length)} av {sortedData.length}\r\n                  </span>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\r\n                      disabled={currentPage === 1}\r\n                    >\r\n                      <ChevronLeft className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    \r\n                    <span className=\"text-sm\">\r\n                      Sida {currentPage} av {totalPages}\r\n                    </span>\r\n                    \r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\r\n                      disabled={currentPage >= totalPages}\r\n                    >\r\n                      <ChevronRight className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          \r\n          {/* Förklaring av ikoner */}\r\n          <div className=\"mt-4 p-3 bg-muted/30 rounded-lg\">\r\n            <div className=\"text-sm space-y-1\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <span>🏆 = Bästa värde för denna sida</span>\r\n                <span className=\"mx-4\">📉 = Sämsta värde för denna sida</span>\r\n              </div>\r\n              <div className=\"text-muted-foreground text-xs\">\r\n                Gröna värden = bästa prestanda, röda värden = sämsta prestanda för vald tidsperiod\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PageTimeseriesView;","import React, { useState, useEffect, useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\r\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\r\nimport { \r\n  ArrowUpDown, \r\n  ArrowUp, \r\n  ArrowDown,\r\n  Calendar,\r\n  BarChart3,\r\n  FileDown,\r\n  FileSpreadsheet,\r\n  AlertCircle,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Target,\r\n  Activity\r\n} from 'lucide-react';\r\n\r\n// Sveriges Radio kanal-färger (från original)\r\nconst CHANNEL_COLORS = {\r\n  'P1': '#0066cc', // Blå\r\n  'P2': '#ff6600', // Orange\r\n  'P3': '#00cc66', // Grön\r\n  'P4': '#cc33cc', // Magenta/Lila\r\n  'EKOT': '#005eb8', // Mörk blå (Ekot/Radio Sweden)\r\n  'RADIOSPORTEN': '#1c5c35', // Mörk grön (Radiosporten)\r\n  'SR': '#000000',  // Svart för Sveriges Radio\r\n  'default': '#000000' // Svart som fallback\r\n};\r\n\r\n// ProfileIcon-komponent för Sveriges Radio kanaler (KORRIGERAD)\r\nconst ProfileIcon = ({ pageName }) => {\r\n  // Extrahera namn från sidnamnet\r\n  const name = pageName || 'Okänd';\r\n  \r\n  // Bestäm färg och kanal-text baserat på kanalnamn i sidnamnet\r\n  let backgroundColor = CHANNEL_COLORS.default;\r\n  let channelText = '';\r\n  \r\n  // Kontrollera om sidnamnet innehåller något av kanalnamnen\r\n  const nameLower = name.toLowerCase();\r\n  \r\n  if (nameLower.includes('ekot') || nameLower.includes('radio sweden')) {\r\n    backgroundColor = CHANNEL_COLORS.EKOT;\r\n    channelText = 'E';\r\n  } else if (nameLower.includes('radiosporten') || nameLower.includes('radio sporten')) {\r\n    backgroundColor = CHANNEL_COLORS.RADIOSPORTEN;\r\n    channelText = 'RS';\r\n  } else if (nameLower.includes('p1')) {\r\n    backgroundColor = CHANNEL_COLORS.P1;\r\n    channelText = 'P1';\r\n  } else if (nameLower.includes('p2')) {\r\n    backgroundColor = CHANNEL_COLORS.P2;\r\n    channelText = 'P2';\r\n  } else if (nameLower.includes('p3')) {\r\n    backgroundColor = CHANNEL_COLORS.P3;\r\n    channelText = 'P3';\r\n  } else if (nameLower.includes('p4')) {\r\n    backgroundColor = CHANNEL_COLORS.P4;\r\n    channelText = 'P4';\r\n  } else if (nameLower.includes('sveriges radio') && !nameLower.includes('p1') && \r\n            !nameLower.includes('p2') && !nameLower.includes('p3') && !nameLower.includes('p4')) {\r\n    // Sveriges Radio, men inte specifik kanal\r\n    backgroundColor = CHANNEL_COLORS.SR;\r\n    channelText = 'SR';\r\n  } else {\r\n    // Fallback: använd första bokstaven om ingen kanal hittas\r\n    channelText = name.charAt(0).toUpperCase();\r\n  }\r\n  \r\n  // Bestäm textfärg baserat på bakgrundsfärgen (vit text på mörka bakgrunder)\r\n  const isLightBackground = backgroundColor === CHANNEL_COLORS.P2 || backgroundColor === CHANNEL_COLORS.P3;\r\n  const textColor = isLightBackground ? 'text-black' : 'text-white';\r\n  \r\n  return (\r\n    <div \r\n      className={`flex-shrink-0 w-6 h-6 rounded-sm flex items-center justify-center text-xs font-bold ${textColor}`}\r\n      style={{ backgroundColor }}\r\n      title={pageName}\r\n    >\r\n      {channelText}\r\n    </div>\r\n  );\r\n};\r\n\r\n// Sidstorlekar för paginering\r\nconst PAGE_SIZE_OPTIONS = [\r\n  { value: 10, label: '10 per sida' },\r\n  { value: 25, label: '25 per sida' },\r\n  { value: 50, label: '50 per sida' }\r\n];\r\n\r\n// KORRIGERAT: Tillgängliga metrics för månadsvy\r\nconst AVAILABLE_METRICS = [\r\n  { key: 'reach', label: 'Räckvidd', canSum: false },\r\n  { key: 'engagements', label: 'Engagemang', canSum: true },\r\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\r\n  { key: 'publications', label: 'Publiceringar', canSum: true }\r\n];\r\n\r\n// Metric-definitioner (korrigerade)\r\nconst METRIC_DEFINITIONS = {\r\n  reach: { displayName: 'Räckvidd', canSumAcrossPages: false, category: 'unique_persons' },\r\n  engagements: { displayName: 'Engagemang', canSumAcrossPages: true, category: 'countable' },\r\n  reactions: { displayName: 'Reaktioner', canSumAcrossPages: true, category: 'countable' },\r\n  publications: { displayName: 'Publiceringar', canSumAcrossPages: true, category: 'countable' }\r\n};\r\n\r\nfunction MonthlyComparisonView({ uploadedPeriods = [] }) {\r\n  // State management\r\n  const [selectedPeriod, setSelectedPeriod] = useState(null);\r\n  const [periodData, setPeriodData] = useState([]);\r\n  const [periodSummary, setPeriodSummary] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Tabell-state\r\n  const [sortConfig, setSortConfig] = useState({ key: 'pageName', direction: 'asc' });\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize, setPageSize] = useState(25);\r\n  const [selectedMetrics, setSelectedMetrics] = useState(['reach', 'engagements', 'publications']);\r\n\r\n  // Sätt default period när uploadedPeriods ändras\r\n  useEffect(() => {\r\n    if (uploadedPeriods.length > 0 && !selectedPeriod) {\r\n      const firstPeriod = uploadedPeriods[0];\r\n      setSelectedPeriod({ year: firstPeriod.year, month: firstPeriod.month });\r\n    }\r\n  }, [uploadedPeriods, selectedPeriod]);\r\n\r\n  // Ladda data när vald period ändras\r\n  useEffect(() => {\r\n    if (!selectedPeriod) return;\r\n    \r\n    const loadPeriodData = () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const matchingPeriod = uploadedPeriods.find(period => \r\n          period.year === selectedPeriod.year && period.month === selectedPeriod.month\r\n        );\r\n        \r\n        if (!matchingPeriod) {\r\n          setError(`Ingen data hittades för ${getMonthName(selectedPeriod.month)} ${selectedPeriod.year}`);\r\n          setPeriodData([]);\r\n          setPeriodSummary(null);\r\n          return;\r\n        }\r\n        \r\n        // KORRIGERAT: Mappa endast de 4 relevanta kolumnerna från CSV\r\n        const convertedData = matchingPeriod.data.map(csvRow => ({\r\n          page: {\r\n            pageName: csvRow.Page || csvRow.page || 'Okänd sida',\r\n            pageId: csvRow['Page ID'] || csvRow.pageId || 'unknown'\r\n          },\r\n          period: {\r\n            year: selectedPeriod.year,\r\n            month: selectedPeriod.month\r\n          },\r\n          metrics: {\r\n            reach: parseNumericValue(csvRow.Reach || csvRow.reach),\r\n            engagements: parseNumericValue(csvRow.Engagements || csvRow.engagements),\r\n            reactions: parseNumericValue(csvRow.Reactions || csvRow.reactions),\r\n            publications: parseNumericValue(csvRow.Publications || csvRow.publications)\r\n          }\r\n        }));\r\n        \r\n        setPeriodData(convertedData);\r\n        \r\n        const summary = calculatePeriodSummary(convertedData, selectedPeriod.year, selectedPeriod.month);\r\n        setPeriodSummary(summary);\r\n        \r\n      } catch (err) {\r\n        console.error('Error loading period data:', err);\r\n        setError(`Kunde inte ladda data för ${getMonthName(selectedPeriod.month)} ${selectedPeriod.year}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadPeriodData();\r\n  }, [selectedPeriod, uploadedPeriods]);\r\n\r\n  // Parse numeriskt värde säkert\r\n  const parseNumericValue = (value) => {\r\n    if (value === null || value === undefined || value === '') return 0;\r\n    const parsed = parseFloat(String(value).replace(/[,\\s]/g, ''));\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  };\r\n\r\n  // Hjälpfunktion för månadsnamn\r\n  const getMonthName = (month) => {\r\n    const months = [\r\n      'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\r\n      'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\r\n    ];\r\n    return months[month - 1];\r\n  };\r\n\r\n  // Beräkna period-sammandrag (KORRIGERAT)\r\n  const calculatePeriodSummary = (data, year, month) => {\r\n    if (!data.length) return null;\r\n    \r\n    const summary = {\r\n      period: { year, month },\r\n      totalPages: data.length,\r\n      metrics: {}\r\n    };\r\n\r\n    // KORRIGERAT: Använd bara de 4 relevanta metrics\r\n    const availableMetricKeys = ['reach', 'engagements', 'reactions', 'publications'];\r\n    \r\n    for (const metric of availableMetricKeys) {\r\n      const values = data\r\n        .map(item => item.metrics[metric])\r\n        .filter(value => value !== null && value !== undefined && !isNaN(value) && value >= 0);\r\n\r\n      if (values.length === 0) {\r\n        summary.metrics[metric] = {\r\n          total: 0,\r\n          average: 0,\r\n          min: 0,\r\n          max: 0,\r\n          validPages: 0,\r\n          type: METRIC_DEFINITIONS[metric].category\r\n        };\r\n        continue;\r\n      }\r\n\r\n      const definition = METRIC_DEFINITIONS[metric];\r\n      \r\n      if (!definition.canSumAcrossPages) {\r\n        summary.metrics[metric] = {\r\n          average: Math.round(values.reduce((sum, val) => sum + val, 0) / values.length),\r\n          min: Math.min(...values),\r\n          max: Math.max(...values),\r\n          validPages: values.length,\r\n          type: 'unique_persons',\r\n          note: 'Genomsnitt över sidor - total reach kan inte beräknas'\r\n        };\r\n      } else {\r\n        const total = values.reduce((sum, val) => sum + val, 0);\r\n        summary.metrics[metric] = {\r\n          total,\r\n          average: Math.round(total / values.length),\r\n          min: Math.min(...values),\r\n          max: Math.max(...values),\r\n          validPages: values.length,\r\n          type: 'countable'\r\n        };\r\n      }\r\n    }\r\n\r\n    return summary;\r\n  };\r\n\r\n  // Sortera data\r\n  const sortedData = useMemo(() => {\r\n    if (!periodData.length) return [];\r\n    \r\n    return [...periodData].sort((a, b) => {\r\n      let aValue, bValue;\r\n      \r\n      if (sortConfig.key === 'pageName') {\r\n        aValue = a.page.pageName;\r\n        bValue = b.page.pageName;\r\n      } else {\r\n        aValue = a.metrics[sortConfig.key] || 0;\r\n        bValue = b.metrics[sortConfig.key] || 0;\r\n      }\r\n      \r\n      if (typeof aValue === 'string') {\r\n        const comparison = aValue.localeCompare(bValue);\r\n        return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n      }\r\n      \r\n      const comparison = aValue - bValue;\r\n      return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n    });\r\n  }, [periodData, sortConfig]);\r\n\r\n  // Paginering\r\n  const paginatedData = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * pageSize;\r\n    return sortedData.slice(startIndex, startIndex + pageSize);\r\n  }, [sortedData, currentPage, pageSize]);\r\n\r\n  const totalPages = Math.ceil(sortedData.length / pageSize);\r\n\r\n  // Hantera sortering\r\n  const handleSort = (key) => {\r\n    setSortConfig(current => ({\r\n      key,\r\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\r\n    }));\r\n  };\r\n\r\n  // Få sorterings-ikon\r\n  const getSortIcon = (columnKey) => {\r\n    if (sortConfig.key !== columnKey) {\r\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\r\n    }\r\n    return sortConfig.direction === 'asc' ? \r\n      <ArrowUp className=\"h-4 w-4 ml-1\" /> : \r\n      <ArrowDown className=\"h-4 w-4 ml-1\" />;\r\n  };\r\n\r\n  // KORRIGERAT: Hantera metric-val med checkboxar\r\n  const handleMetricToggle = (metricKey) => {\r\n    setSelectedMetrics(current => \r\n      current.includes(metricKey) \r\n        ? current.filter(m => m !== metricKey)\r\n        : [...current, metricKey]\r\n    );\r\n  };\r\n\r\n// DEL_1_SLUTAR_HÄR - Fortsätt med del 2 som börjar med handleExportCSV\r\n// DEL_2_BÖRJAR_HÄR - Fortsättning från del 1 med handleExportCSV\r\n\r\n  // Export till CSV\r\n  const handleExportCSV = () => {\r\n    const headers = ['Sidnamn', 'Sido-ID', ...selectedMetrics.map(m => {\r\n      const def = METRIC_DEFINITIONS[m];\r\n      return def ? def.displayName : m;\r\n    })];\r\n    \r\n    const csvData = sortedData.map(item => [\r\n      item.page.pageName,\r\n      item.page.pageId,\r\n      ...selectedMetrics.map(m => item.metrics[m] || 0)\r\n    ]);\r\n    \r\n    const csvContent = [\r\n      headers.join(','),\r\n      ...csvData.map(row => row.join(','))\r\n    ].join('\\n');\r\n    \r\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n    const link = document.createElement('a');\r\n    const url = URL.createObjectURL(blob);\r\n    link.setAttribute('href', url);\r\n    \r\n    const periodName = selectedPeriod ? \r\n      `${getMonthName(selectedPeriod.month)}_${selectedPeriod.year}` : \r\n      'månadsjämförelse';\r\n      \r\n    link.setAttribute('download', `Facebook_${periodName}.csv`);\r\n    link.style.visibility = 'hidden';\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  // Formatera numeriska värden\r\n  const formatValue = (value) => {\r\n    if (value === null || value === undefined || isNaN(value)) return '-';\r\n    return new Intl.NumberFormat('sv-SE').format(value);\r\n  };\r\n\r\n  // Hitta bästa och sämsta värden för prestanda-highlighting\r\n  const getPerformanceClass = (metric, value, data) => {\r\n    if (!data || data.length < 2 || value === null || value === undefined) return '';\r\n    \r\n    const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\r\n    if (values.length < 2) return '';\r\n    \r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    \r\n    if (value === max && max !== min) return 'bg-green-100 text-green-800 font-medium';\r\n    if (value === min && max !== min) return 'bg-red-100 text-red-800 font-medium';\r\n    return '';\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Alert>\r\n        <Activity className=\"h-4 w-4\" />\r\n        <AlertTitle>Laddar data</AlertTitle>\r\n        <AlertDescription>\r\n          Analyserar månadsdata för Facebook-sidor...\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Alert variant=\"destructive\">\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Fel</AlertTitle>\r\n        <AlertDescription>\r\n          {error}\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (uploadedPeriods.length === 0) {\r\n    return (\r\n      <Alert>\r\n        <AlertCircle className=\"h-4 w-4\" />\r\n        <AlertTitle>Ingen data</AlertTitle>\r\n        <AlertDescription>\r\n          Ladda upp CSV-filer för att visa månadsvis jämförelse av Facebook-sidor.\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Period-väljare och kontroller */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Calendar className=\"h-5 w-5 text-facebook-500\" />\r\n            Månadsvis jämförelse\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Välj månad</label>\r\n              <Select \r\n                value={selectedPeriod ? `${selectedPeriod.year}_${selectedPeriod.month}` : ''}\r\n                onValueChange={(value) => {\r\n                  const [year, month] = value.split('_');\r\n                  setSelectedPeriod({ year: parseInt(year), month: parseInt(month) });\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Välj månad att analysera\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {uploadedPeriods.map(period => (\r\n                    <SelectItem key={`${period.year}_${period.month}`} value={`${period.year}_${period.month}`}>\r\n                      {getMonthName(period.month)} {period.year}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              {selectedPeriod && (\r\n                <p className=\"text-xs text-muted-foreground mt-1\">\r\n                  Visar data för {getMonthName(selectedPeriod.month)} {selectedPeriod.year}\r\n                </p>\r\n              )}\r\n            </div>\r\n            \r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Metrics att visa</label>\r\n              <div className=\"flex flex-wrap gap-3\">\r\n                {AVAILABLE_METRICS.map(metric => {\r\n                  const isSelected = selectedMetrics.includes(metric.key);\r\n                  \r\n                  return (\r\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleMetricToggle(metric.key)}\r\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\r\n                      {!metric.canSum && (\r\n                        <span className=\"text-xs text-orange-600 font-medium\">*</span>\r\n                      )}\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground mt-2\">\r\n                * = Kan inte summeras över sidor (unika personer per månad)\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Period-sammandrag */}\r\n          {periodSummary && (\r\n            <div className=\"grid md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/30 rounded-lg\">\r\n              <div className=\"text-center\">\r\n                <div className=\"text-2xl font-bold text-facebook-600\">\r\n                  {periodSummary.totalPages}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Facebook-sidor</div>\r\n              </div>\r\n              \r\n              <div className=\"text-center\">\r\n                <div className=\"text-lg font-semibold\">\r\n                  {getMonthName(periodSummary.period.month)} {periodSummary.period.year}\r\n                </div>\r\n                <div className=\"text-sm text-muted-foreground\">Vald period</div>\r\n              </div>\r\n              \r\n              {selectedMetrics.slice(0, 2).map(metric => {\r\n                const metricData = periodSummary.metrics[metric];\r\n                const definition = METRIC_DEFINITIONS[metric];\r\n                \r\n                if (!metricData || !definition) return null;\r\n                \r\n                return (\r\n                  <div key={metric} className=\"text-center\">\r\n                    <div className=\"text-lg font-semibold\">\r\n                      {definition.canSumAcrossPages ? \r\n                        formatValue(metricData.total) : \r\n                        formatValue(metricData.average)\r\n                      }\r\n                    </div>\r\n                    <div className=\"text-sm text-muted-foreground\">\r\n                      {definition.canSumAcrossPages ? `Total ${definition.displayName}` : `Snitt ${definition.displayName}`}\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Månadsdata-tabell */}\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BarChart3 className=\"h-5 w-5\" />\r\n            {selectedPeriod ? \r\n              `${getMonthName(selectedPeriod.month)} ${selectedPeriod.year} - Alla sidor` : \r\n              'Månadsdata'}\r\n          </CardTitle>\r\n          <div className=\"flex gap-2\">\r\n            <Button onClick={handleExportCSV} variant=\"outline\" size=\"sm\">\r\n              <FileDown className=\"h-4 w-4 mr-2\" />\r\n              CSV\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {periodData.length === 0 ? (\r\n            <p className=\"text-center text-muted-foreground py-8\">\r\n              Ingen data tillgänglig för vald månad\r\n            </p>\r\n          ) : (\r\n            <>\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead \r\n                      className=\"cursor-pointer select-none\"\r\n                      onClick={() => handleSort('pageName')}\r\n                    >\r\n                      <div className=\"flex items-center\">\r\n                        Sidnamn\r\n                        {getSortIcon('pageName')}\r\n                      </div>\r\n                    </TableHead>\r\n                    {selectedMetrics.map(metric => {\r\n                      const definition = METRIC_DEFINITIONS[metric];\r\n                      return (\r\n                        <TableHead \r\n                          key={metric}\r\n                          className=\"text-right cursor-pointer select-none\"\r\n                          onClick={() => handleSort(metric)}\r\n                        >\r\n                          <div className=\"flex items-center justify-end\">\r\n                            {definition?.displayName || metric}\r\n                            {getSortIcon(metric)}\r\n                            {!definition?.canSumAcrossPages && (\r\n                              <span className=\"ml-1 text-orange-600\">*</span>\r\n                            )}\r\n                          </div>\r\n                        </TableHead>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {paginatedData.map((item, index) => (\r\n                    <TableRow key={item.page.pageId}>\r\n                      <TableCell className=\"font-medium\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <ProfileIcon pageName={item.page.pageName} />\r\n                          <span>{item.page.pageName}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      {selectedMetrics.map(metric => (\r\n                        <TableCell \r\n                          key={metric}\r\n                          className=\"text-right\"\r\n                        >\r\n                          <div className=\"flex items-center justify-end gap-1\">\r\n                            {formatValue(item.metrics[metric])}\r\n                            {periodSummary?.metrics[metric] && \r\n                             item.metrics[metric] === periodSummary.metrics[metric].max && \r\n                             periodSummary.metrics[metric].max !== periodSummary.metrics[metric].min && (\r\n                              <span className=\"text-yellow-600\" title=\"Bästa värde för denna månad\">🏆</span>\r\n                            )}\r\n                            {periodSummary?.metrics[metric] && \r\n                             item.metrics[metric] === periodSummary.metrics[metric].min && \r\n                             periodSummary.metrics[metric].max !== periodSummary.metrics[metric].min && (\r\n                              <span className=\"text-gray-500\" title=\"Lägsta värde för denna månad\">📉</span>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                      ))}\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n\r\n              {/* Paginering */}\r\n              <div className=\"flex items-center justify-between mt-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span className=\"text-sm text-muted-foreground\">Visa:</span>\r\n                  <Select\r\n                    value={pageSize.toString()}\r\n                    onValueChange={(value) => {\r\n                      setPageSize(Number(value));\r\n                      setCurrentPage(1);\r\n                    }}\r\n                  >\r\n                    <SelectTrigger className=\"w-[120px]\">\r\n                      <SelectValue />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {PAGE_SIZE_OPTIONS.map(option => (\r\n                        <SelectItem key={option.value} value={option.value.toString()}>\r\n                          {option.label}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                \r\n                <div className=\"flex items-center gap-6\">\r\n                  <span className=\"text-sm text-muted-foreground\">\r\n                    Visar {((currentPage - 1) * pageSize) + 1} till {Math.min(currentPage * pageSize, sortedData.length)} av {sortedData.length}\r\n                  </span>\r\n                  \r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\r\n                      disabled={currentPage === 1}\r\n                    >\r\n                      <ChevronLeft className=\"h-4 w-4\" />\r\n                    </Button>\r\n                    \r\n                    <span className=\"text-sm\">\r\n                      Sida {currentPage} av {totalPages}\r\n                    </span>\r\n                    \r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\r\n                      disabled={currentPage >= totalPages}\r\n                    >\r\n                      <ChevronRight className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          )}\r\n          \r\n          {/* Varning för icke-summerbara metrics */}\r\n          {selectedMetrics.some(m => METRIC_DEFINITIONS[m]?.category === 'unique_persons') && (\r\n            <Alert className=\"mt-4 bg-amber-50 border-amber-200\">\r\n              <AlertCircle className=\"h-4 w-4 text-amber-600\" />\r\n              <AlertTitle className=\"text-amber-800\">Viktigt om Räckvidd</AlertTitle>\r\n              <AlertDescription className=\"text-amber-700\">\r\n                Räckvidd representerar unika personer per månad och kan ALDRIG summeras över månader eller sidor. \r\n                Värdena i tabellen visar data för den valda månaden.\r\n              </AlertDescription>\r\n            </Alert>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MonthlyComparisonView;","/**\r\n * Reach Calculator\r\n * \r\n * Hanterar korrekt beräkning av Reach och Engaged Users som ALDRIG kan summeras över månader\r\n * eftersom dessa representerar unika personer per månad, inte kumulativa värden.\r\n */\r\n\r\n/**\r\n * Lista över metrics som representerar unika personer per månad\r\n * Dessa kan ALDRIG summeras över tid\r\n */\r\nexport const NON_SUMMABLE_METRICS = ['reach', 'engagedUsers'];\r\n\r\n/**\r\n * Lista över metrics som kan summeras över tid\r\n */\r\nexport const SUMMABLE_METRICS = ['engagements', 'reactions', 'publications', 'status', 'comment'];\r\n\r\n/**\r\n * Kontrollerar om en metric kan summeras över månader\r\n * @param {string} metric - Metric att kontrollera\r\n * @returns {boolean} - True om metric kan summeras\r\n */\r\nexport function isMetricSummable(metric) {\r\n  return SUMMABLE_METRICS.includes(metric);\r\n}\r\n\r\n/**\r\n * Kontrollerar om en metric representerar unika personer\r\n * @param {string} metric - Metric att kontrollera\r\n * @returns {boolean} - True om metric representerar unika personer\r\n */\r\nexport function isMetricUniquePersons(metric) {\r\n  return NON_SUMMABLE_METRICS.includes(metric);\r\n}\r\n\r\n/**\r\n * Beräknar genomsnittlig reach över en period för en sida\r\n * Detta är den ENDA korrekta sättet att aggregera reach över månader\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @returns {Object} - Reach-statistik\r\n */\r\nexport function calculateAverageReach(pageTimeseries) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('calculateAverageReach kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  if (monthlyData.length === 0) {\r\n    return {\r\n      averageReach: 0,\r\n      minReach: 0,\r\n      maxReach: 0,\r\n      totalPeriods: 0,\r\n      validPeriods: 0\r\n    };\r\n  }\r\n\r\n  let totalReach = 0;\r\n  let validCount = 0;\r\n  let minReach = Infinity;\r\n  let maxReach = -Infinity;\r\n\r\n  for (const data of monthlyData) {\r\n    const reach = data.metrics.reach;\r\n    \r\n    if (reach !== null && reach !== undefined && !isNaN(reach) && reach >= 0) {\r\n      totalReach += reach;\r\n      validCount++;\r\n      minReach = Math.min(minReach, reach);\r\n      maxReach = Math.max(maxReach, reach);\r\n    }\r\n  }\r\n\r\n  // Hantera fall där ingen giltig data finns\r\n  if (validCount === 0) {\r\n    return {\r\n      averageReach: 0,\r\n      minReach: 0,\r\n      maxReach: 0,\r\n      totalPeriods: monthlyData.length,\r\n      validPeriods: 0\r\n    };\r\n  }\r\n\r\n  return {\r\n    averageReach: Math.round(totalReach / validCount),\r\n    minReach: minReach === Infinity ? 0 : minReach,\r\n    maxReach: maxReach === -Infinity ? 0 : maxReach,\r\n    totalPeriods: monthlyData.length,\r\n    validPeriods: validCount\r\n  };\r\n}\r\n\r\n/**\r\n * Beräknar genomsnittliga engaged users över en period för en sida\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @returns {Object} - Engaged Users statistik\r\n */\r\nexport function calculateAverageEngagedUsers(pageTimeseries) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('calculateAverageEngagedUsers kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  if (monthlyData.length === 0) {\r\n    return {\r\n      averageEngagedUsers: 0,\r\n      minEngagedUsers: 0,\r\n      maxEngagedUsers: 0,\r\n      totalPeriods: 0,\r\n      validPeriods: 0\r\n    };\r\n  }\r\n\r\n  let totalEngagedUsers = 0;\r\n  let validCount = 0;\r\n  let minEngagedUsers = Infinity;\r\n  let maxEngagedUsers = -Infinity;\r\n\r\n  for (const data of monthlyData) {\r\n    const engagedUsers = data.metrics.engagedUsers;\r\n    \r\n    if (engagedUsers !== null && engagedUsers !== undefined && !isNaN(engagedUsers) && engagedUsers >= 0) {\r\n      totalEngagedUsers += engagedUsers;\r\n      validCount++;\r\n      minEngagedUsers = Math.min(minEngagedUsers, engagedUsers);\r\n      maxEngagedUsers = Math.max(maxEngagedUsers, engagedUsers);\r\n    }\r\n  }\r\n\r\n  if (validCount === 0) {\r\n    return {\r\n      averageEngagedUsers: 0,\r\n      minEngagedUsers: 0,\r\n      maxEngagedUsers: 0,\r\n      totalPeriods: monthlyData.length,\r\n      validPeriods: 0\r\n    };\r\n  }\r\n\r\n  return {\r\n    averageEngagedUsers: Math.round(totalEngagedUsers / validCount),\r\n    minEngagedUsers: minEngagedUsers === Infinity ? 0 : minEngagedUsers,\r\n    maxEngagedUsers: maxEngagedUsers === -Infinity ? 0 : maxEngagedUsers,\r\n    totalPeriods: monthlyData.length,\r\n    validPeriods: validCount\r\n  };\r\n}\r\n\r\n/**\r\n * Beräknar engagement rate (engagedUsers / reach) för varje månad\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @returns {Array<Object>} - Månadsvis engagement rate\r\n */\r\nexport function calculateMonthlyEngagementRates(pageTimeseries) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('calculateMonthlyEngagementRates kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  const engagementRates = [];\r\n\r\n  for (const data of monthlyData) {\r\n    const reach = data.metrics.reach;\r\n    const engagedUsers = data.metrics.engagedUsers;\r\n    \r\n    let engagementRate = null;\r\n    if (reach && reach > 0 && engagedUsers !== null && engagedUsers !== undefined) {\r\n      engagementRate = (engagedUsers / reach) * 100;\r\n    }\r\n\r\n    engagementRates.push({\r\n      period: data.getPeriod(),\r\n      reach,\r\n      engagedUsers,\r\n      engagementRate: engagementRate ? Math.round(engagementRate * 100) / 100 : null, // 2 decimaler\r\n      pageName: data.page.pageName,\r\n      pageId: data.page.pageId\r\n    });\r\n  }\r\n\r\n  return engagementRates;\r\n}\r\n\r\n/**\r\n * Beräknar genomsnittlig engagement rate över en period\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @returns {Object} - Genomsnittlig engagement rate statistik\r\n */\r\nexport function calculateAverageEngagementRate(pageTimeseries) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('calculateAverageEngagementRate kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyRates = calculateMonthlyEngagementRates(pageTimeseries);\r\n  const validRates = monthlyRates.filter(rate => rate.engagementRate !== null);\r\n\r\n  if (validRates.length === 0) {\r\n    return {\r\n      averageEngagementRate: 0,\r\n      minEngagementRate: 0,\r\n      maxEngagementRate: 0,\r\n      validPeriods: 0,\r\n      totalPeriods: monthlyRates.length\r\n    };\r\n  }\r\n\r\n  const rates = validRates.map(rate => rate.engagementRate);\r\n  const avgRate = rates.reduce((sum, rate) => sum + rate, 0) / rates.length;\r\n  const minRate = Math.min(...rates);\r\n  const maxRate = Math.max(...rates);\r\n\r\n  return {\r\n    averageEngagementRate: Math.round(avgRate * 100) / 100, // 2 decimaler\r\n    minEngagementRate: Math.round(minRate * 100) / 100,\r\n    maxEngagementRate: Math.round(maxRate * 100) / 100,\r\n    validPeriods: validRates.length,\r\n    totalPeriods: monthlyRates.length,\r\n    monthlyRates: validRates\r\n  };\r\n}\r\n\r\n/**\r\n * Jämför reach-prestanda mellan månader för en sida\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @returns {Array<Object>} - Månad-för-månad reach-jämförelse\r\n */\r\nexport function compareMonthlyReach(pageTimeseries) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('compareMonthlyReach kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  if (monthlyData.length < 2) {\r\n    return []; // Behöver minst 2 månader för jämförelse\r\n  }\r\n\r\n  const comparisons = [];\r\n\r\n  for (let i = 1; i < monthlyData.length; i++) {\r\n    const current = monthlyData[i];\r\n    const previous = monthlyData[i - 1];\r\n\r\n    const currentReach = current.metrics.reach || 0;\r\n    const previousReach = previous.metrics.reach || 0;\r\n\r\n    let percentageChange = null;\r\n    if (previousReach > 0) {\r\n      percentageChange = ((currentReach - previousReach) / previousReach) * 100;\r\n    } else if (currentReach > 0) {\r\n      percentageChange = 100; // 100% ökning från 0\r\n    }\r\n\r\n    comparisons.push({\r\n      currentPeriod: current.getPeriod(),\r\n      previousPeriod: previous.getPeriod(),\r\n      currentReach,\r\n      previousReach,\r\n      absoluteChange: currentReach - previousReach,\r\n      percentageChange: percentageChange ? Math.round(percentageChange * 100) / 100 : null,\r\n      pageName: current.page.pageName,\r\n      pageId: current.page.pageId\r\n    });\r\n  }\r\n\r\n  return comparisons;\r\n}\r\n\r\n/**\r\n * Identifierar månader med exceptionellt hög eller låg reach\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @param {number} threshold - Tröskelvärde för vad som räknas som exceptionellt (standard 2 = 2 standardavvikelser)\r\n * @returns {Object} - Exceptionella månader\r\n */\r\nexport function findReachAnomalies(pageTimeseries, threshold = 2) {\r\n  if (!pageTimeseries) {\r\n    throw new Error('findReachAnomalies kräver PageTimeseries');\r\n  }\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  if (monthlyData.length < 3) {\r\n    return { outliers: [], statistics: null }; // Behöver minst 3 datapunkter\r\n  }\r\n\r\n  // Samla alla reach-värden\r\n  const reachValues = monthlyData\r\n    .map(data => data.metrics.reach)\r\n    .filter(reach => reach !== null && reach !== undefined && !isNaN(reach));\r\n\r\n  if (reachValues.length < 3) {\r\n    return { outliers: [], statistics: null };\r\n  }\r\n\r\n  // Beräkna genomsnitt och standardavvikelse\r\n  const mean = reachValues.reduce((sum, val) => sum + val, 0) / reachValues.length;\r\n  const variance = reachValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / reachValues.length;\r\n  const stdDev = Math.sqrt(variance);\r\n\r\n  const lowerBound = mean - (threshold * stdDev);\r\n  const upperBound = mean + (threshold * stdDev);\r\n\r\n  // Hitta outliers\r\n  const outliers = [];\r\n  for (const data of monthlyData) {\r\n    const reach = data.metrics.reach;\r\n    if (reach !== null && reach !== undefined && !isNaN(reach)) {\r\n      if (reach < lowerBound || reach > upperBound) {\r\n        outliers.push({\r\n          period: data.getPeriod(),\r\n          reach,\r\n          deviation: reach < lowerBound ? 'låg' : 'hög',\r\n          deviationFromMean: reach - mean,\r\n          standardDeviations: Math.abs((reach - mean) / stdDev),\r\n          pageName: data.page.pageName,\r\n          pageId: data.page.pageId\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    outliers,\r\n    statistics: {\r\n      mean: Math.round(mean),\r\n      standardDeviation: Math.round(stdDev),\r\n      lowerBound: Math.round(lowerBound),\r\n      upperBound: Math.round(upperBound),\r\n      threshold,\r\n      sampleSize: reachValues.length\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Validerar att en operation är tillåten för given metric\r\n * Kastar fel om man försöker summera reach eller engagedUsers\r\n * @param {string} operation - Operation som ska utföras ('sum', 'average', etc.)\r\n * @param {string} metric - Metric som operationen ska utföras på\r\n * @throws {Error} - Om operationen inte är tillåten för denna metric\r\n */\r\nexport function validateMetricOperation(operation, metric) {\r\n  if (operation === 'sum' || operation === 'total') {\r\n    if (NON_SUMMABLE_METRICS.includes(metric)) {\r\n      throw new Error(\r\n        `KRITISKT FEL: ${metric} representerar unika personer per månad och kan ALDRIG summeras över tid. ` +\r\n        `Använd genomsnitt istället. Tillåtna operationer för ${metric}: average, min, max`\r\n      );\r\n    }\r\n  }\r\n\r\n  if ((operation === 'average' || operation === 'mean') && SUMMABLE_METRICS.includes(metric)) {\r\n    console.warn(\r\n      `VARNING: Du beräknar genomsnitt för ${metric} som normalt summeras över tid. ` +\r\n      `Kontrollera att detta är det avsedda beteendet.`\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * Säker aggregering av en metric med automatisk validering\r\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\r\n * @param {string} metric - Metric att aggregera\r\n * @param {string} operation - Operation att utföra ('sum', 'average', 'min', 'max')\r\n * @returns {number} - Aggregerat värde\r\n */\r\nexport function safeMetricAggregation(pageTimeseries, metric, operation) {\r\n  if (!pageTimeseries || !metric || !operation) {\r\n    throw new Error('safeMetricAggregation kräver PageTimeseries, metric och operation');\r\n  }\r\n\r\n  // Validera operation mot metric-typ\r\n  validateMetricOperation(operation, metric);\r\n\r\n  const monthlyData = pageTimeseries.getAllMonthlyData();\r\n  if (monthlyData.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  const values = monthlyData\r\n    .map(data => data.metrics[metric])\r\n    .filter(value => value !== null && value !== undefined && !isNaN(value) && value >= 0);\r\n\r\n  if (values.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  switch (operation.toLowerCase()) {\r\n    case 'sum':\r\n    case 'total':\r\n      return values.reduce((sum, val) => sum + val, 0);\r\n    \r\n    case 'average':\r\n    case 'mean':\r\n      return Math.round(values.reduce((sum, val) => sum + val, 0) / values.length);\r\n    \r\n    case 'min':\r\n    case 'minimum':\r\n      return Math.min(...values);\r\n    \r\n    case 'max':\r\n    case 'maximum':\r\n      return Math.max(...values);\r\n    \r\n    default:\r\n      throw new Error(`Okänd operation: ${operation}. Tillåtna: sum, average, min, max`);\r\n  }\r\n}","/**\r\n * Metric Categorizer\r\n * \r\n * Definierarar och kategoriserar Facebook API metrics enligt deras egenskaper\r\n * Säkerställer korrekt hantering av summerbara vs icke-summerbara metrics\r\n */\r\n\r\n// Import från reach_calculator för konsistens\r\nimport { SUMMABLE_METRICS, NON_SUMMABLE_METRICS } from '../services/reach_calculator.js';\r\n\r\n/**\r\n * Komplett definition av alla Facebook API metrics med egenskaper\r\n */\r\nexport const METRIC_DEFINITIONS = {\r\n  // ICKE-SUMMERBARA METRICS (Unika personer per månad)\r\n  reach: {\r\n    category: 'unique_persons',\r\n    displayName: 'Räckvidd',\r\n    description: 'Antal unika personer som såg innehållet under månaden',\r\n    unit: 'personer',\r\n    canSumAcrossTime: false,\r\n    canSumAcrossPages: false, // Överlappning mellan sidor okänd\r\n    preferredAggregation: 'average',\r\n    validAggregations: ['average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Reach',\r\n    icon: '👁️',\r\n    color: '#3B82F6', // Blue\r\n    warningNote: 'Kan ALDRIG summeras över månader - representerar unika personer'\r\n  },\r\n  \r\n  engagedUsers: {\r\n    category: 'unique_persons',\r\n    displayName: 'Engagerade användare',\r\n    description: 'Antal unika personer som interagerade med innehållet under månaden',\r\n    unit: 'personer',\r\n    canSumAcrossTime: false,\r\n    canSumAcrossPages: false, // Överlappning mellan sidor okänd\r\n    preferredAggregation: 'average',\r\n    validAggregations: ['average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Engaged Users',\r\n    icon: '🤝',\r\n    color: '#10B981', // Green\r\n    warningNote: 'Kan ALDRIG summeras över månader - representerar unika personer'\r\n  },\r\n\r\n  // SUMMERBARA METRICS (Räknbara händelser)\r\n  engagements: {\r\n    category: 'countable_events',\r\n    displayName: 'Engagemang',\r\n    description: 'Totalt antal engagemang (från Facebook API) - separat från beräknade interaktioner',\r\n    unit: 'engagemang',\r\n    canSumAcrossTime: true,\r\n    canSumAcrossPages: true,\r\n    preferredAggregation: 'sum',\r\n    validAggregations: ['sum', 'average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Engagements',\r\n    icon: '💬',\r\n    color: '#8B5CF6', // Purple\r\n    warningNote: null\r\n  },\r\n\r\n  reactions: {\r\n    category: 'countable_events',\r\n    displayName: 'Reaktioner',\r\n    description: 'Antal likes, hearts, och andra reaktioner på innehåll',\r\n    unit: 'reaktioner',\r\n    canSumAcrossTime: true,\r\n    canSumAcrossPages: true,\r\n    preferredAggregation: 'sum',\r\n    validAggregations: ['sum', 'average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Reactions',\r\n    icon: '❤️',\r\n    color: '#EF4444', // Red\r\n    warningNote: null\r\n  },\r\n\r\n  publications: {\r\n    category: 'countable_events',\r\n    displayName: 'Publiceringar',\r\n    description: 'Antal publicerade inlägg under månaden',\r\n    unit: 'inlägg',\r\n    canSumAcrossTime: true,\r\n    canSumAcrossPages: true,\r\n    preferredAggregation: 'sum',\r\n    validAggregations: ['sum', 'average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Publications',\r\n    icon: '📝',\r\n    color: '#F59E0B', // Amber\r\n    warningNote: null\r\n  },\r\n\r\n  status: {\r\n    category: 'countable_events',\r\n    displayName: 'Statusuppdateringar',\r\n    description: 'Antal statusuppdateringar under månaden',\r\n    unit: 'statusar',\r\n    canSumAcrossTime: true,\r\n    canSumAcrossPages: true,\r\n    preferredAggregation: 'sum',\r\n    validAggregations: ['sum', 'average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Status',\r\n    icon: '📢',\r\n    color: '#14B8A6', // Teal\r\n    warningNote: null\r\n  },\r\n\r\n  comment: {\r\n    category: 'countable_events',\r\n    displayName: 'Kommentarer',\r\n    description: 'Antal kommentarer på innehåll',\r\n    unit: 'kommentarer',\r\n    canSumAcrossTime: true,\r\n    canSumAcrossPages: true,\r\n    preferredAggregation: 'sum',\r\n    validAggregations: ['sum', 'average', 'min', 'max'],\r\n    dataType: 'integer',\r\n    csvColumn: 'Comment',\r\n    icon: '💭',\r\n    color: '#6366F1', // Indigo\r\n    warningNote: null\r\n  }\r\n};\r\n\r\n/**\r\n * Kategorier av metrics med beskrivningar\r\n */\r\nexport const METRIC_CATEGORIES = {\r\n  unique_persons: {\r\n    name: 'Unika personer',\r\n    description: 'Metrics som representerar unika personer per månad och kan aldrig summeras över tid',\r\n    aggregationRules: {\r\n      acrossTime: 'average', // Endast genomsnitt över månader\r\n      acrossPages: 'average', // Genomsnitt över sidor (överlappning okänd)\r\n      forbidden: ['sum', 'total']\r\n    },\r\n    color: '#3B82F6',\r\n    icon: '👥',\r\n    warningMessage: 'Dessa metrics kan ALDRIG summeras över månader eftersom de representerar unika personer'\r\n  },\r\n  \r\n  countable_events: {\r\n    name: 'Räknbara händelser',\r\n    description: 'Metrics som representerar räknbara händelser och kan summeras över tid och sidor',\r\n    aggregationRules: {\r\n      acrossTime: 'sum', // Kan summeras över månader\r\n      acrossPages: 'sum', // Kan summeras över sidor\r\n      allowed: ['sum', 'total', 'average', 'min', 'max']\r\n    },\r\n    color: '#10B981',\r\n    icon: '🔢',\r\n    warningMessage: null\r\n  }\r\n};\r\n\r\n/**\r\n * Hämtar metric-definition för ett specifikt metric\r\n * @param {string} metricKey - Metric-nyckel (t.ex. 'reach', 'engagements')\r\n * @returns {Object|null} - Metric-definition eller null om inte hittat\r\n */\r\nexport function getMetricDefinition(metricKey) {\r\n  return METRIC_DEFINITIONS[metricKey] || null;\r\n}\r\n\r\n/**\r\n * Kontrollerar om en metric kan summeras över tid\r\n * @param {string} metricKey - Metric att kontrollera\r\n * @returns {boolean} - True om metric kan summeras över månader\r\n */\r\nexport function canSumAcrossTime(metricKey) {\r\n  const definition = getMetricDefinition(metricKey);\r\n  return definition ? definition.canSumAcrossTime : false;\r\n}\r\n\r\n/**\r\n * Kontrollerar om en metric kan summeras över sidor\r\n * @param {string} metricKey - Metric att kontrollera\r\n * @returns {boolean} - True om metric kan summeras över sidor\r\n */\r\nexport function canSumAcrossPages(metricKey) {\r\n  const definition = getMetricDefinition(metricKey);\r\n  return definition ? definition.canSumAcrossPages : false;\r\n}\r\n\r\n/**\r\n * Hämtar föredragen aggregeringsmetod för en metric\r\n * @param {string} metricKey - Metric att kontrollera\r\n * @returns {string} - Föredragen aggregering ('sum', 'average', etc.)\r\n */\r\nexport function getPreferredAggregation(metricKey) {\r\n  const definition = getMetricDefinition(metricKey);\r\n  return definition ? definition.preferredAggregation : 'average';\r\n}\r\n\r\n/**\r\n * Hämtar alla giltiga aggregeringsmetoder för en metric\r\n * @param {string} metricKey - Metric att kontrollera\r\n * @returns {Array<string>} - Lista med giltiga aggregeringar\r\n */\r\nexport function getValidAggregations(metricKey) {\r\n  const definition = getMetricDefinition(metricKey);\r\n  return definition ? definition.validAggregations : ['average'];\r\n}\r\n\r\n/**\r\n * Kontrollerar om en aggregeringsmetod är giltig för en metric\r\n * @param {string} metricKey - Metric att kontrollera\r\n * @param {string} aggregation - Aggregeringsmetod att validera\r\n * @returns {boolean} - True om aggregeringen är giltig\r\n */\r\nexport function isValidAggregation(metricKey, aggregation) {\r\n  const validAggregations = getValidAggregations(metricKey);\r\n  return validAggregations.includes(aggregation);\r\n}\r\n\r\n/**\r\n * Hämtar alla metrics för en specifik kategori\r\n * @param {string} category - Kategori att filtrera på ('unique_persons' eller 'countable_events')\r\n * @returns {Array<string>} - Lista med metric-nycklar i kategorin\r\n */\r\nexport function getMetricsByCategory(category) {\r\n  return Object.keys(METRIC_DEFINITIONS).filter(key => \r\n    METRIC_DEFINITIONS[key].category === category\r\n  );\r\n}\r\n\r\n/**\r\n * Hämtar alla summerbara metrics\r\n * @returns {Array<string>} - Lista med summerbara metric-nycklar\r\n */\r\nexport function getSummerableMetrics() {\r\n  return getMetricsByCategory('countable_events');\r\n}\r\n\r\n/**\r\n * Hämtar alla icke-summerbara metrics\r\n * @returns {Array<string>} - Lista med icke-summerbara metric-nycklar\r\n */\r\nexport function getNonSummerableMetrics() {\r\n  return getMetricsByCategory('unique_persons');\r\n}\r\n\r\n/**\r\n * Validerar en aggregeringsoperation och ger feedback\r\n * @param {string} metricKey - Metric som ska aggregeras\r\n * @param {string} operation - Operation som ska utföras\r\n * @param {string} context - Kontext ('time' eller 'pages')\r\n * @returns {Object} - Valideringsresultat med feedback\r\n */\r\nexport function validateAggregationOperation(metricKey, operation, context = 'time') {\r\n  const definition = getMetricDefinition(metricKey);\r\n  \r\n  if (!definition) {\r\n    return {\r\n      isValid: false,\r\n      error: `Okänt metric: ${metricKey}`,\r\n      suggestion: null\r\n    };\r\n  }\r\n\r\n  const isValidOp = isValidAggregation(metricKey, operation);\r\n  \r\n  if (!isValidOp) {\r\n    const validOps = getValidAggregations(metricKey);\r\n    const preferred = getPreferredAggregation(metricKey);\r\n    \r\n    return {\r\n      isValid: false,\r\n      error: `Operation '${operation}' är inte giltig för ${definition.displayName}`,\r\n      suggestion: `Använd istället: ${preferred} (eller: ${validOps.join(', ')})`,\r\n      warningNote: definition.warningNote\r\n    };\r\n  }\r\n\r\n  // Specialkontroll för summering över tid\r\n  if ((operation === 'sum' || operation === 'total') && context === 'time') {\r\n    if (!definition.canSumAcrossTime) {\r\n      return {\r\n        isValid: false,\r\n        error: `${definition.displayName} kan ALDRIG summeras över månader`,\r\n        suggestion: `Använd genomsnitt istället: ${definition.preferredAggregation}`,\r\n        warningNote: definition.warningNote\r\n      };\r\n    }\r\n  }\r\n\r\n  // Specialkontroll för summering över sidor\r\n  if ((operation === 'sum' || operation === 'total') && context === 'pages') {\r\n    if (!definition.canSumAcrossPages) {\r\n      return {\r\n        isValid: false,\r\n        error: `${definition.displayName} kan inte summeras över sidor (överlappning okänd)`,\r\n        suggestion: `Använd genomsnitt istället: average`,\r\n        warningNote: 'Reach och Engaged Users kan överlappa mellan sidor'\r\n      };\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: true,\r\n    error: null,\r\n    suggestion: null\r\n  };\r\n}\r\n\r\n/**\r\n * Genererar aggregeringsrekommendationer för en lista av metrics\r\n * @param {Array<string>} metricKeys - Lista med metrics att analysera\r\n * @param {string} context - Kontext ('time', 'pages', eller 'both')\r\n * @returns {Object} - Rekommendationer per metric\r\n */\r\nexport function generateAggregationRecommendations(metricKeys, context = 'both') {\r\n  const recommendations = {};\r\n  \r\n  for (const metricKey of metricKeys) {\r\n    const definition = getMetricDefinition(metricKey);\r\n    \r\n    if (!definition) {\r\n      recommendations[metricKey] = {\r\n        error: `Okänt metric: ${metricKey}`,\r\n        recommended: null\r\n      };\r\n      continue;\r\n    }\r\n\r\n    const rec = {\r\n      displayName: definition.displayName,\r\n      category: definition.category,\r\n      preferred: definition.preferredAggregation,\r\n      valid: definition.validAggregations,\r\n      canSumTime: definition.canSumAcrossTime,\r\n      canSumPages: definition.canSumAcrossPages,\r\n      warning: definition.warningNote\r\n    };\r\n\r\n    // Kontext-specifika rekommendationer\r\n    if (context === 'time') {\r\n      rec.recommendedForTime = definition.canSumAcrossTime ? 'sum' : 'average';\r\n    } else if (context === 'pages') {\r\n      rec.recommendedForPages = definition.canSumAcrossPages ? 'sum' : 'average';\r\n    } else if (context === 'both') {\r\n      rec.recommendedForTime = definition.canSumAcrossTime ? 'sum' : 'average';\r\n      rec.recommendedForPages = definition.canSumAcrossPages ? 'sum' : 'average';\r\n    }\r\n\r\n    recommendations[metricKey] = rec;\r\n  }\r\n  \r\n  return recommendations;\r\n}\r\n\r\n/**\r\n * Formaterar metric-värde för visning enligt dess typ\r\n * @param {string} metricKey - Metric-nyckel\r\n * @param {number} value - Värde att formatera\r\n * @returns {string} - Formaterat värde\r\n */\r\nexport function formatMetricValue(metricKey, value) {\r\n  const definition = getMetricDefinition(metricKey);\r\n  \r\n  if (!definition || value === null || value === undefined) {\r\n    return '-';\r\n  }\r\n\r\n  if (value === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Formatera numeriska värden med tusentalsavgränsare\r\n  if (typeof value === 'number' && definition.dataType === 'integer') {\r\n    const formatted = new Intl.NumberFormat('sv-SE').format(Math.round(value));\r\n    return `${formatted} ${definition.unit}`;\r\n  }\r\n\r\n  return String(value);\r\n}\r\n\r\n/**\r\n * Skapar en komplett metrisk rapport med alla definitioner och regler\r\n * @returns {Object} - Komplett metrisk dokumentation\r\n */\r\nexport function getMetricsDocumentation() {\r\n  return {\r\n    overview: {\r\n      totalMetrics: Object.keys(METRIC_DEFINITIONS).length,\r\n      summerableCount: getSummerableMetrics().length,\r\n      nonSummerableCount: getNonSummerableMetrics().length\r\n    },\r\n    categories: METRIC_CATEGORIES,\r\n    metrics: METRIC_DEFINITIONS,\r\n    rules: {\r\n      summerbara: {\r\n        metrics: getSummerableMetrics(),\r\n        description: 'Dessa metrics kan summeras över både månader och sidor',\r\n        operations: ['sum', 'average', 'min', 'max']\r\n      },\r\n      ickeSummerbara: {\r\n        metrics: getNonSummerableMetrics(),\r\n        description: 'Dessa metrics kan ALDRIG summeras - endast genomsnitt är meningsfullt',\r\n        operations: ['average', 'min', 'max'],\r\n        warning: 'Summering över tid eller sidor ger felaktiga resultat'\r\n      }\r\n    },\r\n    csvMapping: Object.fromEntries(\r\n      Object.entries(METRIC_DEFINITIONS).map(([key, def]) => [def.csvColumn, key])\r\n    )\r\n  };\r\n}\r\n\r\n/**\r\n * Validerar konsistens med reach_calculator.js definitioner\r\n * @returns {Object} - Konsistensrapport\r\n */\r\nexport function validateConsistencyWithReachCalculator() {\r\n  const errors = [];\r\n  const warnings = [];\r\n  \r\n  // Kontrollera att våra summerbara metrics matchar reach_calculator.js\r\n  const ourSummerable = getSummerableMetrics();\r\n  const reachCalcSummerable = SUMMABLE_METRICS;\r\n  \r\n  const missingSummerable = reachCalcSummerable.filter(m => !ourSummerable.includes(m));\r\n  const extraSummerable = ourSummerable.filter(m => !reachCalcSummerable.includes(m));\r\n  \r\n  if (missingSummerable.length > 0) {\r\n    errors.push(`Saknade summerbara metrics: ${missingSummerable.join(', ')}`);\r\n  }\r\n  \r\n  if (extraSummerable.length > 0) {\r\n    errors.push(`Extra summerbara metrics: ${extraSummerable.join(', ')}`);\r\n  }\r\n  \r\n  // Kontrollera icke-summerbara metrics\r\n  const ourNonSummerable = getNonSummerableMetrics();\r\n  const reachCalcNonSummerable = NON_SUMMABLE_METRICS;\r\n  \r\n  const missingNonSummerable = reachCalcNonSummerable.filter(m => !ourNonSummerable.includes(m));\r\n  const extraNonSummerable = ourNonSummerable.filter(m => !reachCalcNonSummerable.includes(m));\r\n  \r\n  if (missingNonSummerable.length > 0) {\r\n    errors.push(`Saknade icke-summerbara metrics: ${missingNonSummerable.join(', ')}`);\r\n  }\r\n  \r\n  if (extraNonSummerable.length > 0) {\r\n    errors.push(`Extra icke-summerbara metrics: ${extraNonSummerable.join(', ')}`);\r\n  }\r\n  \r\n  return {\r\n    isConsistent: errors.length === 0,\r\n    errors,\r\n    warnings\r\n  };\r\n}\r\n\r\n// Validera konsistens vid modul-load\r\nconst consistencyCheck = validateConsistencyWithReachCalculator();\r\nif (!consistencyCheck.isConsistent) {\r\n  console.error('KRITISK: metric_categorizer.js är inte konsistent med reach_calculator.js:', consistencyCheck.errors);\r\n}","/**\r\n * Timeseries Models\r\n * \r\n * Datastrukturer för Facebook API tidserie-analys\r\n * Hanterar Facebook-sidor och månadsdata med korrekt typning och validering\r\n */\r\n\r\n/**\r\n * Facebook-sida datastruktur\r\n * Representerar en enskild Facebook-sida med all grundläggande information\r\n */\r\nexport class FacebookPage {\r\n  constructor(pageName, pageId) {\r\n    if (!pageName || !pageId) {\r\n      throw new Error('FacebookPage kräver både pageName och pageId');\r\n    }\r\n    \r\n    this.pageName = pageName.trim();\r\n    this.pageId = String(pageId).trim();\r\n    this.createdAt = new Date();\r\n  }\r\n\r\n  /**\r\n   * Skapar en Facebook-sida från CSV-rad\r\n   * @param {Object} csvRow - Rad från parsad CSV\r\n   * @returns {FacebookPage} - Ny FacebookPage instans\r\n   */\r\n  static fromCSVRow(csvRow) {\r\n    if (!csvRow.Page || !csvRow['Page ID']) {\r\n      throw new Error('CSV-rad saknar obligatoriska fält: Page eller Page ID');\r\n    }\r\n    \r\n    return new FacebookPage(csvRow.Page, csvRow['Page ID']);\r\n  }\r\n\r\n  /**\r\n   * Returnerar unik nyckel för denna sida\r\n   * @returns {string} - Unik identifierare\r\n   */\r\n  getKey() {\r\n    return `page_${this.pageId}`;\r\n  }\r\n\r\n  /**\r\n   * Validerar att sidan är giltig\r\n   * @returns {boolean} - True om sidan är giltig\r\n   */\r\n  isValid() {\r\n    return this.pageName.length > 0 && this.pageId.length > 0;\r\n  }\r\n}\r\n\r\n/**\r\n * Månadsdata för en specifik Facebook-sida\r\n * Innehåller alla metrics för en sida under en månad\r\n */\r\nexport class MonthlyPageData {\r\n  constructor(page, year, month, metrics) {\r\n    if (!(page instanceof FacebookPage)) {\r\n      throw new Error('MonthlyPageData kräver en FacebookPage instans');\r\n    }\r\n    \r\n    if (!year || !month || month < 1 || month > 12) {\r\n      throw new Error('MonthlyPageData kräver giltigt år och månad (1-12)');\r\n    }\r\n\r\n    this.page = page;\r\n    this.year = parseInt(year);\r\n    this.month = parseInt(month);\r\n    this.metrics = this.validateMetrics(metrics || {});\r\n    this.createdAt = new Date();\r\n  }\r\n\r\n  /**\r\n   * Validerar och standardiserar metrics\r\n   * @param {Object} rawMetrics - Rå metrics från CSV\r\n   * @returns {Object} - Validerade metrics\r\n   */\r\n  validateMetrics(rawMetrics) {\r\n    const metrics = {\r\n      // Icke-summerbara metrics (unika personer per månad)\r\n      reach: this.parseNumeric(rawMetrics.reach || rawMetrics.Reach),\r\n      engagedUsers: this.parseNumeric(rawMetrics.engagedUsers || rawMetrics['Engaged Users']),\r\n      \r\n      // Summerbara metrics (kan adderas över månader)\r\n      engagements: this.parseNumeric(rawMetrics.engagements || rawMetrics.Engagements),\r\n      reactions: this.parseNumeric(rawMetrics.reactions || rawMetrics.Reactions),\r\n      publications: this.parseNumeric(rawMetrics.publications || rawMetrics.Publications),\r\n      status: this.parseNumeric(rawMetrics.status || rawMetrics.Status),\r\n      comment: this.parseNumeric(rawMetrics.comment || rawMetrics.Comment)\r\n    };\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Parsar numeriska värden säkert\r\n   * @param {any} value - Värde att parsa\r\n   * @returns {number} - Parsad numerisk värde eller 0\r\n   */\r\n  parseNumeric(value) {\r\n    if (value === null || value === undefined || value === '') return 0;\r\n    const parsed = parseFloat(String(value).replace(/,/g, ''));\r\n    return isNaN(parsed) ? 0 : parsed;\r\n  }\r\n\r\n  /**\r\n   * Skapar MonthlyPageData från CSV-rad\r\n   * @param {Object} csvRow - Rad från parsad CSV\r\n   * @param {number} year - År för denna data\r\n   * @param {number} month - Månad för denna data\r\n   * @returns {MonthlyPageData} - Ny MonthlyPageData instans\r\n   */\r\n  static fromCSVRow(csvRow, year, month) {\r\n    const page = FacebookPage.fromCSVRow(csvRow);\r\n    return new MonthlyPageData(page, year, month, csvRow);\r\n  }\r\n\r\n  /**\r\n   * Returnerar unik nyckel för denna månadsdata\r\n   * @returns {string} - Unik identifierare\r\n   */\r\n  getKey() {\r\n    return `${this.page.getKey()}_${this.year}_${this.month}`;\r\n  }\r\n\r\n  /**\r\n   * Returnerar period som objekt\r\n   * @returns {Object} - Period objekt {year, month}\r\n   */\r\n  getPeriod() {\r\n    return {\r\n      year: this.year,\r\n      month: this.month\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Kontrollerar om detta är samma period som angiven\r\n   * @param {number} year - År att jämföra\r\n   * @param {number} month - Månad att jämföra\r\n   * @returns {boolean} - True om samma period\r\n   */\r\n  isSamePeriod(year, month) {\r\n    return this.year === year && this.month === month;\r\n  }\r\n\r\n  /**\r\n   * Returnerar summerbara metrics (kan adderas över månader)\r\n   * @returns {Object} - Summerbara metrics\r\n   */\r\n  getSummerableMetrics() {\r\n    return {\r\n      engagements: this.metrics.engagements,\r\n      reactions: this.metrics.reactions,\r\n      publications: this.metrics.publications,\r\n      status: this.metrics.status,\r\n      comment: this.metrics.comment\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returnerar icke-summerbara metrics (unika personer per månad)\r\n   * @returns {Object} - Icke-summerbara metrics\r\n   */\r\n  getNonSummerableMetrics() {\r\n    return {\r\n      reach: this.metrics.reach,\r\n      engagedUsers: this.metrics.engagedUsers\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Tidserie-container för en Facebook-sida\r\n * Innehåller all månadsdata för en sida över tid\r\n */\r\nexport class PageTimeseries {\r\n  constructor(page) {\r\n    if (!(page instanceof FacebookPage)) {\r\n      throw new Error('PageTimeseries kräver en FacebookPage instans');\r\n    }\r\n    \r\n    this.page = page;\r\n    this.monthlyData = new Map(); // Map<string, MonthlyPageData>\r\n    this.createdAt = new Date();\r\n  }\r\n\r\n  /**\r\n   * Lägger till månadsdata för denna sida\r\n   * @param {MonthlyPageData} monthlyData - Månadsdata att lägga till\r\n   */\r\n  addMonthlyData(monthlyData) {\r\n    if (!(monthlyData instanceof MonthlyPageData)) {\r\n      throw new Error('addMonthlyData kräver MonthlyPageData instans');\r\n    }\r\n\r\n    if (monthlyData.page.pageId !== this.page.pageId) {\r\n      throw new Error('MonthlyData måste tillhöra samma sida');\r\n    }\r\n\r\n    const key = `${monthlyData.year}_${monthlyData.month}`;\r\n    this.monthlyData.set(key, monthlyData);\r\n  }\r\n\r\n  /**\r\n   * Hämtar månadsdata för specifik period\r\n   * @param {number} year - År\r\n   * @param {number} month - Månad\r\n   * @returns {MonthlyPageData|null} - Månadsdata eller null om inte finns\r\n   */\r\n  getMonthlyData(year, month) {\r\n    const key = `${year}_${month}`;\r\n    return this.monthlyData.get(key) || null;\r\n  }\r\n\r\n  /**\r\n   * Returnerar alla månader som har data\r\n   * @returns {Array<{year: number, month: number}>} - Lista med perioder\r\n   */\r\n  getAvailablePeriods() {\r\n    return Array.from(this.monthlyData.values())\r\n      .map(data => data.getPeriod())\r\n      .sort((a, b) => {\r\n        if (a.year !== b.year) return a.year - b.year;\r\n        return a.month - b.month;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returnerar alla månadsdata sorterat kronologiskt\r\n   * @returns {Array<MonthlyPageData>} - Sorterad lista med månadsdata\r\n   */\r\n  getAllMonthlyData() {\r\n    return Array.from(this.monthlyData.values())\r\n      .sort((a, b) => {\r\n        if (a.year !== b.year) return a.year - b.year;\r\n        return a.month - b.month;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Kontrollerar om sidan har data för specifik period\r\n   * @param {number} year - År\r\n   * @param {number} month - Månad\r\n   * @returns {boolean} - True om data finns\r\n   */\r\n  hasDataForPeriod(year, month) {\r\n    return this.getMonthlyData(year, month) !== null;\r\n  }\r\n\r\n  /**\r\n   * Returnerar antal månader med data\r\n   * @returns {number} - Antal månader\r\n   */\r\n  getMonthCount() {\r\n    return this.monthlyData.size;\r\n  }\r\n}\r\n\r\n/**\r\n * Huvudcontainer för all tidserie-data\r\n * Hanterar flera Facebook-sidor över tid\r\n */\r\nexport class TimeseriesDataset {\r\n  constructor() {\r\n    this.pageTimeseries = new Map(); // Map<string, PageTimeseries>\r\n    this.createdAt = new Date();\r\n  }\r\n\r\n  /**\r\n   * Lägger till månadsdata för en sida\r\n   * @param {MonthlyPageData} monthlyData - Månadsdata att lägga till\r\n   */\r\n  addMonthlyData(monthlyData) {\r\n    if (!(monthlyData instanceof MonthlyPageData)) {\r\n      throw new Error('addMonthlyData kräver MonthlyPageData instans');\r\n    }\r\n\r\n    const pageKey = monthlyData.page.getKey();\r\n    \r\n    if (!this.pageTimeseries.has(pageKey)) {\r\n      this.pageTimeseries.set(pageKey, new PageTimeseries(monthlyData.page));\r\n    }\r\n\r\n    this.pageTimeseries.get(pageKey).addMonthlyData(monthlyData);\r\n  }\r\n\r\n  /**\r\n   * Hämtar tidserie för en specifik sida\r\n   * @param {string} pageId - Sido-ID\r\n   * @returns {PageTimeseries|null} - Sidtidserie eller null\r\n   */\r\n  getPageTimeseries(pageId) {\r\n    const pageKey = `page_${pageId}`;\r\n    return this.pageTimeseries.get(pageKey) || null;\r\n  }\r\n\r\n  /**\r\n   * Returnerar alla sidor som har data\r\n   * @returns {Array<FacebookPage>} - Lista med sidor\r\n   */\r\n  getAllPages() {\r\n    return Array.from(this.pageTimeseries.values())\r\n      .map(timeseries => timeseries.page)\r\n      .sort((a, b) => a.pageName.localeCompare(b.pageName));\r\n  }\r\n\r\n  /**\r\n   * Returnerar alla unika perioder i datasetet\r\n   * @returns {Array<{year: number, month: number}>} - Lista med perioder\r\n   */\r\n  getAllPeriods() {\r\n    const periodsSet = new Set();\r\n    \r\n    for (const timeseries of this.pageTimeseries.values()) {\r\n      for (const period of timeseries.getAvailablePeriods()) {\r\n        periodsSet.add(`${period.year}_${period.month}`);\r\n      }\r\n    }\r\n\r\n    return Array.from(periodsSet)\r\n      .map(key => {\r\n        const [year, month] = key.split('_');\r\n        return { year: parseInt(year), month: parseInt(month) };\r\n      })\r\n      .sort((a, b) => {\r\n        if (a.year !== b.year) return a.year - b.year;\r\n        return a.month - b.month;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Returnerar alla sidor för en specifik period\r\n   * @param {number} year - År\r\n   * @param {number} month - Månad\r\n   * @returns {Array<MonthlyPageData>} - Lista med månadsdata\r\n   */\r\n  getDataForPeriod(year, month) {\r\n    const result = [];\r\n    \r\n    for (const timeseries of this.pageTimeseries.values()) {\r\n      const monthlyData = timeseries.getMonthlyData(year, month);\r\n      if (monthlyData) {\r\n        result.push(monthlyData);\r\n      }\r\n    }\r\n\r\n    return result.sort((a, b) => a.page.pageName.localeCompare(b.page.pageName));\r\n  }\r\n\r\n  /**\r\n   * Returnerar statistik om datasetet\r\n   * @returns {Object} - Dataset-statistik\r\n   */\r\n  getStats() {\r\n    return {\r\n      totalPages: this.pageTimeseries.size,\r\n      totalPeriods: this.getAllPeriods().length,\r\n      totalDataPoints: Array.from(this.pageTimeseries.values())\r\n        .reduce((sum, timeseries) => sum + timeseries.getMonthCount(), 0)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Rensar all data\r\n   */\r\n  clear() {\r\n    this.pageTimeseries.clear();\r\n  }\r\n}","import React, { useState, useMemo } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Button } from './ui/button';\r\nimport { TrendingUp, TrendingDown, Activity, LineChart, BarChart3 } from 'lucide-react';\r\nimport { METRIC_DEFINITIONS } from '../utils/metric_categorizer';\r\nimport { calculateMonthToMonthTrend, calculateAverageTrend } from '../services/timeseries_analytics';\r\nimport { TimeseriesDataset } from '../core/timeseries_models';\r\n\r\n// ENDAST dessa fyra metrics som ska visas\r\nconst ALLOWED_METRICS = [\r\n  { key: 'reach', label: 'Räckvidd', canSum: false },\r\n  { key: 'engagements', label: 'Engagemang', canSum: true },\r\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\r\n  { key: 'publications', label: 'Publiceringar', canSum: true }\r\n];\r\n\r\n// FÖRBÄTTRADE FÄRGER - tydligt åtskilda färger som tilldelas i ordning\r\nconst CHART_COLORS = [\r\n  '#2563EB', // Blå\r\n  '#16A34A', // Grön\r\n  '#EAB308', // Gul/guld\r\n  '#DC2626', // Röd\r\n  '#7C3AED', // Lila\r\n  '#EA580C', // Orange\r\n  '#0891B2', // Cyan\r\n  '#BE185D', // Rosa/magenta\r\n  '#059669', // Emerald\r\n  '#7C2D12', // Brun\r\n  '#4338CA', // Indigo\r\n  '#C2410C'  // Orange-röd\r\n];\r\n\r\nconst TrendAnalysisView = ({ uploadedPeriods }) => {\r\n  // State för linjediagram - INGA DEFAULT-VAL\r\n  const [selectedMetric, setSelectedMetric] = useState('reach');\r\n  const [selectedPages, setSelectedPages] = useState([]);\r\n  const [selectedPeriods, setSelectedPeriods] = useState([]);\r\n  const [hoveredDataPoint, setHoveredDataPoint] = useState(null);\r\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\r\n\r\n  // State för trendanalys\r\n  const [showDetailedTrends, setShowDetailedTrends] = useState(false);\r\n\r\n  // Skapa dataset från uppladdade perioder\r\n  const dataset = useMemo(() => {\r\n    if (!uploadedPeriods || uploadedPeriods.length === 0) {\r\n      return null;\r\n    }\r\n    return new TimeseriesDataset(uploadedPeriods);\r\n  }, [uploadedPeriods]);\r\n\r\n  // Få alla unika sidor från uploadedPeriods (samma metod som PageTimeseriesView)\r\n  const availablePages = useMemo(() => {\r\n    if (!uploadedPeriods || uploadedPeriods.length === 0) {\r\n      return [];\r\n    }\r\n    \r\n    // Samla alla unika sidor från alla perioder (samma logik som PageTimeseriesView)\r\n    const pagesMap = new Map();\r\n    \r\n    uploadedPeriods.forEach(period => {\r\n      if (period.data && Array.isArray(period.data)) {\r\n        period.data.forEach(csvRow => {\r\n          const pageName = csvRow.Page || csvRow.page || 'Okänd sida';\r\n          const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${pageName.replace(/\\s+/g, '_')}`;\r\n          \r\n          if (!pagesMap.has(pageId)) {\r\n            pagesMap.set(pageId, {\r\n              pageId,\r\n              pageName\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    return Array.from(pagesMap.values()).sort((a, b) => \r\n      a.pageName.localeCompare(b.pageName)\r\n    );\r\n  }, [uploadedPeriods]);\r\n\r\n  // Få alla tillgängliga perioder sorterade\r\n  const availablePeriods = useMemo(() => {\r\n    if (!uploadedPeriods) return [];\r\n    \r\n    return uploadedPeriods\r\n      .map(period => ({\r\n        ...period,\r\n        sortKey: period.year * 100 + period.month\r\n      }))\r\n      .sort((a, b) => a.sortKey - b.sortKey);\r\n  }, [uploadedPeriods]);\r\n\r\n  // Månadsnamn för X-axel\r\n  const getMonthName = (month) => {\r\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', \r\n                   'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'];\r\n    return months[month - 1] || month.toString();\r\n  };\r\n\r\n  // Mappa metric-nycklar till exakta CSV-kolumnnamn\r\n  const getCSVColumnName = (metricKey) => {\r\n    const mapping = {\r\n      'reach': 'Reach',\r\n      'engagements': 'Engagements', \r\n      'reactions': 'Reactions',\r\n      'publications': 'Publications'\r\n    };\r\n    return mapping[metricKey] || metricKey;\r\n  };\r\n\r\n  // FÖRBÄTTRAD FÄRGVAL - tilldela färger baserat på ordning av valda sidor\r\n  const getPageColor = (pageId, selectedPageIds) => {\r\n    const index = selectedPageIds.indexOf(pageId);\r\n    return index >= 0 ? CHART_COLORS[index % CHART_COLORS.length] : CHART_COLORS[0];\r\n  };\r\n\r\n  // FIXAD PNG-export med legenda och korrekt aspect ratio (som bild 2)\r\n  const exportChartAsPNG = () => {\r\n    const svg = document.querySelector('#trend-chart-svg');\r\n    if (!svg || chartLines.length === 0) return;\r\n\r\n    // Skapa en canvas för export\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    \r\n    // KORRIGERAT: Aspect ratio som matchar bild 2 (mer kvadratisk)\r\n    const exportWidth = 1200; // Bredare men inte för bred\r\n    const exportHeight = 900; // Högre för att matcha bild 2\r\n    \r\n    canvas.width = exportWidth;\r\n    canvas.height = exportHeight;\r\n    \r\n    // Vit bakgrund för PPT\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillRect(0, 0, exportWidth, exportHeight);\r\n    \r\n    // STEG 1: Rita datapunkt-indikator (prominent blå box som i bild 2) - INGEN svart titel\r\n    const boxY = 60;\r\n    const boxHeight = 60;\r\n    ctx.fillStyle = '#dbeafe'; // Ljusblå bakgrund\r\n    ctx.fillRect(100, boxY, exportWidth - 200, boxHeight);\r\n    ctx.strokeStyle = '#3b82f6';\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeRect(100, boxY, exportWidth - 200, boxHeight);\r\n    \r\n    // Text i blå box - FIXAD CENTRERING\r\n    ctx.fillStyle = '#1e40af';\r\n    ctx.textAlign = 'center';\r\n    ctx.font = 'bold 20px Arial, sans-serif';\r\n    ctx.fillText(`Visar: ${METRIC_DEFINITIONS[selectedMetric]?.displayName}`, exportWidth / 2, boxY + 30);\r\n    ctx.font = '14px Arial, sans-serif';\r\n    ctx.fillText('Aktuell datapunkt som visas i diagrammet', exportWidth / 2, boxY + 50);\r\n    \r\n    // STEG 3: Rita legenda FÖRE diagrammet (som i bild 2)\r\n    const legendY = 140;\r\n    const legendItemWidth = 200;\r\n    const legendItemHeight = 25;\r\n    \r\n    // CENTRERA legenda-objekten baserat på antal konton\r\n    const totalLegendWidth = chartLines.length * legendItemWidth;\r\n    const legendStartX = (exportWidth - totalLegendWidth) / 2;\r\n    \r\n    chartLines.forEach((line, index) => {\r\n      const startX = legendStartX + (index * legendItemWidth);\r\n      \r\n      // Färgad cirkel\r\n      ctx.fillStyle = line.color;\r\n      ctx.beginPath();\r\n      ctx.arc(startX + 10, legendY + 12, 6, 0, 2 * Math.PI);\r\n      ctx.fill();\r\n      \r\n      // Kontonamn\r\n      ctx.fillStyle = '#374151';\r\n      ctx.font = '14px Arial, sans-serif';\r\n      ctx.textAlign = 'left';\r\n      \r\n      // Korta ner långa namn om nödvändigt\r\n      let displayName = line.pageName;\r\n      if (displayName.length > 20) {\r\n        displayName = displayName.substring(0, 17) + '...';\r\n      }\r\n      \r\n      ctx.fillText(displayName, startX + 25, legendY + 17);\r\n    });\r\n    \r\n    // STEG 4: Konvertera och rita SVG-diagrammet\r\n    const svgData = new XMLSerializer().serializeToString(svg);\r\n    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\r\n    const URL = window.URL || window.webkitURL;\r\n    const svgUrl = URL.createObjectURL(svgBlob);\r\n    \r\n    const img = new Image();\r\n    img.onload = () => {\r\n      // KORRIGERAT: Diagram-område (anpassat för legenda ovan)\r\n      const chartStartY = legendY + 50; // Efter legenda\r\n      const chartHeight = exportHeight - chartStartY - 100; // Lämna plats för footer\r\n      const chartWidth = exportWidth - 200; // Marginaler\r\n      \r\n      // Rita SVG-diagrammet\r\n      ctx.drawImage(img, 100, chartStartY, chartWidth, chartHeight);\r\n      \r\n      // STEG 5: Footer-information (konto-lista)\r\n      const footerY = exportHeight - 60;\r\n      ctx.fillStyle = '#6b7280';\r\n      ctx.font = '16px Arial, sans-serif';\r\n      ctx.textAlign = 'center';\r\n      \r\n      const selectedPageNames = chartLines.map(line => line.pageName);\r\n      let accountText = '';\r\n      if (selectedPageNames.length === 1) {\r\n        accountText = `Konto: ${selectedPageNames[0]}`;\r\n      } else if (selectedPageNames.length <= 3) {\r\n        accountText = `Konton: ${selectedPageNames.join(', ')}`;\r\n      } else {\r\n        accountText = `${selectedPageNames.length} konton: ${selectedPageNames.slice(0, 2).join(', ')} med flera`;\r\n      }\r\n      \r\n      // Dela upp lång text i flera rader om nödvändigt\r\n      const maxWidth = exportWidth - 200;\r\n      const words = accountText.split(' ');\r\n      let line = '';\r\n      let y = footerY;\r\n      \r\n      for (let n = 0; n < words.length; n++) {\r\n        const testLine = line + words[n] + ' ';\r\n        const metrics = ctx.measureText(testLine);\r\n        const testWidth = metrics.width;\r\n        \r\n        if (testWidth > maxWidth && n > 0) {\r\n          ctx.fillText(line, exportWidth / 2, y);\r\n          line = words[n] + ' ';\r\n          y += 25;\r\n        } else {\r\n          line = testLine;\r\n        }\r\n      }\r\n      ctx.fillText(line, exportWidth / 2, y);\r\n      \r\n      // STEG 6: Exportera som PNG\r\n      canvas.toBlob((blob) => {\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        \r\n        // Filnamn med kontonamn\r\n        const kontoSuffix = selectedPageNames.length === 1 \r\n          ? selectedPageNames[0].replace(/[^a-zA-Z0-9]/g, '-')\r\n          : `${selectedPageNames.length}-konton`;\r\n        a.download = `trend-analys-${selectedMetric}-${kontoSuffix}-${new Date().toISOString().slice(0, 10)}.png`;\r\n        \r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n      }, 'image/png', 1.0);\r\n      \r\n      URL.revokeObjectURL(svgUrl);\r\n    };\r\n    img.src = svgUrl;\r\n  };\r\n\r\n  // Hantera sidval med checkboxar (samma som andra flikar)\r\n  const handlePageToggle = (pageId) => {\r\n    setSelectedPages(current => \r\n      current.includes(pageId) \r\n        ? current.filter(id => id !== pageId)\r\n        : [...current, pageId]\r\n    );\r\n  };\r\n\r\n  // Hantera metric-val med radio buttons\r\n  const handleMetricToggle = (metricKey) => {\r\n    setSelectedMetric(metricKey);\r\n  };\r\n\r\n// DEL_1_SLUTAR_HÄR - Fortsätt med del 2 som börjar med handlePeriodToggle\r\n// DEL_2_BÖRJAR_HÄR - Fortsättning från del 1 med handlePeriodToggle\r\n\r\n  // Hantera periodval\r\n  const handlePeriodToggle = (period) => {\r\n    const periodKey = `${period.year}-${period.month}`;\r\n    setSelectedPeriods(current => {\r\n      const exists = current.find(p => `${p.year}-${p.month}` === periodKey);\r\n      return exists \r\n        ? current.filter(p => `${p.year}-${p.month}` !== periodKey)\r\n        : [...current, period];\r\n    });\r\n  };\r\n\r\n  // Beräkna om alla perioder är valda - FIXAD LOGIK\r\n  const allPeriodsSelected = useMemo(() => {\r\n    return selectedPeriods.length > 0 && selectedPeriods.length === availablePeriods.length;\r\n  }, [selectedPeriods.length, availablePeriods.length]);\r\n  \r\n  const handleToggleAllPeriods = () => {\r\n    if (allPeriodsSelected) {\r\n      setSelectedPeriods([]); // Avmarkera alla\r\n    } else {\r\n      setSelectedPeriods(availablePeriods); // Markera alla\r\n    }\r\n  };\r\n  // Generera linjediagram-data - KRÄVER BÅDE SIDOR OCH PERIODER\r\n  const generateChartData = useMemo(() => {\r\n    if (!uploadedPeriods || selectedPages.length === 0 || selectedPeriods.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const chartPoints = [];\r\n    // FIXAT: Använd endast valda perioder, INGEN fallback till availablePeriods\r\n    const periodsToShow = selectedPeriods;\r\n    \r\n    periodsToShow.forEach(period => {\r\n      if (period.data && Array.isArray(period.data)) {\r\n        selectedPages.forEach(pageId => {\r\n          const csvRow = period.data.find(row => {\r\n            const rowPageId = row['Page ID'] || row.pageId || `page_${(row.Page || row.page || '').replace(/\\s+/g, '_')}`;\r\n            return rowPageId === pageId;\r\n          });\r\n          \r\n          if (csvRow) {\r\n            // Läs värde från rätt CSV-kolumn\r\n            const csvColumnName = getCSVColumnName(selectedMetric);\r\n            const rawValue = csvRow[csvColumnName];\r\n            \r\n            // Hantera olika format för numeriska värden\r\n            let value = 0;\r\n            if (rawValue !== null && rawValue !== undefined && rawValue !== '') {\r\n              // Ta bort kommatecken och andra formateringstecken\r\n              const cleanValue = String(rawValue).replace(/[,\\s]/g, '');\r\n              value = parseFloat(cleanValue) || 0;\r\n            }\r\n            \r\n            chartPoints.push({\r\n              periodKey: `${period.year}-${period.month.toString().padStart(2, '0')}`,\r\n              period: `${getMonthName(period.month)} ${period.year}`,\r\n              month: getMonthName(period.month),\r\n              year: period.year,\r\n              pageId,\r\n              pageName: csvRow.Page || csvRow.page || 'Okänd sida',\r\n              value,\r\n              metric: selectedMetric\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    return chartPoints;\r\n  }, [uploadedPeriods, selectedPages, selectedPeriods, selectedMetric]);\r\n\r\n  // Gruppera data per sida för linjediagram\r\n  const chartLines = useMemo(() => {\r\n    const groupedByPage = new Map();\r\n    \r\n    generateChartData.forEach(point => {\r\n      if (!groupedByPage.has(point.pageId)) {\r\n        groupedByPage.set(point.pageId, {\r\n          pageId: point.pageId,\r\n          pageName: point.pageName,\r\n          points: [],\r\n          color: getPageColor(point.pageId, selectedPages) // Använd förbättrad färgval\r\n        });\r\n      }\r\n      groupedByPage.get(point.pageId).points.push(point);\r\n    });\r\n\r\n    // Sortera punkter per period för varje linje\r\n    groupedByPage.forEach(line => {\r\n      line.points.sort((a, b) => a.periodKey.localeCompare(b.periodKey));\r\n    });\r\n\r\n    return Array.from(groupedByPage.values());\r\n  }, [generateChartData, selectedPages]);\r\n\r\n  // Beräkna Y-axel range\r\n  const yAxisRange = useMemo(() => {\r\n    if (generateChartData.length === 0) return { min: 0, max: 100 };\r\n    \r\n    const values = generateChartData.map(d => d.value);\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    const padding = (max - min) * 0.1 || 10;\r\n    \r\n    return {\r\n      min: Math.max(0, min - padding),\r\n      max: max + padding\r\n    };\r\n  }, [generateChartData]);\r\n\r\n  // MJUK KURV-FUNKTION (Catmull-Rom spline)\r\n  const createSmoothPath = (points) => {\r\n    if (points.length < 2) return '';\r\n    \r\n    // För få punkter för mjuk kurva, använd vanlig linje\r\n    if (points.length === 2) {\r\n      const [p1, p2] = points;\r\n      return `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\r\n    }\r\n    \r\n    // Skapa mjuk kurva med quadratic Bézier curves\r\n    let path = `M ${points[0].x} ${points[0].y}`;\r\n    \r\n    for (let i = 1; i < points.length; i++) {\r\n      const current = points[i];\r\n      const previous = points[i - 1];\r\n      \r\n      if (i === 1) {\r\n        // Första kurvan\r\n        const next = points[i + 1] || current;\r\n        const cp1x = previous.x + (current.x - previous.x) * 0.3;\r\n        const cp1y = previous.y + (current.y - previous.y) * 0.3;\r\n        const cp2x = current.x - (next.x - previous.x) * 0.1;\r\n        const cp2y = current.y - (next.y - previous.y) * 0.1;\r\n        \r\n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\r\n      } else if (i === points.length - 1) {\r\n        // Sista kurvan\r\n        const beforePrev = points[i - 2] || previous;\r\n        const cp1x = previous.x + (current.x - beforePrev.x) * 0.1;\r\n        const cp1y = previous.y + (current.y - beforePrev.y) * 0.1;\r\n        const cp2x = current.x - (current.x - previous.x) * 0.3;\r\n        const cp2y = current.y - (current.y - previous.y) * 0.3;\r\n        \r\n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\r\n      } else {\r\n        // Mellanliggande kurvor\r\n        const next = points[i + 1];\r\n        const beforePrev = points[i - 2] || previous;\r\n        const cp1x = previous.x + (current.x - beforePrev.x) * 0.1;\r\n        const cp1y = previous.y + (current.y - beforePrev.y) * 0.1;\r\n        const cp2x = current.x - (next.x - previous.x) * 0.1;\r\n        const cp2y = current.y - (next.y - previous.y) * 0.1;\r\n        \r\n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\r\n      }\r\n    }\r\n    \r\n    return path;\r\n  };\r\n\r\n  // Hantera mouse events för tooltip\r\n  const handleMouseMove = (event, point) => {\r\n    const rect = event.currentTarget.getBoundingClientRect();\r\n    setMousePosition({\r\n      x: event.clientX - rect.left,\r\n      y: event.clientY - rect.top\r\n    });\r\n    setHoveredDataPoint(point);\r\n  };\r\n\r\n  if (!uploadedPeriods || uploadedPeriods.length === 0) {\r\n    return (\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <TrendingUp className=\"h-5 w-5\" />\r\n            Trendanalys\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <p className=\"text-muted-foreground\">\r\n            Ladda upp minst två månadsfiler för att se trendanalys.\r\n          </p>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Linjediagram-sektion */}\r\n      <Card>\r\n        <CardHeader className=\"flex flex-row items-center justify-between\">\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <LineChart className=\"h-5 w-5\" />\r\n            Utveckling över tid\r\n          </CardTitle>\r\n          <div className=\"flex gap-2\">\r\n            <Button onClick={exportChartAsPNG} variant=\"outline\" size=\"sm\" disabled={chartLines.length === 0}>\r\n              📊 Exportera PNG\r\n            </Button>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"space-y-6\">\r\n          {/* Kontroller FÖRST - KORREKT ORDNING: Sidor, Datapunkt, Perioder */}\r\n          <div className=\"grid md:grid-cols-3 gap-4\">\r\n            {/* FÖRSTA: Sidval med checkboxar (samma som andra flikar) */}\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Välj Facebook-sidor ({selectedPages.length} valda)</label>\r\n              <div className=\"max-h-32 overflow-y-auto border rounded p-2 space-y-1\">\r\n                {availablePages.map(page => {\r\n                  const isSelected = selectedPages.includes(page.pageId);\r\n                  \r\n                  return (\r\n                    <label key={page.pageId} className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handlePageToggle(page.pageId)}\r\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium\">{page.pageName}</span>\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* ANDRA: Datapunkt-väljare - UTAN summerings-kommentar för reach */}\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Välj datapunkt</label>\r\n              <div className=\"space-y-2\">\r\n                {ALLOWED_METRICS.map(metric => {\r\n                  const isSelected = selectedMetric === metric.key;\r\n                  \r\n                  return (\r\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"metric\"\r\n                        checked={isSelected}\r\n                        onChange={() => handleMetricToggle(metric.key)}\r\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 focus:ring-facebook-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n\r\n            {/* TREDJE: Periodval med \"Välj alla\" checkbox - FIXAD RÄKNING */}\r\n            <div>\r\n              <label className=\"text-sm font-medium mb-2 block\">Välj perioder ({selectedPeriods.length} valda)</label>\r\n              \r\n              {/* Välj alla checkbox */}\r\n              <label className=\"flex items-center gap-2 cursor-pointer mb-2 p-2 bg-gray-50 rounded\">\r\n                <input\r\n                  type=\"checkbox\"\r\n                  checked={allPeriodsSelected}\r\n                  onChange={handleToggleAllPeriods}\r\n                  className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\r\n                />\r\n                <span className=\"text-sm font-medium\">Välj alla perioder</span>\r\n              </label>\r\n\r\n              <div className=\"max-h-32 overflow-y-auto border rounded p-2 space-y-1\">\r\n                {availablePeriods.map(period => {\r\n                  const isSelected = selectedPeriods.some(p => p.year === period.year && p.month === period.month);\r\n                  \r\n                  return (\r\n                    <label key={`${period.year}-${period.month}`} className=\"flex items-center gap-2 cursor-pointer\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        checked={isSelected}\r\n                        onChange={() => handlePeriodToggle(period)}\r\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\r\n                      />\r\n                      <span className=\"text-sm font-medium\">\r\n                        {getMonthName(period.month)} {period.year}\r\n                      </span>\r\n                    </label>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* PROMINENT DATAPUNKT-VISNING - FLYTTAD EFTER KONTROLLER */}\r\n          {selectedMetric && (\r\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\r\n              <h3 className=\"text-lg font-bold text-blue-900\">\r\n                Visar: {METRIC_DEFINITIONS[selectedMetric]?.displayName}\r\n              </h3>\r\n              <p className=\"text-sm text-blue-700 mt-1\">\r\n                Aktuell datapunkt som visas i diagrammet\r\n              </p>\r\n            </div>\r\n          )}\r\n\r\n          {/* Linjediagram */}\r\n          {chartLines.length > 0 ? (\r\n            <div className=\"space-y-4\">\r\n              {/* Legenda */}\r\n              <div className=\"flex flex-wrap gap-3\">\r\n                {chartLines.map(line => (\r\n                  <div key={line.pageId} className=\"flex items-center gap-2\">\r\n                    <div \r\n                      className=\"w-3 h-3 rounded-full border\"\r\n                      style={{ backgroundColor: line.color }}\r\n                    />\r\n                    <span className=\"text-sm font-medium\">{line.pageName}</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* SVG Diagram - STÖRRE STORLEK */}\r\n              <div className=\"relative\">\r\n                <svg \r\n                  id=\"trend-chart-svg\"\r\n                  width=\"100%\" \r\n                  height=\"500\" \r\n                  viewBox=\"0 0 1000 500\"\r\n                  className=\"border rounded bg-gray-50\"\r\n                  onMouseLeave={() => setHoveredDataPoint(null)}\r\n                >\r\n                  {/* Grid-linjer */}\r\n                  <defs>\r\n                    <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\r\n                      <path d=\"M 50 0 L 0 0 0 50\" fill=\"none\" stroke=\"#e5e7eb\" strokeWidth=\"1\"/>\r\n                    </pattern>\r\n                  </defs>\r\n                  <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\r\n\r\n                  {/* Y-axel värden */}\r\n                  {[0, 25, 50, 75, 100].map(percent => {\r\n                    const yPos = 450 - (percent / 100) * 380;\r\n                    const value = yAxisRange.min + (percent / 100) * (yAxisRange.max - yAxisRange.min);\r\n                    return (\r\n                      <g key={percent}>\r\n                        <line x1=\"70\" y1={yPos} x2=\"930\" y2={yPos} stroke=\"#d1d5db\" strokeWidth=\"1\"/>\r\n                        <text x=\"65\" y={yPos + 4} textAnchor=\"end\" fontSize=\"14\" fill=\"#6b7280\">\r\n                          {Math.round(value).toLocaleString()}\r\n                        </text>\r\n                      </g>\r\n                    );\r\n                  })}\r\n\r\n                  {/* X-axel månader */}\r\n                  {availablePeriods.map((period, index) => {\r\n                    const xPos = 70 + (index / Math.max(1, availablePeriods.length - 1)) * 860;\r\n                    return (\r\n                      <g key={`${period.year}-${period.month}`}>\r\n                        <line x1={xPos} y1=\"70\" x2={xPos} y2=\"450\" stroke=\"#d1d5db\" strokeWidth=\"1\"/>\r\n                        <text x={xPos} y=\"475\" textAnchor=\"middle\" fontSize=\"14\" fill=\"#6b7280\">\r\n                          {getMonthName(period.month)}\r\n                        </text>\r\n                        <text x={xPos} y=\"490\" textAnchor=\"middle\" fontSize=\"12\" fill=\"#9ca3af\">\r\n                          {period.year}\r\n                        </text>\r\n                      </g>\r\n                    );\r\n                  })}\r\n\r\n                  {/* MJUKA KURVORNA */}\r\n                  {chartLines.map(line => {\r\n                    if (line.points.length < 1) return null;\r\n\r\n                    // Beräkna koordinater för alla punkter\r\n                    const pathPoints = line.points.map((point, index) => {\r\n                      const periodIndex = availablePeriods.findIndex(p => \r\n                        `${p.year}-${p.month.toString().padStart(2, '0')}` === point.periodKey\r\n                      );\r\n                      const x = 70 + (periodIndex / Math.max(1, availablePeriods.length - 1)) * 860;\r\n                      const y = 450 - ((point.value - yAxisRange.min) / (yAxisRange.max - yAxisRange.min)) * 380;\r\n                      \r\n                      return { x, y, point };\r\n                    });\r\n\r\n                    return (\r\n                      <g key={line.pageId}>\r\n                        {/* MJUK KURVA istället för hård linje */}\r\n                        {line.points.length > 1 && (\r\n                          <path\r\n                            d={createSmoothPath(pathPoints)}\r\n                            fill=\"none\"\r\n                            stroke={line.color}\r\n                            strokeWidth=\"4\"\r\n                            strokeLinecap=\"round\"\r\n                            strokeLinejoin=\"round\"\r\n                          />\r\n                        )}\r\n                        \r\n                        {/* Punkter */}\r\n                        {pathPoints.map(({ x, y, point }, index) => (\r\n                          <circle\r\n                            key={index}\r\n                            cx={x}\r\n                            cy={y}\r\n                            r=\"6\"\r\n                            fill={line.color}\r\n                            stroke=\"white\"\r\n                            strokeWidth=\"3\"\r\n                            className=\"cursor-pointer\"\r\n                            onMouseEnter={(e) => handleMouseMove(e, point)}\r\n                            onMouseLeave={() => setHoveredDataPoint(null)}\r\n                          />\r\n                        ))}\r\n                      </g>\r\n                    );\r\n                  })}\r\n\r\n                  {/* FÖRBÄTTRAD TOOLTIP med dynamisk positionering */}\r\n                  {hoveredDataPoint && (\r\n                    <g>\r\n                      {/* Beräkna tooltip-position baserat på muspekaren */}\r\n                      {(() => {\r\n                        // Tooltip ska vara 200px bred och 70px hög\r\n                        const tooltipWidth = 200;\r\n                        const tooltipHeight = 70;\r\n                        let tooltipX = mousePosition.x + 15;\r\n                        let tooltipY = mousePosition.y - 35;\r\n                        \r\n                        // Justera om tooltip går utanför höger kant\r\n                        if (tooltipX + tooltipWidth > 980) {\r\n                          tooltipX = mousePosition.x - tooltipWidth - 15;\r\n                        }\r\n                        \r\n                        // Justera om tooltip går utanför övre kant\r\n                        if (tooltipY < 15) {\r\n                          tooltipY = mousePosition.y + 15;\r\n                        }\r\n                        \r\n                        // Justera om tooltip går utanför nedre kant\r\n                        if (tooltipY + tooltipHeight > 480) {\r\n                          tooltipY = mousePosition.y - tooltipHeight - 15;\r\n                        }\r\n                        \r\n                        return (\r\n                          <>\r\n                            <rect\r\n                              x={tooltipX} y={tooltipY} \r\n                              width={tooltipWidth} height={tooltipHeight}\r\n                              fill=\"rgba(0,0,0,0.85)\" rx=\"6\"\r\n                            />\r\n                            <text x={tooltipX + 12} y={tooltipY + 20} fill=\"white\" fontSize=\"13\" fontWeight=\"bold\">\r\n                              {hoveredDataPoint.pageName}\r\n                            </text>\r\n                            <text x={tooltipX + 12} y={tooltipY + 38} fill=\"white\" fontSize=\"12\">\r\n                              {hoveredDataPoint.period}\r\n                            </text>\r\n                            <text x={tooltipX + 12} y={tooltipY + 55} fill=\"white\" fontSize=\"12\">\r\n                              {METRIC_DEFINITIONS[hoveredDataPoint.metric]?.displayName}: {hoveredDataPoint.value.toLocaleString()}\r\n                            </text>\r\n                          </>\r\n                        );\r\n                      })()}\r\n                    </g>\r\n                  )}\r\n                </svg>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-12 text-muted-foreground\">\r\n              <LineChart className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\r\n              <p className=\"text-lg font-medium mb-2\">Välj sidor och perioder för att visa diagram</p>\r\n              <p className=\"text-sm\">\r\n                {selectedPages.length === 0 && selectedPeriods.length === 0 \r\n                  ? \"Markera minst en Facebook-sida och period\"\r\n                  : selectedPages.length === 0 \r\n                  ? \"Markera minst en Facebook-sida i listan ovan\"\r\n                  : \"Markera minst en period i listan ovan\"\r\n                }\r\n              </p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TrendAnalysisView;","/**\r\n * Timeseries Storage\r\n * \r\n * Hanterar lagring av Facebook API månadsdata i webbläsaren\r\n * Använder localStorage för metadata och IndexedDB för stora datamängder\r\n * Anpassad för tidserie-data istället för post-baserad data\r\n */\r\n\r\n// Lagringskonfiguration\r\nconst STORAGE_CONFIG = {\r\n  LOCALSTORAGE_KEYS: {\r\n    METADATA: 'fb_analyzer_metadata',\r\n    PERIODS: 'fb_analyzer_periods',\r\n    PAGES: 'fb_analyzer_pages',\r\n    SETTINGS: 'fb_analyzer_settings'\r\n  },\r\n  INDEXEDDB: {\r\n    NAME: 'FacebookAnalyzerDB',\r\n    VERSION: 1,\r\n    STORES: {\r\n      MONTHLY_DATA: 'monthlyData',\r\n      TIMESERIES: 'timeseries'\r\n    }\r\n  },\r\n  LIMITS: {\r\n    LOCALSTORAGE_MAX: 5 * 1024 * 1024,    // 5MB\r\n    INDEXEDDB_MAX: 50 * 1024 * 1024,      // 50MB\r\n    MAX_PERIODS: 120,                      // Max 10 år data\r\n    MAX_PAGES: 1000                        // Max 1000 Facebook-sidor\r\n  }\r\n};\r\n\r\n/**\r\n * Initialiserar IndexedDB för tidserie-lagring\r\n */\r\nasync function initializeIndexedDB() {\r\n  return new Promise((resolve, reject) => {\r\n    const request = indexedDB.open(STORAGE_CONFIG.INDEXEDDB.NAME, STORAGE_CONFIG.INDEXEDDB.VERSION);\r\n    \r\n    request.onerror = () => {\r\n      console.error('IndexedDB initialization failed:', request.error);\r\n      reject(request.error);\r\n    };\r\n    \r\n    request.onupgradeneeded = (event) => {\r\n      const db = event.target.result;\r\n      \r\n      // Store för månadsdata\r\n      if (!db.objectStoreNames.contains(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA)) {\r\n        const monthlyStore = db.createObjectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA, {\r\n          keyPath: 'id'\r\n        });\r\n        \r\n        // Index för snabbare sökningar\r\n        monthlyStore.createIndex('pageId', 'pageId', { unique: false });\r\n        monthlyStore.createIndex('period', ['year', 'month'], { unique: false });\r\n        monthlyStore.createIndex('pagePeriod', ['pageId', 'year', 'month'], { unique: true });\r\n        \r\n        console.log('Created monthlyData store with indexes');\r\n      }\r\n      \r\n      // Store för tidsserier (aggregerad data per sida)\r\n      if (!db.objectStoreNames.contains(STORAGE_CONFIG.INDEXEDDB.STORES.TIMESERIES)) {\r\n        const timeseriesStore = db.createObjectStore(STORAGE_CONFIG.INDEXEDDB.STORES.TIMESERIES, {\r\n          keyPath: 'pageId'\r\n        });\r\n        \r\n        timeseriesStore.createIndex('pageName', 'pageName', { unique: false });\r\n        \r\n        console.log('Created timeseries store');\r\n      }\r\n    };\r\n    \r\n    request.onsuccess = () => {\r\n      resolve(request.result);\r\n    };\r\n  });\r\n}\r\n\r\n/**\r\n * Sparar månadsdata för en sida i IndexedDB\r\n * @param {MonthlyPageData} monthlyData - Månadsdata att spara\r\n * @returns {Promise<boolean>} - True om lyckad\r\n */\r\nexport async function saveMonthlyData(monthlyData) {\r\n  if (!monthlyData || !monthlyData.page || !monthlyData.year || !monthlyData.month) {\r\n    throw new Error('Ogiltig månadsdata för lagring');\r\n  }\r\n  \r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    // Skapa storage-objekt\r\n    const storageObject = {\r\n      id: `${monthlyData.page.pageId}_${monthlyData.year}_${monthlyData.month}`,\r\n      pageId: monthlyData.page.pageId,\r\n      pageName: monthlyData.page.pageName,\r\n      year: monthlyData.year,\r\n      month: monthlyData.month,\r\n      metrics: monthlyData.metrics,\r\n      createdAt: monthlyData.createdAt || new Date(),\r\n      updatedAt: new Date()\r\n    };\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readwrite');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      \r\n      const request = store.put(storageObject);\r\n      \r\n      request.onsuccess = () => {\r\n        console.log(`Saved monthly data: ${storageObject.id}`);\r\n        resolve(true);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        console.error('Failed to save monthly data:', request.error);\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error saving monthly data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Sparar flera månadsdata i batch\r\n * @param {Array<MonthlyPageData>} monthlyDataList - Lista med månadsdata\r\n * @returns {Promise<Object>} - Resultat med antal sparade och fel\r\n */\r\nexport async function saveMonthlyDataBatch(monthlyDataList) {\r\n  if (!Array.isArray(monthlyDataList) || monthlyDataList.length === 0) {\r\n    throw new Error('Tom eller ogiltig månadsdata-lista');\r\n  }\r\n  \r\n  const results = {\r\n    saved: 0,\r\n    failed: 0,\r\n    errors: []\r\n  };\r\n  \r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readwrite');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      \r\n      let completed = 0;\r\n      \r\n      for (const monthlyData of monthlyDataList) {\r\n        try {\r\n          const storageObject = {\r\n            id: `${monthlyData.page.pageId}_${monthlyData.year}_${monthlyData.month}`,\r\n            pageId: monthlyData.page.pageId,\r\n            pageName: monthlyData.page.pageName,\r\n            year: monthlyData.year,\r\n            month: monthlyData.month,\r\n            metrics: monthlyData.metrics,\r\n            createdAt: monthlyData.createdAt || new Date(),\r\n            updatedAt: new Date()\r\n          };\r\n          \r\n          const request = store.put(storageObject);\r\n          \r\n          request.onsuccess = () => {\r\n            results.saved++;\r\n            completed++;\r\n            \r\n            if (completed === monthlyDataList.length) {\r\n              console.log(`Batch save completed: ${results.saved} saved, ${results.failed} failed`);\r\n              resolve(results);\r\n            }\r\n          };\r\n          \r\n          request.onerror = () => {\r\n            results.failed++;\r\n            results.errors.push({\r\n              id: storageObject.id,\r\n              error: request.error.message\r\n            });\r\n            completed++;\r\n            \r\n            if (completed === monthlyDataList.length) {\r\n              resolve(results);\r\n            }\r\n          };\r\n          \r\n        } catch (error) {\r\n          results.failed++;\r\n          results.errors.push({\r\n            data: monthlyData,\r\n            error: error.message\r\n          });\r\n          completed++;\r\n          \r\n          if (completed === monthlyDataList.length) {\r\n            resolve(results);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Batch save failed:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar månadsdata för en specifik sida och period\r\n * @param {string} pageId - Sido-ID\r\n * @param {number} year - År\r\n * @param {number} month - Månad\r\n * @returns {Promise<Object|null>} - Månadsdata eller null\r\n */\r\nexport async function getMonthlyData(pageId, year, month) {\r\n  if (!pageId || !year || !month) {\r\n    throw new Error('pageId, year och month krävs');\r\n  }\r\n  \r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      const index = store.index('pagePeriod');\r\n      \r\n      const request = index.get([pageId, year, month]);\r\n      \r\n      request.onsuccess = () => {\r\n        resolve(request.result || null);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting monthly data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar all data för en specifik sida (hela tidsserien)\r\n * @param {string} pageId - Sido-ID\r\n * @returns {Promise<Array<Object>>} - Lista med månadsdata\r\n */\r\nexport async function getPageTimeseries(pageId) {\r\n  if (!pageId) {\r\n    throw new Error('pageId krävs');\r\n  }\r\n  \r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      const index = store.index('pageId');\r\n      \r\n      const request = index.getAll(pageId);\r\n      \r\n      request.onsuccess = () => {\r\n        // Sortera kronologiskt\r\n        const data = request.result.sort((a, b) => {\r\n          if (a.year !== b.year) return a.year - b.year;\r\n          return a.month - b.month;\r\n        });\r\n        \r\n        resolve(data);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting page timeseries:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar data för alla sidor för en specifik period\r\n * @param {number} year - År\r\n * @param {number} month - Månad\r\n * @returns {Promise<Array<Object>>} - Lista med månadsdata för alla sidor\r\n */\r\nexport async function getPeriodData(year, month) {\r\n  if (!year || !month) {\r\n    throw new Error('year och month krävs');\r\n  }\r\n  \r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      const index = store.index('period');\r\n      \r\n      const request = index.getAll([year, month]);\r\n      \r\n      request.onsuccess = () => {\r\n        // Sortera efter sidnamn\r\n        const data = request.result.sort((a, b) => \r\n          a.pageName.localeCompare(b.pageName)\r\n        );\r\n        \r\n        resolve(data);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting period data:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar alla unika perioder i databasen\r\n * @returns {Promise<Array<Object>>} - Lista med perioder {year, month}\r\n */\r\nexport async function getAllPeriods() {\r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      \r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        const periodsSet = new Set();\r\n        \r\n        for (const item of request.result) {\r\n          periodsSet.add(`${item.year}_${item.month}`);\r\n        }\r\n        \r\n        const periods = Array.from(periodsSet)\r\n          .map(key => {\r\n            const [year, month] = key.split('_');\r\n            return { year: parseInt(year), month: parseInt(month) };\r\n          })\r\n          .sort((a, b) => {\r\n            if (a.year !== b.year) return a.year - b.year;\r\n            return a.month - b.month;\r\n          });\r\n        \r\n        resolve(periods);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting all periods:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar alla unika sidor i databasen\r\n * @returns {Promise<Array<Object>>} - Lista med sidor {pageId, pageName}\r\n */\r\nexport async function getAllPages() {\r\n  try {\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n      const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      \r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        const pagesMap = new Map();\r\n        \r\n        for (const item of request.result) {\r\n          if (!pagesMap.has(item.pageId)) {\r\n            pagesMap.set(item.pageId, {\r\n              pageId: item.pageId,\r\n              pageName: item.pageName\r\n            });\r\n          }\r\n        }\r\n        \r\n        const pages = Array.from(pagesMap.values())\r\n          .sort((a, b) => a.pageName.localeCompare(b.pageName));\r\n        \r\n        resolve(pages);\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting all pages:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Sparar metadata i localStorage\r\n * @param {Object} metadata - Metadata att spara\r\n */\r\nexport function saveMetadata(metadata) {\r\n  try {\r\n    const metadataWithTimestamp = {\r\n      ...metadata,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    localStorage.setItem(\r\n      STORAGE_CONFIG.LOCALSTORAGE_KEYS.METADATA,\r\n      JSON.stringify(metadataWithTimestamp)\r\n    );\r\n    \r\n    console.log('Metadata saved to localStorage');\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to save metadata:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Hämtar metadata från localStorage\r\n * @returns {Object|null} - Metadata eller null\r\n */\r\nexport function getMetadata() {\r\n  try {\r\n    const stored = localStorage.getItem(STORAGE_CONFIG.LOCALSTORAGE_KEYS.METADATA);\r\n    return stored ? JSON.parse(stored) : null;\r\n    \r\n  } catch (error) {\r\n    console.error('Failed to get metadata:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * Beräknar lagringsstorlek och använd kapacitet\r\n * @returns {Promise<Object>} - Lagringsstatistik\r\n */\r\nexport async function getStorageStats() {\r\n  try {\r\n    // localStorage storlek\r\n    let localStorageSize = 0;\r\n    for (const key in localStorage) {\r\n      if (localStorage.hasOwnProperty(key) && key.startsWith('fb_analyzer_')) {\r\n        localStorageSize += localStorage[key].length;\r\n      }\r\n    }\r\n    \r\n    // IndexedDB storlek (approximation)\r\n    const db = await initializeIndexedDB();\r\n    let indexedDBSize = 0;\r\n    let totalRecords = 0;\r\n    \r\n    const transaction = db.transaction([STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA], 'readonly');\r\n    const store = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const request = store.getAll();\r\n      \r\n      request.onsuccess = () => {\r\n        totalRecords = request.result.length;\r\n        \r\n        // Approximera storlek baserat på antal poster\r\n        indexedDBSize = totalRecords * 1024; // ~1KB per post\r\n        \r\n        const totalSize = localStorageSize + indexedDBSize;\r\n        const totalLimit = STORAGE_CONFIG.LIMITS.LOCALSTORAGE_MAX + STORAGE_CONFIG.LIMITS.INDEXEDDB_MAX;\r\n        \r\n        resolve({\r\n          localStorage: {\r\n            used: localStorageSize,\r\n            limit: STORAGE_CONFIG.LIMITS.LOCALSTORAGE_MAX,\r\n            percentage: (localStorageSize / STORAGE_CONFIG.LIMITS.LOCALSTORAGE_MAX) * 100\r\n          },\r\n          indexedDB: {\r\n            used: indexedDBSize,\r\n            records: totalRecords,\r\n            limit: STORAGE_CONFIG.LIMITS.INDEXEDDB_MAX,\r\n            percentage: (indexedDBSize / STORAGE_CONFIG.LIMITS.INDEXEDDB_MAX) * 100\r\n          },\r\n          total: {\r\n            used: totalSize,\r\n            limit: totalLimit,\r\n            percentage: (totalSize / totalLimit) * 100,\r\n            availableSpace: totalLimit - totalSize\r\n          }\r\n        });\r\n      };\r\n      \r\n      request.onerror = () => {\r\n        reject(request.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error getting storage stats:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n/**\r\n * Rensar all lagrad data\r\n * @returns {Promise<boolean>} - True om lyckad\r\n */\r\nexport async function clearAllData() {\r\n  try {\r\n    // Rensa localStorage\r\n    for (const key of Object.values(STORAGE_CONFIG.LOCALSTORAGE_KEYS)) {\r\n      localStorage.removeItem(key);\r\n    }\r\n    \r\n    // Rensa IndexedDB\r\n    const db = await initializeIndexedDB();\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      const transaction = db.transaction([\r\n        STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA,\r\n        STORAGE_CONFIG.INDEXEDDB.STORES.TIMESERIES\r\n      ], 'readwrite');\r\n      \r\n      let cleared = 0;\r\n      const totalStores = 2;\r\n      \r\n      // Rensa monthly data\r\n      const monthlyStore = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.MONTHLY_DATA);\r\n      const clearMonthly = monthlyStore.clear();\r\n      \r\n      clearMonthly.onsuccess = () => {\r\n        cleared++;\r\n        if (cleared === totalStores) {\r\n          console.log('All data cleared successfully');\r\n          resolve(true);\r\n        }\r\n      };\r\n      \r\n      // Rensa timeseries\r\n      const timeseriesStore = transaction.objectStore(STORAGE_CONFIG.INDEXEDDB.STORES.TIMESERIES);\r\n      const clearTimeseries = timeseriesStore.clear();\r\n      \r\n      clearTimeseries.onsuccess = () => {\r\n        cleared++;\r\n        if (cleared === totalStores) {\r\n          console.log('All data cleared successfully');\r\n          resolve(true);\r\n        }\r\n      };\r\n      \r\n      transaction.onerror = () => {\r\n        reject(transaction.error);\r\n      };\r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error clearing data:', error);\r\n    throw error;\r\n  }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './components/ui/card';\r\nimport { Button } from './components/ui/button';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\r\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\r\nimport { UploadCloud, BarChart3, TrendingUp, Calendar, Info, ArrowLeft, Trash2 } from 'lucide-react';\r\nimport TimeseriesUploader from './components/TimeseriesUploader';\r\nimport PageTimeseriesView from './components/PageTimeseriesView';\r\nimport MonthlyComparisonView from './components/MonthlyComparisonView';\r\nimport TrendAnalysisView from './components/TrendAnalysisView';\r\nimport { getAllPeriods, getPeriodData, clearAllData } from './utils/timeseries_storage';\r\n\r\nfunction App() {\r\n  const [hasData, setHasData] = useState(false);\r\n  const [showUploader, setShowUploader] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('upload');\r\n  const [uploadedPeriods, setUploadedPeriods] = useState([]);\r\n  const [loadingExistingData, setLoadingExistingData] = useState(true);\r\n  const [clearingData, setClearingData] = useState(false);\r\n\r\n  // Ladda befintlig data vid app-start\r\n  useEffect(() => {\r\n    loadExistingData();\r\n  }, []);\r\n\r\n  const loadExistingData = async () => {\r\n    try {\r\n      setLoadingExistingData(true);\r\n      console.log('Laddar befintlig data från storage...');\r\n      \r\n      const periods = await getAllPeriods();\r\n      console.log('Hittade perioder i storage:', periods);\r\n      \r\n      if (periods.length > 0) {\r\n        // Konvertera storage-format till uploadedPeriods-format\r\n        const periodsWithData = await Promise.all(\r\n          periods.map(async (period) => {\r\n            const storageData = await getPeriodData(period.year, period.month);\r\n            \r\n            // Konvertera från storage-format till CSV-format som komponenterna förväntar\r\n            const csvFormatData = storageData.map(storageItem => ({\r\n              \"Page\": storageItem.pageName,\r\n              \"Page ID\": storageItem.pageId,\r\n              \"Reach\": storageItem.metrics.reach || 0,\r\n              \"Engaged Users\": storageItem.metrics.engagedUsers || 0,\r\n              \"Engagements\": storageItem.metrics.engagements || 0,\r\n              \"Reactions\": storageItem.metrics.reactions || 0,\r\n              \"Publications\": storageItem.metrics.publications || 0,\r\n              \"Status\": storageItem.metrics.status || 0,\r\n              \"Comment\": storageItem.metrics.comment || 0\r\n            }));\r\n            \r\n            return {\r\n              year: period.year,\r\n              month: period.month,\r\n              data: csvFormatData, // Nu i korrekt CSV-format som komponenterna förväntar sig\r\n              filename: `FB_${period.year}_${String(period.month).padStart(2, '0')}.csv`\r\n            };\r\n          })\r\n        );\r\n        \r\n        console.log('Konverterade periodsWithData:', periodsWithData);\r\n        setUploadedPeriods(periodsWithData);\r\n        setHasData(true);\r\n        setActiveTab('monthly'); // Växla till månadsanalys om data finns\r\n      } else {\r\n        console.log('Ingen befintlig data hittades');\r\n      }\r\n    } catch (error) {\r\n      console.error('Kunde inte ladda befintlig data:', error);\r\n      // Fortsätt ändå - låt användaren ladda upp ny data\r\n    } finally {\r\n      setLoadingExistingData(false);\r\n    }\r\n  };\r\n\r\n  // Handler för när data har laddats upp framgångsrikt\r\n  const handleDataUploaded = async (periodsArray) => {\r\n    console.log('Data uploaded successfully:', periodsArray);\r\n    \r\n    // TimeseriesUploader.jsx returnerar array direkt, inte summary object\r\n    const newPeriods = Array.isArray(periodsArray) ? periodsArray : [];\r\n    \r\n    // Merge med befintliga uploadedPeriods, undvik dubbletter\r\n    const mergedPeriods = [...uploadedPeriods];\r\n    newPeriods.forEach(newPeriod => {\r\n      const exists = mergedPeriods.some(existing => \r\n        existing.year === newPeriod.year && existing.month === newPeriod.month\r\n      );\r\n      if (!exists) {\r\n        mergedPeriods.push(newPeriod);\r\n      } else {\r\n        console.log(`Period ${newPeriod.year}-${newPeriod.month} finns redan, hoppar över dubblett`);\r\n      }\r\n    });\r\n    \r\n    console.log('Merged periods:', mergedPeriods);\r\n    setUploadedPeriods(mergedPeriods);\r\n    setHasData(true);\r\n    setShowUploader(false);\r\n    setActiveTab('monthly'); // Växla till månadsanalys när data finns\r\n  };\r\n\r\n  // Handler för att rensa all data\r\n  const handleClearData = async () => {\r\n    if (!window.confirm('Är du säker på att du vill rensa all data? Detta kan inte ångras.')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setClearingData(true);\r\n      console.log('Rensar all data...');\r\n      \r\n      // 1. Rensa all storage (IndexedDB + localStorage)\r\n      await clearAllData();\r\n      \r\n      // 2. Återställ React state\r\n      setUploadedPeriods([]);\r\n      setHasData(false); \r\n      setActiveTab('upload');\r\n      \r\n      console.log('✅ All data rensad framgångsrikt');\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Fel vid rensning av data:', error);\r\n      alert(`Fel vid rensning av data: ${error.message}`);\r\n    } finally {\r\n      setClearingData(false);\r\n    }\r\n  };\r\n\r\n  // Handler för att avbryta upload och gå tillbaka\r\n  const handleCancelUpload = () => {\r\n    setShowUploader(false);\r\n  };\r\n\r\n  // Om vi fortfarande laddar befintlig data, visa loading\r\n  if (loadingExistingData) {\r\n    return (\r\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <BarChart3 className=\"h-12 w-12 mx-auto mb-4 text-primary animate-pulse\" />\r\n          <h2 className=\"text-xl font-semibold mb-2\">Facebook API data analyser</h2>\r\n          <p className=\"text-muted-foreground\">Laddar befintlig data...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Om uploader visas, visa bara den komponenten\r\n  if (showUploader) {\r\n    return (\r\n      <div className=\"min-h-screen bg-background\">\r\n        <header className=\"border-b border-border\">\r\n          <div className=\"container py-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"facebook-brand flex items-center gap-3\">\r\n                <BarChart3 className=\"h-8 w-8\" />\r\n                <h1 className=\"text-2xl font-bold text-foreground\">\r\n                  Facebook API data analyser\r\n                </h1>\r\n              </div>\r\n              <Button variant=\"outline\" onClick={handleCancelUpload}>\r\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\r\n                Tillbaka\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </header>\r\n\r\n        <main className=\"container py-6\">\r\n          <TimeseriesUploader \r\n            onDataUploaded={handleDataUploaded}\r\n            onCancel={handleCancelUpload}\r\n          />\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-background\">\r\n      <header className=\"border-b border-border\">\r\n        <div className=\"container py-4\">\r\n          <div className=\"facebook-brand flex items-center gap-3\">\r\n            <BarChart3 className=\"h-8 w-8\" />\r\n            <h1 className=\"text-2xl font-bold text-foreground\">\r\n              Facebook API data analyser\r\n            </h1>\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <main className=\"container py-6\">\r\n        <div className=\"space-y-6\">\r\n          {!hasData ? (\r\n            /* Ingen data - visa startsida */\r\n            <div className=\"text-center py-12\">\r\n              <UploadCloud className=\"mx-auto h-24 w-24 text-muted-foreground mb-6\" />\r\n              <h2 className=\"text-3xl font-bold tracking-tight mb-4\">\r\n                Välkommen till Facebook API data analyser\r\n              </h2>\r\n              <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\r\n                Analysera och visualisera dina Facebook-sidor över tid. \r\n                Ladda upp månadsdata för att komma igång med tidserie-analys.\r\n              </p>\r\n              \r\n              <div className=\"grid md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-12\">\r\n                <Card className=\"text-center p-6\">\r\n                  <Calendar className=\"mx-auto h-12 w-12 text-primary mb-4\" />\r\n                  <h3 className=\"font-semibold mb-2\">Månadsanalys</h3>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Jämför prestanda mellan Facebook-sidor för specifika månader\r\n                  </p>\r\n                </Card>\r\n                \r\n                <Card className=\"text-center p-6\">\r\n                  <TrendingUp className=\"mx-auto h-12 w-12 text-primary mb-4\" />\r\n                  <h3 className=\"font-semibold mb-2\">Tidserie-analys</h3>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Följ utvecklingen av enskilda sidor över tid\r\n                  </p>\r\n                </Card>\r\n                \r\n                <Card className=\"text-center p-6\">\r\n                  <BarChart3 className=\"mx-auto h-12 w-12 text-primary mb-4\" />\r\n                  <h3 className=\"font-semibold mb-2\">Trend-upptäckt</h3>\r\n                  <p className=\"text-sm text-muted-foreground\">\r\n                    Upptäck mönster och trender i dina Facebook-data\r\n                  </p>\r\n                </Card>\r\n              </div>\r\n              \r\n              <Button onClick={() => setShowUploader(true)} size=\"lg\">\r\n                <UploadCloud className=\"mr-2 h-5 w-5\" />\r\n                Ladda upp Facebook API data\r\n              </Button>\r\n            </div>\r\n          ) : (\r\n            /* Data finns - visa tab-navigation */\r\n            <div>\r\n              <div className=\"flex items-center justify-between mb-6\">\r\n                <div>\r\n                  <h2 className=\"text-2xl font-bold tracking-tight\">Analysera Facebook-data</h2>\r\n                  <p className=\"text-muted-foreground\">\r\n                    {uploadedPeriods.length} period{uploadedPeriods.length !== 1 ? 'er' : ''} tillgänglig{uploadedPeriods.length !== 1 ? 'a' : ''}\r\n                  </p>\r\n                </div>\r\n                <div className=\"flex gap-2\">\r\n                  <Button variant=\"outline\" onClick={() => setShowUploader(true)}>\r\n                    <UploadCloud className=\"mr-2 h-4 w-4\" />\r\n                    Ladda upp mer data\r\n                  </Button>\r\n                  <Button \r\n                    variant=\"destructive\" \r\n                    onClick={handleClearData}\r\n                    disabled={clearingData}\r\n                  >\r\n                    {clearingData ? (\r\n                      <>\r\n                        <div className=\"mr-2 h-4 w-4 animate-spin rounded-full border-2 border-white border-t-transparent\" />\r\n                        Rensar...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                        Rensa data\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\r\n                <TabsList className=\"grid w-full grid-cols-4\">\r\n                  <TabsTrigger value=\"upload\" className=\"flex items-center gap-2\">\r\n                    <Info className=\"h-4 w-4\" />\r\n                    Info\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"monthly\" className=\"flex items-center gap-2\">\r\n                    <Calendar className=\"h-4 w-4\" />\r\n                    Månadsanalys\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"pages\" className=\"flex items-center gap-2\">\r\n                    <BarChart3 className=\"h-4 w-4\" />\r\n                    Sidor över tid\r\n                  </TabsTrigger>\r\n                  <TabsTrigger value=\"trends\" className=\"flex items-center gap-2\">\r\n                    <TrendingUp className=\"h-4 w-4\" />\r\n                    Trendanalys\r\n                  </TabsTrigger>\r\n                </TabsList>\r\n\r\n                <TabsContent value=\"upload\" className=\"mt-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Info className=\"h-5 w-5\" />\r\n                        Dataöversikt\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <Alert>\r\n                        <Info className=\"h-4 w-4\" />\r\n                        <AlertTitle>Data laddad och redo</AlertTitle>\r\n                        <AlertDescription>\r\n                          Du har {uploadedPeriods.length} period{uploadedPeriods.length !== 1 ? 'er' : ''} av Facebook-data tillgänglig för analys. \r\n                          Använd flikarna ovan för att utforska dina data eller ladda upp mer data.\r\n                        </AlertDescription>\r\n                      </Alert>\r\n\r\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n                        <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n                          <Calendar className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\r\n                          <div className=\"font-bold text-2xl text-blue-900\">{uploadedPeriods.length}</div>\r\n                          <div className=\"text-sm text-blue-700\">Månader data</div>\r\n                        </div>\r\n                        <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n                          <BarChart3 className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\r\n                          <div className=\"font-bold text-2xl text-green-900\">\r\n                            {uploadedPeriods.reduce((total, period) => total + (period.data?.length || 0), 0)}\r\n                          </div>\r\n                          <div className=\"text-sm text-green-700\">Totalt dataposter</div>\r\n                        </div>\r\n                        <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\r\n                          <TrendingUp className=\"w-8 h-8 mx-auto mb-2 text-purple-600\" />\r\n                          <div className=\"font-bold text-2xl text-purple-900\">\r\n                            {[...new Set(uploadedPeriods.flatMap(p => p.data?.map(d => d.Page || d.page) || []))].length}\r\n                          </div>\r\n                          <div className=\"text-sm text-purple-700\">Unika Facebook-sidor</div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <p className=\"text-sm text-muted-foreground\">\r\n                        Data sparas automatiskt i webbläsaren och kommer att finnas kvar när du laddar om sidan.\r\n                      </p>\r\n                      <Button onClick={() => setShowUploader(true)}>\r\n                        <UploadCloud className=\"mr-2 h-4 w-4\" />\r\n                        Ladda upp mer data\r\n                      </Button>\r\n                    </CardContent>\r\n                  </Card>\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"monthly\" className=\"mt-6\">\r\n                  <MonthlyComparisonView uploadedPeriods={uploadedPeriods} />\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"pages\" className=\"mt-6\">\r\n                  <PageTimeseriesView uploadedPeriods={uploadedPeriods} />\r\n                </TabsContent>\r\n\r\n                <TabsContent value=\"trends\" className=\"mt-6\">\r\n                  <TrendAnalysisView uploadedPeriods={uploadedPeriods} />\r\n                </TabsContent>\r\n              </Tabs>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </main>\r\n\r\n      <footer className=\"border-t border-border mt-12\">\r\n        <div className=\"container py-4 text-center text-sm text-muted-foreground\">\r\n          <p>Facebook API data analyser © {new Date().getFullYear()}</p>\r\n          <p className=\"mt-1\">\r\n            Tidserie-baserad analys av månadsstatistik | \r\n            <span className=\"text-facebook-500 font-medium\"> Utvecklad för projektfas 1-8</span>\r\n          </p>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react'\r\nimport ReactDOM from 'react-dom/client'\r\nimport App from './App.jsx'\r\nimport './styles/globals.css'\r\n\r\nReactDOM.createRoot(document.getElementById('root')).render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n)\r\n"],"names":["m","require$$0","client","cn","inputs","twMerge","clsx","Card","React.forwardRef","className","props","ref","jsx","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","falsyToString","value","cx","cva","base","config","_config_compoundVariants","variants","defaultVariants","getVariantClassNames","variant","variantProp","defaultVariantProp","variantKey","propsWithoutUndefined","acc","param","key","getCompoundVariantClassNames","cvClass","cvClassName","compoundVariantOptions","buttonVariants","Button","size","asChild","Comp","Slot","Tabs","TabsPrimitive.Root","TabsList","TabsPrimitive.List","TabsTrigger","TabsPrimitive.Trigger","TabsContent","TabsPrimitive.Content","alertVariants","Alert","AlertTitle","AlertDescription","EXPECTED_COLUMNS","TimeseriesUploader","onDataUploaded","onCancel","files","setFiles","useState","uploading","setUploading","dragActive","setDragActive","validationErrors","setValidationErrors","processingStatus","setProcessingStatus","fileInputRef","useRef","validateFilename","filename","pattern","match","year","month","getMonthName","validateCSVContent","content","resolve","Papa","results","headers","missingColumns","col","handleDrop","e","droppedFiles","csvFiles","file","prev","addFiles","handleFileSelect","selectedFiles","newFiles","validatedFiles","validation","existingNames","f","duplicates","uniqueFiles","removeFile","fileId","processFiles","validFiles","processedPeriods","fileItem","readFileContent","periodData","error","reject","reader","handleDragOver","handleDragLeave","clearErrors","validFilesCount","hasValidFiles","jsxs","Upload","_a","AlertCircle","index","status","FileText","Calendar","Loader2","CheckCircle2","X","Fragment","BarChart3","Table","TableHeader","TableBody","TableRow","TableHead","TableCell","Select","SelectPrimitive.Root","SelectValue","SelectPrimitive.Value","SelectTrigger","children","SelectPrimitive.Trigger","SelectPrimitive.Icon","ChevronDown","SelectContent","position","SelectPrimitive.Portal","SelectPrimitive.Content","SelectPrimitive.Viewport","SelectLabel","SelectPrimitive.Label","SelectItem","SelectPrimitive.Item","SelectPrimitive.ItemIndicator","Check","SelectPrimitive.ItemText","SelectSeparator","SelectPrimitive.Separator","CHANNEL_COLORS","ProfileIcon","pageName","name","backgroundColor","channelText","nameLower","textColor","PAGE_SIZE_OPTIONS","AVAILABLE_METRICS","METRIC_DEFINITIONS","PageTimeseriesView","uploadedPeriods","availablePages","setAvailablePages","selectedPageId","setSelectedPageId","pageTimeseriesData","setPageTimeseriesData","loading","setLoading","setError","pageStats","setPageStats","trendAnalysis","setTrendAnalysis","sortConfig","setSortConfig","currentPage","setCurrentPage","pageSize","setPageSize","selectedMetrics","setSelectedMetrics","useEffect","pagesMap","period","csvRow","pageId","pages","a","b","err","pageData","pageRow","parseNumericValue","selectedPage","sortedData","calculatePageStatistics","p","parsed","data","stats","availableMetricKeys","metric","values","d","v","avg","sum","val","min","max","bestMonth","worstMonth","trends","oldestValue","_b","change","_c","percentChange","useMemo","aValue","bValue","comparison","paginatedData","startIndex","totalPages","handleSort","current","getSortIcon","columnKey","ArrowUpDown","ArrowUp","ArrowDown","handleMetricToggle","metricKey","handleExportCSV","def","csvData","item","csvContent","row","blob","link","url","formatValue","Activity","page","isSelected","trend","definition","TrendingUp","TrendingDown","FileDown","option","ChevronLeft","ChevronRight","MonthlyComparisonView","selectedPeriod","setSelectedPeriod","setPeriodData","periodSummary","setPeriodSummary","firstPeriod","matchingPeriod","convertedData","summary","calculatePeriodSummary","total","periodName","metricData","NON_SUMMABLE_METRICS","SUMMABLE_METRICS","getMetricsByCategory","category","getSummerableMetrics","getNonSummerableMetrics","validateConsistencyWithReachCalculator","errors","warnings","ourSummerable","reachCalcSummerable","missingSummerable","extraSummerable","ourNonSummerable","reachCalcNonSummerable","missingNonSummerable","extraNonSummerable","consistencyCheck","FacebookPage","MonthlyPageData","metrics","rawMetrics","PageTimeseries","monthlyData","TimeseriesDataset","pageKey","timeseries","periodsSet","result","ALLOWED_METRICS","CHART_COLORS","TrendAnalysisView","selectedMetric","setSelectedMetric","selectedPages","setSelectedPages","selectedPeriods","setSelectedPeriods","hoveredDataPoint","setHoveredDataPoint","mousePosition","setMousePosition","showDetailedTrends","setShowDetailedTrends","availablePeriods","getCSVColumnName","getPageColor","selectedPageIds","exportChartAsPNG","svg","chartLines","canvas","ctx","exportWidth","exportHeight","boxY","boxHeight","legendY","legendItemWidth","totalLegendWidth","legendStartX","line","startX","displayName","svgData","svgBlob","URL","svgUrl","img","chartStartY","chartHeight","chartWidth","footerY","selectedPageNames","accountText","maxWidth","words","y","n","testLine","kontoSuffix","handlePageToggle","id","handlePeriodToggle","periodKey","allPeriodsSelected","handleToggleAllPeriods","generateChartData","chartPoints","csvColumnName","rawValue","cleanValue","groupedByPage","point","yAxisRange","padding","createSmoothPath","points","p1","p2","path","i","previous","next","cp1x","cp1y","cp2x","cp2y","beforePrev","handleMouseMove","event","rect","LineChart","percent","yPos","xPos","pathPoints","x","tooltipX","tooltipY","STORAGE_CONFIG","initializeIndexedDB","request","db","monthlyStore","getPeriodData","getAllPeriods","periods","clearAllData","transaction","cleared","totalStores","clearMonthly","clearTimeseries","App","hasData","setHasData","showUploader","setShowUploader","activeTab","setActiveTab","setUploadedPeriods","loadingExistingData","setLoadingExistingData","clearingData","setClearingData","loadExistingData","periodsWithData","csvFormatData","storageItem","handleDataUploaded","periodsArray","newPeriods","mergedPeriods","newPeriod","existing","handleClearData","handleCancelUpload","ArrowLeft","UploadCloud","Trash2","Info","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,3]}