{"version":3,"file":"index-BS-jJUCi.js","sources":["../../node_modules/react-dom/client.js","../../src/lib/utils.js","../../src/components/ui/card.jsx","../../node_modules/class-variance-authority/dist/index.mjs","../../src/components/ui/button.jsx","../../src/components/ui/tabs.jsx","../../src/components/ui/alert.jsx","../../src/components/TimeseriesUploader.jsx","../../src/components/ui/table.jsx","../../src/components/ui/select.jsx","../../src/components/PageTimeseriesView.jsx","../../src/components/MonthlyComparisonView.jsx","../../src/services/reach_calculator.js","../../src/utils/metric_categorizer.js","../../src/services/timeseries_analytics.js","../../src/core/timeseries_models.js","../../src/components/TrendAnalysisView.jsx","../../src/App.jsx","../../src/main.jsx"],"sourcesContent":["'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","import { clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\n/**\n * Kombinerar CSS-klasser och hanterar Tailwind-konflikter\n * @param  {...any} inputs - CSS-klasser att kombinera\n * @returns {string} - Kombinerade CSS-klasser\n */\nexport function cn(...inputs) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Formaterar ett datum enligt svensk standard\n * @param {Date|string} date - Datum att formatera\n * @returns {string} - Formaterat datum\n */\nexport function formatDate(date) {\n  const d = new Date(date)\n  return d.toLocaleDateString('sv-SE', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  })\n}\n\n/**\n * Formaterar ett nummer med tusentalsavgränsare\n * @param {number} number - Nummer att formatera\n * @returns {string} - Formaterat nummer\n */\nexport function formatNumber(number) {\n  return new Intl.NumberFormat('sv-SE').format(number)\n}\n\n/**\n * Validerar en CSV-fil\n * @param {File} file - Filen att validera\n * @returns {boolean} - true om filen är giltig\n */\nexport function isValidCSVFile(file) {\n  return file && (\n    file.type === 'text/csv' ||\n    file.name.toLowerCase().endsWith('.csv')\n  )\n}\n\n/**\n * Genererar en unik ID-sträng\n * @returns {string} - Unik ID\n */\nexport function generateId() {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36)\n}\n\n/**\n * Formaterar månadsnamn för visning\n * @param {number} monthNumber - Månadsnummer (1-12)\n * @returns {string} - Formaterat månadsnamn på svenska\n */\nexport function formatMonthName(monthNumber) {\n  const months = [\n    'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\n    'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\n  ]\n  return months[monthNumber - 1] || 'Okänd månad'\n}\n\n/**\n * Formaterar period för visning (år och månad)\n * @param {number} year - År\n * @param {number} month - Månad (1-12)\n * @returns {string} - Formaterad period\n */\nexport function formatPeriod(year, month) {\n  return `${formatMonthName(month)} ${year}`\n}","import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\n/**\n * Huvudkomponent för Card\n */\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\n/**\n * Header för Card\n */\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\n/**\n * Titel för Card\n */\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\n/**\n * Beskrivning för Card\n */\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\n/**\n * Innehållssektion för Card\n */\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\n/**\n * Footer för Card\n */\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","/**\n * Copyright 2022 Joe Bell. All rights reserved.\n *\n * This file is licensed to you under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with the\n * License. You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR REPRESENTATIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */ import { clsx } from \"clsx\";\nconst falsyToString = (value)=>typeof value === \"boolean\" ? `${value}` : value === 0 ? \"0\" : value;\nexport const cx = clsx;\nexport const cva = (base, config)=>(props)=>{\n        var _config_compoundVariants;\n        if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n        const { variants, defaultVariants } = config;\n        const getVariantClassNames = Object.keys(variants).map((variant)=>{\n            const variantProp = props === null || props === void 0 ? void 0 : props[variant];\n            const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];\n            if (variantProp === null) return null;\n            const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);\n            return variants[variant][variantKey];\n        });\n        const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param)=>{\n            let [key, value] = param;\n            if (value === undefined) {\n                return acc;\n            }\n            acc[key] = value;\n            return acc;\n        }, {});\n        const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param)=>{\n            let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param;\n            return Object.entries(compoundVariantOptions).every((param)=>{\n                let [key, value] = param;\n                return Array.isArray(value) ? value.includes({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                }[key]) : ({\n                    ...defaultVariants,\n                    ...propsWithoutUndefined\n                })[key] === value;\n            }) ? [\n                ...acc,\n                cvClass,\n                cvClassName\n            ] : acc;\n        }, []);\n        return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);\n    };\n\n","import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"underline-offset-4 hover:underline text-primary\",\n        facebook: \"bg-facebook-500 text-white hover:bg-facebook-600\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n  return (\n    <Comp\n      className={cn(buttonVariants({ variant, size, className }))}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }","import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }","import * as React from \"react\"\nimport { cva } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\n// Variant-definitioner för olika alert-typer\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n        success: \"border-green-500/50 text-green-600 dark:text-green-400 [&>svg]:text-green-600\",\n        info: \"border-facebook-300/50 text-facebook-600 dark:text-facebook-400 [&>svg]:text-facebook-600\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\n/**\n * Alert-komponent för att visa viktiga meddelanden\n * @param {Object} props - Komponentens properties\n * @param {string} [props.variant] - Variant av alert (default, destructive, success, info)\n * @param {React.ReactNode} props.children - Innehåll att visa i alerten\n * @param {string} [props.className] - Extra CSS-klasser\n */\nconst Alert = React.forwardRef(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\n/**\n * Titel-komponent för Alert\n */\nconst AlertTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\n/**\n * Beskrivnings-komponent för Alert\n */\nconst AlertDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }","import React, { useState, useRef } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\nimport { \n  Upload, \n  FileText, \n  CheckCircle2, \n  AlertCircle, \n  X, \n  Calendar,\n  BarChart3,\n  Loader2\n} from 'lucide-react';\nimport Papa from 'papaparse';\n\n// Förväntade kolumner för Facebook API CSV-filer\nconst EXPECTED_COLUMNS = [\n  'Page', 'Page ID', 'Reach', 'Engaged Users', 'Engagements', \n  'Reactions', 'Publications', 'Status', 'Comment'\n];\n\nfunction TimeseriesUploader({ onDataUploaded, onCancel }) {\n  const [files, setFiles] = useState([]);\n  const [uploading, setUploading] = useState(false);\n  const [dragActive, setDragActive] = useState(false);\n  const [validationErrors, setValidationErrors] = useState([]);\n  const [processingStatus, setProcessingStatus] = useState({});\n  const fileInputRef = useRef(null);\n\n  // Validera filnamn enligt FB_YYYY_MM.csv format\n  const validateFilename = (filename) => {\n    const pattern = /^FB_(\\d{4})_(\\d{2})\\.csv$/;\n    const match = filename.match(pattern);\n    \n    if (!match) {\n      return { \n        isValid: false, \n        error: 'Felaktigt filnamnsformat. Förväntat: FB_YYYY_MM.csv (t.ex. FB_2025_08.csv)' \n      };\n    }\n\n    const year = parseInt(match[1]);\n    const month = parseInt(match[2]);\n\n    if (month < 1 || month > 12) {\n      return { \n        isValid: false, \n        error: 'Ogiltig månad. Måste vara mellan 01-12.' \n      };\n    }\n\n    if (year < 2020 || year > 2030) {\n      return { \n        isValid: false, \n        error: 'Ogiltigt år. Måste vara mellan 2020-2030.' \n      };\n    }\n\n    return { \n      isValid: true, \n      year, \n      month,\n      displayName: `${getMonthName(month)} ${year}`\n    };\n  };\n\n  // Hjälpfunktion för månadsnamn på svenska\n  const getMonthName = (month) => {\n    const months = [\n      'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\n      'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\n    ];\n    return months[month - 1];\n  };\n\n  // Validera CSV-innehåll\n  const validateCSVContent = (content, filename) => {\n    return new Promise((resolve) => {\n      Papa.parse(content, {\n        header: true,\n        skipEmptyLines: true,\n        complete: (results) => {\n          if (results.errors.length > 0) {\n            resolve({\n              isValid: false,\n              error: `CSV-parsningsfel: ${results.errors[0].message}`,\n              data: null\n            });\n            return;\n          }\n\n          // Kontrollera kolumner\n          const headers = results.meta.fields || [];\n          const missingColumns = EXPECTED_COLUMNS.filter(col => !headers.includes(col));\n          \n          if (missingColumns.length > 0) {\n            resolve({\n              isValid: false,\n              error: `Saknade kolumner: ${missingColumns.join(', ')}`,\n              data: null\n            });\n            return;\n          }\n\n          // Kontrollera att det finns data\n          if (results.data.length === 0) {\n            resolve({\n              isValid: false,\n              error: 'CSV-filen innehåller ingen data',\n              data: null\n            });\n            return;\n          }\n\n          resolve({\n            isValid: true,\n            data: results.data,\n            pageCount: results.data.length,\n            error: null\n          });\n        }\n      });\n    });\n  };\n\n  // Hantera fil-drop\n  const handleDrop = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const droppedFiles = Array.from(e.dataTransfer.files);\n    const csvFiles = droppedFiles.filter(file => \n      file.name.toLowerCase().endsWith('.csv')\n    );\n    \n    if (csvFiles.length !== droppedFiles.length) {\n      setValidationErrors(prev => [...prev, 'Endast CSV-filer är tillåtna']);\n    }\n    \n    if (csvFiles.length > 0) {\n      addFiles(csvFiles);\n    }\n  };\n\n  // Hantera fil-val\n  const handleFileSelect = (e) => {\n    const selectedFiles = Array.from(e.target.files);\n    addFiles(selectedFiles);\n  };\n\n  // Lägg till filer i listan\n  const addFiles = (newFiles) => {\n    const validatedFiles = newFiles.map(file => {\n      const validation = validateFilename(file.name);\n      return {\n        file,\n        id: Math.random().toString(36),\n        name: file.name,\n        size: file.size,\n        validation,\n        status: validation.isValid ? 'pending' : 'error'\n      };\n    });\n\n    // Kontrollera dubletter\n    const existingNames = files.map(f => f.name);\n    const duplicates = validatedFiles.filter(f => existingNames.includes(f.name));\n    \n    if (duplicates.length > 0) {\n      setValidationErrors(prev => [\n        ...prev, \n        `Följande filer är redan valda: ${duplicates.map(d => d.name).join(', ')}`\n      ]);\n    }\n\n    const uniqueFiles = validatedFiles.filter(f => !existingNames.includes(f.name));\n    setFiles(prev => [...prev, ...uniqueFiles]);\n  };\n\n  // Ta bort fil från listan\n  const removeFile = (fileId) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n\n  // Behandla alla filer\n  const processFiles = async () => {\n    setUploading(true);\n    setValidationErrors([]);\n    setProcessingStatus({});\n\n    const validFiles = files.filter(f => f.validation.isValid);\n    const processedPeriods = [];\n\n    for (const fileItem of validFiles) {\n      setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'processing' }));\n\n      try {\n        // Läs filinnehåll\n        const content = await readFileContent(fileItem.file);\n        \n        // Validera CSV-innehåll\n        const validation = await validateCSVContent(content, fileItem.name);\n        \n        if (!validation.isValid) {\n          setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'error' }));\n          setValidationErrors(prev => [...prev, `${fileItem.name}: ${validation.error}`]);\n          continue;\n        }\n\n        // Lägg till period-info\n        const periodData = {\n          ...fileItem.validation,\n          data: validation.data,\n          pageCount: validation.pageCount,\n          filename: fileItem.name\n        };\n\n        processedPeriods.push(periodData);\n        setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'success' }));\n\n        // Simulera bearbetning (ta bort i produktion)\n        await new Promise(resolve => setTimeout(resolve, 500));\n\n      } catch (error) {\n        setProcessingStatus(prev => ({ ...prev, [fileItem.id]: 'error' }));\n        setValidationErrors(prev => [...prev, `${fileItem.name}: ${error.message}`]);\n      }\n    }\n\n    setUploading(false);\n\n    // Om någon fil behandlades framgångsrikt, rapportera tillbaka\n    if (processedPeriods.length > 0) {\n      onDataUploaded(processedPeriods);\n    }\n  };\n\n  // Läs fil-innehåll\n  const readFileContent = (file) => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target.result);\n      reader.onerror = () => reject(new Error('Kunde inte läsa fil'));\n      reader.readAsText(file);\n    });\n  };\n\n  // Hantera drag events\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n  };\n\n  // Rensa fel\n  const clearErrors = () => {\n    setValidationErrors([]);\n  };\n\n  // Räkna giltiga filer\n  const validFilesCount = files.filter(f => f.validation.isValid).length;\n  const hasValidFiles = validFilesCount > 0;\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Upload className=\"h-5 w-5 text-facebook-500\" />\n            Ladda upp Facebook CSV-filer\n          </CardTitle>\n          <p className=\"text-sm text-muted-foreground\">\n            Släpp dina FB_YYYY_MM.csv filer här eller klicka för att välja filer\n          </p>\n        </CardHeader>\n        <CardContent>\n          {/* Drop Zone */}\n          <div\n            className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${\n              dragActive \n                ? 'border-facebook-400 bg-facebook-50' \n                : 'border-gray-300 hover:border-facebook-400 hover:bg-facebook-50'\n            }`}\n            onDrop={handleDrop}\n            onDragOver={handleDragOver}\n            onDragLeave={handleDragLeave}\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileSelect}\n              multiple\n              accept=\".csv\"\n              className=\"hidden\"\n            />\n            \n            <Upload className=\"h-12 w-12 mx-auto mb-4 text-facebook-400\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {dragActive ? 'Släpp filerna här' : 'Ladda upp CSV-filer'}\n            </h3>\n            <p className=\"text-muted-foreground mb-4\">\n              Släpp dina FB_YYYY_MM.csv filer här eller klicka för att välja\n            </p>\n            \n            <div className=\"text-xs text-muted-foreground space-y-1\">\n              <p><strong>Format:</strong> FB_YYYY_MM.csv (t.ex. FB_2025_08.csv)</p>\n              <p><strong>Kolumner:</strong> {EXPECTED_COLUMNS.join(', ')}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Fel-meddelanden */}\n      {validationErrors.length > 0 && (\n        <Alert variant=\"destructive\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Valideringsfel</AlertTitle>\n          <AlertDescription>\n            <ul className=\"list-disc list-inside space-y-1\">\n              {validationErrors.map((error, index) => (\n                <li key={index}>{error}</li>\n              ))}\n            </ul>\n            <Button variant=\"outline\" size=\"sm\" onClick={clearErrors} className=\"mt-2\">\n              Rensa fel\n            </Button>\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Fil-lista */}\n      {files.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Valda filer ({files.length})</span>\n              <div className=\"text-sm text-muted-foreground\">\n                {validFilesCount} giltiga filer\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {files.map((fileItem) => {\n                const status = processingStatus[fileItem.id] || fileItem.status;\n                \n                return (\n                  <div\n                    key={fileItem.id}\n                    className={`flex items-center justify-between p-3 rounded-lg border ${\n                      fileItem.validation.isValid \n                        ? 'border-green-200 bg-green-50' \n                        : 'border-red-200 bg-red-50'\n                    }`}\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      <FileText className=\"h-4 w-4\" />\n                      <div>\n                        <div className=\"font-medium\">{fileItem.name}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {fileItem.validation.isValid ? (\n                            <span className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {fileItem.validation.displayName}\n                            </span>\n                          ) : (\n                            <span className=\"text-red-600\">{fileItem.validation.error}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2\">\n                      {status === 'processing' && (\n                        <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n                      )}\n                      {status === 'success' && (\n                        <CheckCircle2 className=\"h-4 w-4 text-green-500\" />\n                      )}\n                      {status === 'error' && (\n                        <AlertCircle className=\"h-4 w-4 text-red-500\" />\n                      )}\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeFile(fileItem.id)}\n                        disabled={uploading}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Kontroll-knappar */}\n      <div className=\"flex justify-between\">\n        <Button variant=\"outline\" onClick={onCancel} disabled={uploading}>\n          Avbryt\n        </Button>\n        \n        <div className=\"flex gap-2\">\n          {files.length > 0 && (\n            <Button \n              variant=\"outline\" \n              onClick={() => setFiles([])}\n              disabled={uploading}\n            >\n              Rensa alla\n            </Button>\n          )}\n          \n          <Button\n            onClick={processFiles}\n            disabled={!hasValidFiles || uploading}\n            className=\"min-w-[120px]\"\n          >\n            {uploading ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Bearbetar...\n              </>\n            ) : (\n              <>\n                <BarChart3 className=\"mr-2 h-4 w-4\" />\n                Analysera data ({validFilesCount})\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default TimeseriesUploader;","import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableRow = React.forwardRef(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell\n}","import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectContent = React.forwardRef(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 min-w-[8rem] overflow-hidden rounded-md border bg-white text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1 max-h-[300px] overflow-y-auto\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n}","import React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\nimport { \n  ArrowUpDown, \n  ArrowUp, \n  ArrowDown,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  Calendar,\n  FileDown,\n  FileSpreadsheet,\n  AlertCircle,\n  ChevronLeft,\n  ChevronRight,\n  Activity,\n  Target\n} from 'lucide-react';\n\n// Sveriges Radio kanal-färger (från original)\nconst CHANNEL_COLORS = {\n  'P1': '#0066cc', // Blå\n  'P2': '#ff6600', // Orange\n  'P3': '#00cc66', // Grön\n  'P4': '#cc33cc', // Magenta/Lila\n  'EKOT': '#005eb8', // Mörk blå (Ekot/Radio Sweden)\n  'RADIOSPORTEN': '#1c5c35', // Mörk grön (Radiosporten)\n  'SR': '#000000',  // Svart för Sveriges Radio\n  'default': '#000000' // Svart som fallback\n};\n\n// ProfileIcon-komponent för Sveriges Radio kanaler (KORRIGERAD)\nconst ProfileIcon = ({ pageName }) => {\n  // Extrahera namn från sidnamnet\n  const name = pageName || 'Okänd';\n  \n  // Bestäm färg och kanal-text baserat på kanalnamn i sidnamnet\n  let backgroundColor = CHANNEL_COLORS.default;\n  let channelText = '';\n  \n  // Kontrollera om sidnamnet innehåller något av kanalnamnen\n  const nameLower = name.toLowerCase();\n  \n  if (nameLower.includes('ekot') || nameLower.includes('radio sweden')) {\n    backgroundColor = CHANNEL_COLORS.EKOT;\n    channelText = 'E';\n  } else if (nameLower.includes('radiosporten') || nameLower.includes('radio sporten')) {\n    backgroundColor = CHANNEL_COLORS.RADIOSPORTEN;\n    channelText = 'RS';\n  } else if (nameLower.includes('p1')) {\n    backgroundColor = CHANNEL_COLORS.P1;\n    channelText = 'P1';\n  } else if (nameLower.includes('p2')) {\n    backgroundColor = CHANNEL_COLORS.P2;\n    channelText = 'P2';\n  } else if (nameLower.includes('p3')) {\n    backgroundColor = CHANNEL_COLORS.P3;\n    channelText = 'P3';\n  } else if (nameLower.includes('p4')) {\n    backgroundColor = CHANNEL_COLORS.P4;\n    channelText = 'P4';\n  } else if (nameLower.includes('sveriges radio') && !nameLower.includes('p1') && \n            !nameLower.includes('p2') && !nameLower.includes('p3') && !nameLower.includes('p4')) {\n    // Sveriges Radio, men inte specifik kanal\n    backgroundColor = CHANNEL_COLORS.SR;\n    channelText = 'SR';\n  } else {\n    // Fallback: använd första bokstaven om ingen kanal hittas\n    channelText = name.charAt(0).toUpperCase();\n  }\n  \n  // Bestäm textfärg baserat på bakgrundsfärgen (vit text på mörka bakgrunder)\n  const isLightBackground = backgroundColor === CHANNEL_COLORS.P2 || backgroundColor === CHANNEL_COLORS.P3;\n  const textColor = isLightBackground ? 'text-black' : 'text-white';\n  \n  return (\n    <div \n      className={`flex-shrink-0 w-6 h-6 rounded-sm flex items-center justify-center text-xs font-bold ${textColor}`}\n      style={{ backgroundColor }}\n      title={pageName}\n    >\n      {channelText}\n    </div>\n  );\n};\n\n// Sidstorlekar för paginering\nconst PAGE_SIZE_OPTIONS = [\n  { value: 6, label: '6 per sida' },\n  { value: 12, label: '12 per sida' },\n  { value: 24, label: '24 per sida' }\n];\n\n// KORRIGERAT: Tillgängliga metrics (utan Engaged Users + rätt svenska namn)\nconst AVAILABLE_METRICS = [\n  { key: 'reach', label: 'Räckvidd', canSum: false },\n  { key: 'engagements', label: 'Engagemang', canSum: true },\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\n  { key: 'publications', label: 'Publiceringar', canSum: true },\n  { key: 'status', label: 'Status', canSum: true },\n  { key: 'comment', label: 'Kommentarer', canSum: true }\n];\n\n// Metric-definitioner (korrigerade)\nconst METRIC_DEFINITIONS = {\n  reach: { displayName: 'Räckvidd', canSumAcrossPages: false, category: 'unique_persons' },\n  engagements: { displayName: 'Engagemang', canSumAcrossPages: true, category: 'countable' },\n  reactions: { displayName: 'Reaktioner', canSumAcrossPages: true, category: 'countable' },\n  publications: { displayName: 'Publiceringar', canSumAcrossPages: true, category: 'countable' },\n  status: { displayName: 'Status', canSumAcrossPages: true, category: 'countable' },\n  comment: { displayName: 'Kommentarer', canSumAcrossPages: true, category: 'countable' }\n};\n\nfunction PageTimeseriesView({ uploadedPeriods = [] }) {\n  // State management\n  const [availablePages, setAvailablePages] = useState([]);\n  const [selectedPageId, setSelectedPageId] = useState('');\n  const [pageTimeseriesData, setPageTimeseriesData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  \n  // Analys-state\n  const [pageStats, setPageStats] = useState(null);\n  const [trendAnalysis, setTrendAnalysis] = useState({});\n  \n  // Tabell-state\n  const [sortConfig, setSortConfig] = useState({ key: 'year_month', direction: 'desc' });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(12);\n  const [selectedMetrics, setSelectedMetrics] = useState(['reach', 'engagements', 'publications']);\n\n  // Ladda tillgängliga sidor vid montering\n  useEffect(() => {\n    const loadPages = () => {\n      try {\n        setLoading(true);\n        \n        if (uploadedPeriods.length === 0) {\n          setAvailablePages([]);\n          setLoading(false);\n          return;\n        }\n        \n        // Samla alla unika sidor från alla perioder\n        const pagesMap = new Map();\n        \n        uploadedPeriods.forEach(period => {\n          if (period.data && Array.isArray(period.data)) {\n            period.data.forEach(csvRow => {\n              const pageName = csvRow.Page || csvRow.page || 'Okänd sida';\n              const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${pageName.replace(/\\s+/g, '_')}`;\n              \n              if (!pagesMap.has(pageId)) {\n                pagesMap.set(pageId, {\n                  pageId,\n                  pageName\n                });\n              }\n            });\n          }\n        });\n        \n        const pages = Array.from(pagesMap.values()).sort((a, b) => \n          a.pageName.localeCompare(b.pageName)\n        );\n        \n        setAvailablePages(pages);\n        \n        // Sätt första sidan som default\n        if (pages.length > 0) {\n          setSelectedPageId(pages[0].pageId);\n        }\n        \n      } catch (err) {\n        console.error('Error loading pages:', err);\n        setError('Kunde inte ladda tillgängliga Facebook-sidor');\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadPages();\n  }, [uploadedPeriods]);\n\n  // Ladda data när vald sida ändras\n  useEffect(() => {\n    if (!selectedPageId || uploadedPeriods.length === 0) return;\n    \n    const loadPageData = () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Samla all data för vald sida från alla perioder\n        const pageData = [];\n        \n        uploadedPeriods.forEach(period => {\n          if (period.data && Array.isArray(period.data)) {\n            const pageRow = period.data.find(csvRow => {\n              const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${(csvRow.Page || csvRow.page || '').replace(/\\s+/g, '_')}`;\n              return pageId === selectedPageId;\n            });\n            \n            if (pageRow) {\n              pageData.push({\n                year: period.year,\n                month: period.month,\n                pageName: pageRow.Page || pageRow.page || 'Okänd sida',\n                pageId: selectedPageId,\n                metrics: {\n                  reach: parseNumericValue(pageRow.Reach || pageRow.reach),\n                  engagements: parseNumericValue(pageRow.Engagements || pageRow.engagements),\n                  reactions: parseNumericValue(pageRow.Reactions || pageRow.reactions),\n                  publications: parseNumericValue(pageRow.Publications || pageRow.publications),\n                  status: parseNumericValue(pageRow.Status || pageRow.status),\n                  comment: parseNumericValue(pageRow.Comment || pageRow.comment)\n                }\n              });\n            }\n          }\n        });\n        \n        if (pageData.length === 0) {\n          const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\n          setError(`Ingen tidserie-data hittades för ${selectedPage?.pageName || 'vald sida'}`);\n          return;\n        }\n        \n        // Sortera data kronologiskt (senaste först som default)\n        const sortedData = pageData.sort((a, b) => {\n          if (a.year !== b.year) return b.year - a.year;\n          return b.month - a.month;\n        });\n        \n        setPageTimeseriesData(sortedData);\n        \n        // Beräkna statistik för sidan\n        calculatePageStatistics(sortedData);\n        \n      } catch (err) {\n        console.error('Error loading page timeseries:', err);\n        const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\n        setError(`Kunde inte ladda data för ${selectedPage?.pageName || 'vald sida'}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadPageData();\n  }, [selectedPageId, uploadedPeriods, availablePages]);\n\n  // Parse numeriskt värde säkert\n  const parseNumericValue = (value) => {\n    if (value === null || value === undefined || value === '') return 0;\n    const parsed = parseFloat(String(value).replace(/[,\\s]/g, ''));\n    return isNaN(parsed) ? 0 : parsed;\n  };\n\n// DEL_1_SLUTAR_HÄR - Fortsätt med del 2 som börjar med calculatePageStatistics\n// DEL_2_BÖRJAR_HÄR - Fortsättning från del 1 med calculatePageStatistics\n\n  // Beräkna statistik för sidan (KORRIGERAT)\n  const calculatePageStatistics = (data) => {\n    if (data.length === 0) return;\n    \n    const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\n    \n    const stats = {\n      pageName: selectedPage?.pageName || data[0]?.pageName || 'Okänd sida',\n      totalPeriods: data.length,\n      firstPeriod: data[data.length - 1], // Äldsta (slutet av sorterad array)\n      lastPeriod: data[0], // Senaste (början av sorterad array)\n      metrics: {}\n    };\n    \n    // KORRIGERAT: Beräkna statistik för varje metric (utan status & comment)\n    const availableMetricKeys = ['reach', 'engagements', 'reactions', 'publications'];\n    for (const metric of availableMetricKeys) {\n      const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\n      \n      if (values.length > 0) {\n        const avg = values.reduce((sum, val) => sum + val, 0) / values.length;\n        const min = Math.min(...values);\n        const max = Math.max(...values);\n        \n        // Hitta bästa och sämsta månader\n        const bestMonth = data.find(d => d.metrics[metric] === max);\n        const worstMonth = data.find(d => d.metrics[metric] === min);\n        \n        stats.metrics[metric] = {\n          average: Math.round(avg),\n          min,\n          max,\n          bestMonth: bestMonth ? { year: bestMonth.year, month: bestMonth.month, value: max } : null,\n          worstMonth: worstMonth ? { year: worstMonth.year, month: worstMonth.month, value: min } : null\n        };\n      }\n    }\n    \n    setPageStats(stats);\n    \n    // Beräkna trend-analys för valda metrics\n    const trends = {};\n    for (const metric of selectedMetrics) {\n      if (data.length >= 2) {\n        // Förenklad trend-beräkning (första vs senaste)\n        const oldestValue = data[data.length - 1]?.metrics[metric] || 0;\n        const latestValue = data[0]?.metrics[metric] || 0;\n        \n        const change = latestValue - oldestValue;\n        const percentChange = oldestValue > 0 ? ((change / oldestValue) * 100) : 0;\n        \n        trends[metric] = {\n          change,\n          percentChange: Math.round(percentChange * 10) / 10,\n          trend: change > 0 ? 'up' : change < 0 ? 'down' : 'stable'\n        };\n      }\n    }\n    \n    setTrendAnalysis(trends);\n  };\n\n  // Hjälpfunktion för månadsnamn\n  const getMonthName = (month) => {\n    const months = [\n      'Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun',\n      'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'\n    ];\n    return months[month - 1];\n  };\n\n  // Sortera data\n  const sortedData = useMemo(() => {\n    if (!pageTimeseriesData.length) return [];\n    \n    return [...pageTimeseriesData].sort((a, b) => {\n      let aValue, bValue;\n      \n      if (sortConfig.key === 'year_month') {\n        aValue = a.year * 100 + a.month;\n        bValue = b.year * 100 + b.month;\n      } else {\n        aValue = a.metrics[sortConfig.key] || 0;\n        bValue = b.metrics[sortConfig.key] || 0;\n      }\n      \n      const comparison = aValue - bValue;\n      return sortConfig.direction === 'asc' ? comparison : -comparison;\n    });\n  }, [pageTimeseriesData, sortConfig]);\n\n  // Paginering\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return sortedData.slice(startIndex, startIndex + pageSize);\n  }, [sortedData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(sortedData.length / pageSize);\n\n  // Hantera sortering\n  const handleSort = (key) => {\n    setSortConfig(current => ({\n      key,\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  // Få sorterings-ikon\n  const getSortIcon = (columnKey) => {\n    if (sortConfig.key !== columnKey) {\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\n    }\n    return sortConfig.direction === 'asc' ? \n      <ArrowUp className=\"h-4 w-4 ml-1\" /> : \n      <ArrowDown className=\"h-4 w-4 ml-1\" />;\n  };\n\n  // KORRIGERAT: Hantera metric-val med checkboxar\n  const handleMetricToggle = (metricKey) => {\n    setSelectedMetrics(current => \n      current.includes(metricKey) \n        ? current.filter(m => m !== metricKey)\n        : [...current, metricKey]\n    );\n  };\n\n  // Export till CSV\n  const handleExportCSV = () => {\n    const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\n    const headers = ['År', 'Månad', 'Period', ...selectedMetrics.map(m => {\n      const def = METRIC_DEFINITIONS[m];\n      return def ? def.displayName : m;\n    })];\n    \n    const csvData = sortedData.map(item => [\n      item.year,\n      item.month,\n      `${getMonthName(item.month)} ${item.year}`,\n      ...selectedMetrics.map(m => item.metrics[m] || 0)\n    ]);\n    \n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => row.join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `${selectedPage?.pageName.replace(/[^a-zA-Z0-9]/g, '_')}_tidsserie.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Formatera numeriska värden\n  const formatValue = (value) => {\n    if (value === null || value === undefined || isNaN(value)) return '-';\n    return new Intl.NumberFormat('sv-SE').format(value);\n  };\n\n  // Hitta bästa och sämsta värden för prestanda-highlighting\n  const getPerformanceClass = (metric, value, data) => {\n    if (!data || data.length < 2 || value === null || value === undefined) return '';\n    \n    const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\n    if (values.length < 2) return '';\n    \n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    \n    if (value === max && max !== min) return 'bg-green-100 text-green-800 font-medium';\n    if (value === min && max !== min) return 'bg-red-100 text-red-800 font-medium';\n    return '';\n  };\n\n  if (loading) {\n    return (\n      <Alert>\n        <Activity className=\"h-4 w-4\" />\n        <AlertTitle>Laddar data</AlertTitle>\n        <AlertDescription>\n          Analyserar tidserie-data för Facebook-sidor...\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Fel</AlertTitle>\n        <AlertDescription>\n          {error}\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (availablePages.length === 0) {\n    return (\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Inga sidor hittades</AlertTitle>\n        <AlertDescription>\n          Kunde inte hitta några Facebook-sidor i den uppladdade datan.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  const selectedPage = availablePages.find(p => p.pageId === selectedPageId);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Sida-väljare och kontroller */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5 text-facebook-500\" />\n            Sidanalys över tid\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Välj Facebook-sida</label>\n              <Select \n                value={selectedPageId}\n                onValueChange={setSelectedPageId}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Välj sida att analysera\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {availablePages.map(page => (\n                    <SelectItem key={page.pageId} value={page.pageId}>\n                      <div className=\"flex items-center gap-2\">\n                        <ProfileIcon pageName={page.pageName} />\n                        <span>{page.pageName}</span>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedPage && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  ID: {selectedPage.pageId}\n                </p>\n              )}\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Metrics att visa</label>\n              {/* KORRIGERAT: Checkboxar istället för knappar */}\n              <div className=\"flex flex-wrap gap-3\">\n                {AVAILABLE_METRICS.map(metric => {\n                  const isSelected = selectedMetrics.includes(metric.key);\n                  \n                  return (\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => handleMetricToggle(metric.key)}\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\n                      />\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\n                      {!metric.canSum && (\n                        <span className=\"text-xs text-orange-600 font-medium\">*</span>\n                      )}\n                    </label>\n                  );\n                })}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                * = Kan inte summeras över månader (unika personer)\n              </p>\n            </div>\n          </div>\n\n          {/* Statistik-sammanfattning */}\n          {pageStats && (\n            <div className=\"grid md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/30 rounded-lg\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-facebook-600 flex items-center justify-center gap-2\">\n                  <ProfileIcon pageName={pageStats.pageName} />\n                  {pageStats.totalPeriods}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Månader data</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold\">\n                  {getMonthName(pageStats.firstPeriod.month)} {pageStats.firstPeriod.year}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Första månad</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold\">\n                  {getMonthName(pageStats.lastPeriod.month)} {pageStats.lastPeriod.year}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Senaste månad</div>\n              </div>\n\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-facebook-600\">\n                  {selectedPage?.pageName || 'Okänd sida'}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Vald sida</div>\n              </div>\n            </div>\n          )}\n\n          {/* Trend-indikatorer för valda metrics */}\n          {Object.keys(trendAnalysis).length > 0 && (\n            <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n              {selectedMetrics.slice(0, 3).map(metric => {\n                const trend = trendAnalysis[metric];\n                const definition = METRIC_DEFINITIONS[metric];\n                \n                if (!trend || !definition) return null;\n                \n                return (\n                  <div key={metric} className=\"flex items-center gap-3 p-3 bg-white border rounded-lg\">\n                    {trend.trend === 'up' && <TrendingUp className=\"h-5 w-5 text-green-600\" />}\n                    {trend.trend === 'down' && <TrendingDown className=\"h-5 w-5 text-red-600\" />}\n                    {trend.trend === 'stable' && <Activity className=\"h-5 w-5 text-gray-500\" />}\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"font-medium text-sm\">{definition.displayName}</div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {trend.percentChange > 0 ? '+' : ''}{trend.percentChange}% sedan första månad\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Tidserie-tabell */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5\" />\n            Månadsvis utveckling - {selectedPage?.pageName || 'Okänd sida'}\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button onClick={handleExportCSV} variant=\"outline\" size=\"sm\">\n              <FileDown className=\"h-4 w-4 mr-2\" />\n              CSV\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {pageTimeseriesData.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              Ingen tidserie-data tillgänglig för vald sida\n            </p>\n          ) : (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead \n                      className=\"cursor-pointer select-none\"\n                      onClick={() => handleSort('year_month')}\n                    >\n                      <div className=\"flex items-center\">\n                        Period\n                        {getSortIcon('year_month')}\n                      </div>\n                    </TableHead>\n                    {selectedMetrics.map(metric => {\n                      const definition = METRIC_DEFINITIONS[metric];\n                      return (\n                        <TableHead \n                          key={metric}\n                          className=\"text-right cursor-pointer select-none\"\n                          onClick={() => handleSort(metric)}\n                        >\n                          <div className=\"flex items-center justify-end\">\n                            {definition?.displayName || metric}\n                            {getSortIcon(metric)}\n                            {!definition?.canSumAcrossPages && (\n                              <span className=\"ml-1 text-orange-600\">*</span>\n                            )}\n                          </div>\n                        </TableHead>\n                      );\n                    })}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedData.map((item, index) => (\n                    <TableRow key={`${item.year}_${item.month}`}>\n                      <TableCell className=\"font-medium\">\n                        {getMonthName(item.month)} {item.year}\n                      </TableCell>\n                      {selectedMetrics.map(metric => (\n                        <TableCell \n                          key={metric}\n                          className=\"text-right\"\n                        >\n                          <div className=\"flex items-center justify-end gap-1\">\n                            {formatValue(item.metrics[metric])}\n                            {pageStats?.metrics[metric]?.bestMonth && \n                             pageStats.metrics[metric].bestMonth.year === item.year &&\n                             pageStats.metrics[metric].bestMonth.month === item.month && (\n                              <span className=\"text-yellow-600\" title=\"Bästa värde för denna sida\">🏆</span>\n                            )}\n                            {pageStats?.metrics[metric]?.worstMonth && \n                             pageStats.metrics[metric].worstMonth.year === item.year &&\n                             pageStats.metrics[metric].worstMonth.month === item.month && (\n                              <span className=\"text-gray-500\" title=\"Sämsta värde för denna sida\">📉</span>\n                            )}\n                          </div>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Paginering */}\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Visa:</span>\n                  <Select\n                    value={pageSize.toString()}\n                    onValueChange={(value) => {\n                      setPageSize(Number(value));\n                      setCurrentPage(1);\n                    }}\n                  >\n                    <SelectTrigger className=\"w-[120px]\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {PAGE_SIZE_OPTIONS.map(option => (\n                        <SelectItem key={option.value} value={option.value.toString()}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center gap-6\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Visar {((currentPage - 1) * pageSize) + 1} till {Math.min(currentPage * pageSize, sortedData.length)} av {sortedData.length}\n                  </span>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                      disabled={currentPage === 1}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <span className=\"text-sm\">\n                      Sida {currentPage} av {totalPages}\n                    </span>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                      disabled={currentPage >= totalPages}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          \n          {/* Förklaring av ikoner */}\n          <div className=\"mt-4 p-3 bg-muted/30 rounded-lg\">\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex items-center gap-2\">\n                <span>🏆 = Bästa värde för denna sida</span>\n                <span className=\"mx-4\">📉 = Sämsta värde för denna sida</span>\n              </div>\n              <div className=\"text-muted-foreground text-xs\">\n                Gröna värden = bästa prestanda, röda värden = sämsta prestanda för vald tidsperiod\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default PageTimeseriesView;","import React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './ui/table';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Alert, AlertDescription, AlertTitle } from './ui/alert';\nimport { \n  ArrowUpDown, \n  ArrowUp, \n  ArrowDown,\n  Calendar,\n  BarChart3,\n  FileDown,\n  FileSpreadsheet,\n  AlertCircle,\n  ChevronLeft,\n  ChevronRight,\n  Target,\n  Activity\n} from 'lucide-react';\n\n// Sveriges Radio kanal-färger (från original)\nconst CHANNEL_COLORS = {\n  'P1': '#0066cc', // Blå\n  'P2': '#ff6600', // Orange\n  'P3': '#00cc66', // Grön\n  'P4': '#cc33cc', // Magenta/Lila\n  'EKOT': '#005eb8', // Mörk blå (Ekot/Radio Sweden)\n  'RADIOSPORTEN': '#1c5c35', // Mörk grön (Radiosporten)\n  'SR': '#000000',  // Svart för Sveriges Radio\n  'default': '#000000' // Svart som fallback\n};\n\n// ProfileIcon-komponent för Sveriges Radio kanaler (KORRIGERAD)\nconst ProfileIcon = ({ pageName }) => {\n  // Extrahera namn från sidnamnet\n  const name = pageName || 'Okänd';\n  \n  // Bestäm färg och kanal-text baserat på kanalnamn i sidnamnet\n  let backgroundColor = CHANNEL_COLORS.default;\n  let channelText = '';\n  \n  // Kontrollera om sidnamnet innehåller något av kanalnamnen\n  const nameLower = name.toLowerCase();\n  \n  if (nameLower.includes('ekot') || nameLower.includes('radio sweden')) {\n    backgroundColor = CHANNEL_COLORS.EKOT;\n    channelText = 'E';\n  } else if (nameLower.includes('radiosporten') || nameLower.includes('radio sporten')) {\n    backgroundColor = CHANNEL_COLORS.RADIOSPORTEN;\n    channelText = 'RS';\n  } else if (nameLower.includes('p1')) {\n    backgroundColor = CHANNEL_COLORS.P1;\n    channelText = 'P1';\n  } else if (nameLower.includes('p2')) {\n    backgroundColor = CHANNEL_COLORS.P2;\n    channelText = 'P2';\n  } else if (nameLower.includes('p3')) {\n    backgroundColor = CHANNEL_COLORS.P3;\n    channelText = 'P3';\n  } else if (nameLower.includes('p4')) {\n    backgroundColor = CHANNEL_COLORS.P4;\n    channelText = 'P4';\n  } else if (nameLower.includes('sveriges radio') && !nameLower.includes('p1') && \n            !nameLower.includes('p2') && !nameLower.includes('p3') && !nameLower.includes('p4')) {\n    // Sveriges Radio, men inte specifik kanal\n    backgroundColor = CHANNEL_COLORS.SR;\n    channelText = 'SR';\n  } else {\n    // Fallback: använd första bokstaven om ingen kanal hittas\n    channelText = name.charAt(0).toUpperCase();\n  }\n  \n  // Bestäm textfärg baserat på bakgrundsfärgen (vit text på mörka bakgrunder)\n  const isLightBackground = backgroundColor === CHANNEL_COLORS.P2 || backgroundColor === CHANNEL_COLORS.P3;\n  const textColor = isLightBackground ? 'text-black' : 'text-white';\n  \n  return (\n    <div \n      className={`flex-shrink-0 w-6 h-6 rounded-sm flex items-center justify-center text-xs font-bold ${textColor}`}\n      style={{ backgroundColor }}\n      title={pageName}\n    >\n      {channelText}\n    </div>\n  );\n};\n\n// Sidstorlekar för paginering\nconst PAGE_SIZE_OPTIONS = [\n  { value: 10, label: '10 per sida' },\n  { value: 25, label: '25 per sida' },\n  { value: 50, label: '50 per sida' }\n];\n\n// KORRIGERAT: Tillgängliga metrics för månadsvy\nconst AVAILABLE_METRICS = [\n  { key: 'reach', label: 'Räckvidd', canSum: false },\n  { key: 'engagements', label: 'Engagemang', canSum: true },\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\n  { key: 'publications', label: 'Publiceringar', canSum: true }\n];\n\n// Metric-definitioner (korrigerade)\nconst METRIC_DEFINITIONS = {\n  reach: { displayName: 'Räckvidd', canSumAcrossPages: false, category: 'unique_persons' },\n  engagements: { displayName: 'Engagemang', canSumAcrossPages: true, category: 'countable' },\n  reactions: { displayName: 'Reaktioner', canSumAcrossPages: true, category: 'countable' },\n  publications: { displayName: 'Publiceringar', canSumAcrossPages: true, category: 'countable' }\n};\n\nfunction MonthlyComparisonView({ uploadedPeriods = [] }) {\n  // State management\n  const [selectedPeriod, setSelectedPeriod] = useState(null);\n  const [periodData, setPeriodData] = useState([]);\n  const [periodSummary, setPeriodSummary] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  \n  // Tabell-state\n  const [sortConfig, setSortConfig] = useState({ key: 'pageName', direction: 'asc' });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(25);\n  const [selectedMetrics, setSelectedMetrics] = useState(['reach', 'engagements', 'publications']);\n\n  // Sätt default period när uploadedPeriods ändras\n  useEffect(() => {\n    if (uploadedPeriods.length > 0 && !selectedPeriod) {\n      const firstPeriod = uploadedPeriods[0];\n      setSelectedPeriod({ year: firstPeriod.year, month: firstPeriod.month });\n    }\n  }, [uploadedPeriods, selectedPeriod]);\n\n  // Ladda data när vald period ändras\n  useEffect(() => {\n    if (!selectedPeriod) return;\n    \n    const loadPeriodData = () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        const matchingPeriod = uploadedPeriods.find(period => \n          period.year === selectedPeriod.year && period.month === selectedPeriod.month\n        );\n        \n        if (!matchingPeriod) {\n          setError(`Ingen data hittades för ${getMonthName(selectedPeriod.month)} ${selectedPeriod.year}`);\n          setPeriodData([]);\n          setPeriodSummary(null);\n          return;\n        }\n        \n        // KORRIGERAT: Mappa endast de 4 relevanta kolumnerna från CSV\n        const convertedData = matchingPeriod.data.map(csvRow => ({\n          page: {\n            pageName: csvRow.Page || csvRow.page || 'Okänd sida',\n            pageId: csvRow['Page ID'] || csvRow.pageId || 'unknown'\n          },\n          period: {\n            year: selectedPeriod.year,\n            month: selectedPeriod.month\n          },\n          metrics: {\n            reach: parseNumericValue(csvRow.Reach || csvRow.reach),\n            engagements: parseNumericValue(csvRow.Engagements || csvRow.engagements),\n            reactions: parseNumericValue(csvRow.Reactions || csvRow.reactions),\n            publications: parseNumericValue(csvRow.Publications || csvRow.publications)\n          }\n        }));\n        \n        setPeriodData(convertedData);\n        \n        const summary = calculatePeriodSummary(convertedData, selectedPeriod.year, selectedPeriod.month);\n        setPeriodSummary(summary);\n        \n      } catch (err) {\n        console.error('Error loading period data:', err);\n        setError(`Kunde inte ladda data för ${getMonthName(selectedPeriod.month)} ${selectedPeriod.year}`);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    loadPeriodData();\n  }, [selectedPeriod, uploadedPeriods]);\n\n  // Parse numeriskt värde säkert\n  const parseNumericValue = (value) => {\n    if (value === null || value === undefined || value === '') return 0;\n    const parsed = parseFloat(String(value).replace(/[,\\s]/g, ''));\n    return isNaN(parsed) ? 0 : parsed;\n  };\n\n  // Hjälpfunktion för månadsnamn\n  const getMonthName = (month) => {\n    const months = [\n      'Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni',\n      'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December'\n    ];\n    return months[month - 1];\n  };\n\n  // Beräkna period-sammandrag (KORRIGERAT)\n  const calculatePeriodSummary = (data, year, month) => {\n    if (!data.length) return null;\n    \n    const summary = {\n      period: { year, month },\n      totalPages: data.length,\n      metrics: {}\n    };\n\n    // KORRIGERAT: Använd bara de 4 relevanta metrics\n    const availableMetricKeys = ['reach', 'engagements', 'reactions', 'publications'];\n    \n    for (const metric of availableMetricKeys) {\n      const values = data\n        .map(item => item.metrics[metric])\n        .filter(value => value !== null && value !== undefined && !isNaN(value) && value >= 0);\n\n      if (values.length === 0) {\n        summary.metrics[metric] = {\n          total: 0,\n          average: 0,\n          min: 0,\n          max: 0,\n          validPages: 0,\n          type: METRIC_DEFINITIONS[metric].category\n        };\n        continue;\n      }\n\n      const definition = METRIC_DEFINITIONS[metric];\n      \n      if (!definition.canSumAcrossPages) {\n        summary.metrics[metric] = {\n          average: Math.round(values.reduce((sum, val) => sum + val, 0) / values.length),\n          min: Math.min(...values),\n          max: Math.max(...values),\n          validPages: values.length,\n          type: 'unique_persons',\n          note: 'Genomsnitt över sidor - total reach kan inte beräknas'\n        };\n      } else {\n        const total = values.reduce((sum, val) => sum + val, 0);\n        summary.metrics[metric] = {\n          total,\n          average: Math.round(total / values.length),\n          min: Math.min(...values),\n          max: Math.max(...values),\n          validPages: values.length,\n          type: 'countable'\n        };\n      }\n    }\n\n    return summary;\n  };\n\n  // Sortera data\n  const sortedData = useMemo(() => {\n    if (!periodData.length) return [];\n    \n    return [...periodData].sort((a, b) => {\n      let aValue, bValue;\n      \n      if (sortConfig.key === 'pageName') {\n        aValue = a.page.pageName;\n        bValue = b.page.pageName;\n      } else {\n        aValue = a.metrics[sortConfig.key] || 0;\n        bValue = b.metrics[sortConfig.key] || 0;\n      }\n      \n      if (typeof aValue === 'string') {\n        const comparison = aValue.localeCompare(bValue);\n        return sortConfig.direction === 'asc' ? comparison : -comparison;\n      }\n      \n      const comparison = aValue - bValue;\n      return sortConfig.direction === 'asc' ? comparison : -comparison;\n    });\n  }, [periodData, sortConfig]);\n\n  // Paginering\n  const paginatedData = useMemo(() => {\n    const startIndex = (currentPage - 1) * pageSize;\n    return sortedData.slice(startIndex, startIndex + pageSize);\n  }, [sortedData, currentPage, pageSize]);\n\n  const totalPages = Math.ceil(sortedData.length / pageSize);\n\n  // Hantera sortering\n  const handleSort = (key) => {\n    setSortConfig(current => ({\n      key,\n      direction: current.key === key && current.direction === 'asc' ? 'desc' : 'asc'\n    }));\n  };\n\n  // Få sorterings-ikon\n  const getSortIcon = (columnKey) => {\n    if (sortConfig.key !== columnKey) {\n      return <ArrowUpDown className=\"h-4 w-4 ml-1 opacity-50\" />;\n    }\n    return sortConfig.direction === 'asc' ? \n      <ArrowUp className=\"h-4 w-4 ml-1\" /> : \n      <ArrowDown className=\"h-4 w-4 ml-1\" />;\n  };\n\n  // KORRIGERAT: Hantera metric-val med checkboxar\n  const handleMetricToggle = (metricKey) => {\n    setSelectedMetrics(current => \n      current.includes(metricKey) \n        ? current.filter(m => m !== metricKey)\n        : [...current, metricKey]\n    );\n  };\n\n// DEL_1_SLUTAR_HÄR - Fortsätt med del 2 som börjar med handleExportCSV\n// DEL_2_BÖRJAR_HÄR - Fortsättning från del 1 med handleExportCSV\n\n  // Export till CSV\n  const handleExportCSV = () => {\n    const headers = ['Sidnamn', 'Sido-ID', ...selectedMetrics.map(m => {\n      const def = METRIC_DEFINITIONS[m];\n      return def ? def.displayName : m;\n    })];\n    \n    const csvData = sortedData.map(item => [\n      item.page.pageName,\n      item.page.pageId,\n      ...selectedMetrics.map(m => item.metrics[m] || 0)\n    ]);\n    \n    const csvContent = [\n      headers.join(','),\n      ...csvData.map(row => row.join(','))\n    ].join('\\n');\n    \n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    \n    const periodName = selectedPeriod ? \n      `${getMonthName(selectedPeriod.month)}_${selectedPeriod.year}` : \n      'månadsjämförelse';\n      \n    link.setAttribute('download', `Facebook_${periodName}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Formatera numeriska värden\n  const formatValue = (value) => {\n    if (value === null || value === undefined || isNaN(value)) return '-';\n    return new Intl.NumberFormat('sv-SE').format(value);\n  };\n\n  // Hitta bästa och sämsta värden för prestanda-highlighting\n  const getPerformanceClass = (metric, value, data) => {\n    if (!data || data.length < 2 || value === null || value === undefined) return '';\n    \n    const values = data.map(d => d.metrics[metric]).filter(v => v !== null && v !== undefined && !isNaN(v));\n    if (values.length < 2) return '';\n    \n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    \n    if (value === max && max !== min) return 'bg-green-100 text-green-800 font-medium';\n    if (value === min && max !== min) return 'bg-red-100 text-red-800 font-medium';\n    return '';\n  };\n\n  if (loading) {\n    return (\n      <Alert>\n        <Activity className=\"h-4 w-4\" />\n        <AlertTitle>Laddar data</AlertTitle>\n        <AlertDescription>\n          Analyserar månadsdata för Facebook-sidor...\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert variant=\"destructive\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Fel</AlertTitle>\n        <AlertDescription>\n          {error}\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  if (uploadedPeriods.length === 0) {\n    return (\n      <Alert>\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Ingen data</AlertTitle>\n        <AlertDescription>\n          Ladda upp CSV-filer för att visa månadsvis jämförelse av Facebook-sidor.\n        </AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Period-väljare och kontroller */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5 text-facebook-500\" />\n            Månadsvis jämförelse\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid md:grid-cols-2 gap-4 mb-6\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Välj månad</label>\n              <Select \n                value={selectedPeriod ? `${selectedPeriod.year}_${selectedPeriod.month}` : ''}\n                onValueChange={(value) => {\n                  const [year, month] = value.split('_');\n                  setSelectedPeriod({ year: parseInt(year), month: parseInt(month) });\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Välj månad att analysera\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {uploadedPeriods.map(period => (\n                    <SelectItem key={`${period.year}_${period.month}`} value={`${period.year}_${period.month}`}>\n                      {getMonthName(period.month)} {period.year}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {selectedPeriod && (\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Visar data för {getMonthName(selectedPeriod.month)} {selectedPeriod.year}\n                </p>\n              )}\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Metrics att visa</label>\n              <div className=\"flex flex-wrap gap-3\">\n                {AVAILABLE_METRICS.map(metric => {\n                  const isSelected = selectedMetrics.includes(metric.key);\n                  \n                  return (\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => handleMetricToggle(metric.key)}\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\n                      />\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\n                      {!metric.canSum && (\n                        <span className=\"text-xs text-orange-600 font-medium\">*</span>\n                      )}\n                    </label>\n                  );\n                })}\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                * = Kan inte summeras över sidor (unika personer per månad)\n              </p>\n            </div>\n          </div>\n\n          {/* Period-sammandrag */}\n          {periodSummary && (\n            <div className=\"grid md:grid-cols-4 gap-4 mb-6 p-4 bg-muted/30 rounded-lg\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-facebook-600\">\n                  {periodSummary.totalPages}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Facebook-sidor</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold\">\n                  {getMonthName(periodSummary.period.month)} {periodSummary.period.year}\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Vald period</div>\n              </div>\n              \n              {selectedMetrics.slice(0, 2).map(metric => {\n                const metricData = periodSummary.metrics[metric];\n                const definition = METRIC_DEFINITIONS[metric];\n                \n                if (!metricData || !definition) return null;\n                \n                return (\n                  <div key={metric} className=\"text-center\">\n                    <div className=\"text-lg font-semibold\">\n                      {definition.canSumAcrossPages ? \n                        formatValue(metricData.total) : \n                        formatValue(metricData.average)\n                      }\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {definition.canSumAcrossPages ? `Total ${definition.displayName}` : `Snitt ${definition.displayName}`}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Månadsdata-tabell */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            {selectedPeriod ? \n              `${getMonthName(selectedPeriod.month)} ${selectedPeriod.year} - Alla sidor` : \n              'Månadsdata'}\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button onClick={handleExportCSV} variant=\"outline\" size=\"sm\">\n              <FileDown className=\"h-4 w-4 mr-2\" />\n              CSV\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {periodData.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-8\">\n              Ingen data tillgänglig för vald månad\n            </p>\n          ) : (\n            <>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead \n                      className=\"cursor-pointer select-none\"\n                      onClick={() => handleSort('pageName')}\n                    >\n                      <div className=\"flex items-center\">\n                        Sidnamn\n                        {getSortIcon('pageName')}\n                      </div>\n                    </TableHead>\n                    {selectedMetrics.map(metric => {\n                      const definition = METRIC_DEFINITIONS[metric];\n                      return (\n                        <TableHead \n                          key={metric}\n                          className=\"text-right cursor-pointer select-none\"\n                          onClick={() => handleSort(metric)}\n                        >\n                          <div className=\"flex items-center justify-end\">\n                            {definition?.displayName || metric}\n                            {getSortIcon(metric)}\n                            {!definition?.canSumAcrossPages && (\n                              <span className=\"ml-1 text-orange-600\">*</span>\n                            )}\n                          </div>\n                        </TableHead>\n                      );\n                    })}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {paginatedData.map((item, index) => (\n                    <TableRow key={item.page.pageId}>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <ProfileIcon pageName={item.page.pageName} />\n                          <span>{item.page.pageName}</span>\n                        </div>\n                      </TableCell>\n                      {selectedMetrics.map(metric => (\n                        <TableCell \n                          key={metric}\n                          className=\"text-right\"\n                        >\n                          <div className=\"flex items-center justify-end gap-1\">\n                            {formatValue(item.metrics[metric])}\n                            {periodSummary?.metrics[metric] && \n                             item.metrics[metric] === periodSummary.metrics[metric].max && \n                             periodSummary.metrics[metric].max !== periodSummary.metrics[metric].min && (\n                              <span className=\"text-yellow-600\" title=\"Bästa värde för denna månad\">🏆</span>\n                            )}\n                            {periodSummary?.metrics[metric] && \n                             item.metrics[metric] === periodSummary.metrics[metric].min && \n                             periodSummary.metrics[metric].max !== periodSummary.metrics[metric].min && (\n                              <span className=\"text-gray-500\" title=\"Lägsta värde för denna månad\">📉</span>\n                            )}\n                          </div>\n                        </TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n\n              {/* Paginering */}\n              <div className=\"flex items-center justify-between mt-4\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm text-muted-foreground\">Visa:</span>\n                  <Select\n                    value={pageSize.toString()}\n                    onValueChange={(value) => {\n                      setPageSize(Number(value));\n                      setCurrentPage(1);\n                    }}\n                  >\n                    <SelectTrigger className=\"w-[120px]\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {PAGE_SIZE_OPTIONS.map(option => (\n                        <SelectItem key={option.value} value={option.value.toString()}>\n                          {option.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex items-center gap-6\">\n                  <span className=\"text-sm text-muted-foreground\">\n                    Visar {((currentPage - 1) * pageSize) + 1} till {Math.min(currentPage * pageSize, sortedData.length)} av {sortedData.length}\n                  </span>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.max(1, p - 1))}\n                      disabled={currentPage === 1}\n                    >\n                      <ChevronLeft className=\"h-4 w-4\" />\n                    </Button>\n                    \n                    <span className=\"text-sm\">\n                      Sida {currentPage} av {totalPages}\n                    </span>\n                    \n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(p => Math.min(totalPages, p + 1))}\n                      disabled={currentPage >= totalPages}\n                    >\n                      <ChevronRight className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n          \n          {/* Varning för icke-summerbara metrics */}\n          {selectedMetrics.some(m => METRIC_DEFINITIONS[m]?.category === 'unique_persons') && (\n            <Alert className=\"mt-4 bg-amber-50 border-amber-200\">\n              <AlertCircle className=\"h-4 w-4 text-amber-600\" />\n              <AlertTitle className=\"text-amber-800\">Viktigt om Räckvidd</AlertTitle>\n              <AlertDescription className=\"text-amber-700\">\n                Räckvidd representerar unika personer per månad och kan ALDRIG summeras över månader eller sidor. \n                Värdena i tabellen visar data för den valda månaden.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default MonthlyComparisonView;","/**\n * Reach Calculator\n * \n * Hanterar korrekt beräkning av Reach och Engaged Users som ALDRIG kan summeras över månader\n * eftersom dessa representerar unika personer per månad, inte kumulativa värden.\n */\n\n/**\n * Lista över metrics som representerar unika personer per månad\n * Dessa kan ALDRIG summeras över tid\n */\nexport const NON_SUMMABLE_METRICS = ['reach', 'engagedUsers'];\n\n/**\n * Lista över metrics som kan summeras över tid\n */\nexport const SUMMABLE_METRICS = ['engagements', 'reactions', 'publications', 'status', 'comment'];\n\n/**\n * Kontrollerar om en metric kan summeras över månader\n * @param {string} metric - Metric att kontrollera\n * @returns {boolean} - True om metric kan summeras\n */\nexport function isMetricSummable(metric) {\n  return SUMMABLE_METRICS.includes(metric);\n}\n\n/**\n * Kontrollerar om en metric representerar unika personer\n * @param {string} metric - Metric att kontrollera\n * @returns {boolean} - True om metric representerar unika personer\n */\nexport function isMetricUniquePersons(metric) {\n  return NON_SUMMABLE_METRICS.includes(metric);\n}\n\n/**\n * Beräknar genomsnittlig reach över en period för en sida\n * Detta är den ENDA korrekta sättet att aggregera reach över månader\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Object} - Reach-statistik\n */\nexport function calculateAverageReach(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('calculateAverageReach kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return {\n      averageReach: 0,\n      minReach: 0,\n      maxReach: 0,\n      totalPeriods: 0,\n      validPeriods: 0\n    };\n  }\n\n  let totalReach = 0;\n  let validCount = 0;\n  let minReach = Infinity;\n  let maxReach = -Infinity;\n\n  for (const data of monthlyData) {\n    const reach = data.metrics.reach;\n    \n    if (reach !== null && reach !== undefined && !isNaN(reach) && reach >= 0) {\n      totalReach += reach;\n      validCount++;\n      minReach = Math.min(minReach, reach);\n      maxReach = Math.max(maxReach, reach);\n    }\n  }\n\n  // Hantera fall där ingen giltig data finns\n  if (validCount === 0) {\n    return {\n      averageReach: 0,\n      minReach: 0,\n      maxReach: 0,\n      totalPeriods: monthlyData.length,\n      validPeriods: 0\n    };\n  }\n\n  return {\n    averageReach: Math.round(totalReach / validCount),\n    minReach: minReach === Infinity ? 0 : minReach,\n    maxReach: maxReach === -Infinity ? 0 : maxReach,\n    totalPeriods: monthlyData.length,\n    validPeriods: validCount\n  };\n}\n\n/**\n * Beräknar genomsnittliga engaged users över en period för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Object} - Engaged Users statistik\n */\nexport function calculateAverageEngagedUsers(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('calculateAverageEngagedUsers kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return {\n      averageEngagedUsers: 0,\n      minEngagedUsers: 0,\n      maxEngagedUsers: 0,\n      totalPeriods: 0,\n      validPeriods: 0\n    };\n  }\n\n  let totalEngagedUsers = 0;\n  let validCount = 0;\n  let minEngagedUsers = Infinity;\n  let maxEngagedUsers = -Infinity;\n\n  for (const data of monthlyData) {\n    const engagedUsers = data.metrics.engagedUsers;\n    \n    if (engagedUsers !== null && engagedUsers !== undefined && !isNaN(engagedUsers) && engagedUsers >= 0) {\n      totalEngagedUsers += engagedUsers;\n      validCount++;\n      minEngagedUsers = Math.min(minEngagedUsers, engagedUsers);\n      maxEngagedUsers = Math.max(maxEngagedUsers, engagedUsers);\n    }\n  }\n\n  if (validCount === 0) {\n    return {\n      averageEngagedUsers: 0,\n      minEngagedUsers: 0,\n      maxEngagedUsers: 0,\n      totalPeriods: monthlyData.length,\n      validPeriods: 0\n    };\n  }\n\n  return {\n    averageEngagedUsers: Math.round(totalEngagedUsers / validCount),\n    minEngagedUsers: minEngagedUsers === Infinity ? 0 : minEngagedUsers,\n    maxEngagedUsers: maxEngagedUsers === -Infinity ? 0 : maxEngagedUsers,\n    totalPeriods: monthlyData.length,\n    validPeriods: validCount\n  };\n}\n\n/**\n * Beräknar engagement rate (engagedUsers / reach) för varje månad\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Array<Object>} - Månadsvis engagement rate\n */\nexport function calculateMonthlyEngagementRates(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('calculateMonthlyEngagementRates kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  const engagementRates = [];\n\n  for (const data of monthlyData) {\n    const reach = data.metrics.reach;\n    const engagedUsers = data.metrics.engagedUsers;\n    \n    let engagementRate = null;\n    if (reach && reach > 0 && engagedUsers !== null && engagedUsers !== undefined) {\n      engagementRate = (engagedUsers / reach) * 100;\n    }\n\n    engagementRates.push({\n      period: data.getPeriod(),\n      reach,\n      engagedUsers,\n      engagementRate: engagementRate ? Math.round(engagementRate * 100) / 100 : null, // 2 decimaler\n      pageName: data.page.pageName,\n      pageId: data.page.pageId\n    });\n  }\n\n  return engagementRates;\n}\n\n/**\n * Beräknar genomsnittlig engagement rate över en period\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Object} - Genomsnittlig engagement rate statistik\n */\nexport function calculateAverageEngagementRate(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('calculateAverageEngagementRate kräver PageTimeseries');\n  }\n\n  const monthlyRates = calculateMonthlyEngagementRates(pageTimeseries);\n  const validRates = monthlyRates.filter(rate => rate.engagementRate !== null);\n\n  if (validRates.length === 0) {\n    return {\n      averageEngagementRate: 0,\n      minEngagementRate: 0,\n      maxEngagementRate: 0,\n      validPeriods: 0,\n      totalPeriods: monthlyRates.length\n    };\n  }\n\n  const rates = validRates.map(rate => rate.engagementRate);\n  const avgRate = rates.reduce((sum, rate) => sum + rate, 0) / rates.length;\n  const minRate = Math.min(...rates);\n  const maxRate = Math.max(...rates);\n\n  return {\n    averageEngagementRate: Math.round(avgRate * 100) / 100, // 2 decimaler\n    minEngagementRate: Math.round(minRate * 100) / 100,\n    maxEngagementRate: Math.round(maxRate * 100) / 100,\n    validPeriods: validRates.length,\n    totalPeriods: monthlyRates.length,\n    monthlyRates: validRates\n  };\n}\n\n/**\n * Jämför reach-prestanda mellan månader för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Array<Object>} - Månad-för-månad reach-jämförelse\n */\nexport function compareMonthlyReach(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('compareMonthlyReach kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length < 2) {\n    return []; // Behöver minst 2 månader för jämförelse\n  }\n\n  const comparisons = [];\n\n  for (let i = 1; i < monthlyData.length; i++) {\n    const current = monthlyData[i];\n    const previous = monthlyData[i - 1];\n\n    const currentReach = current.metrics.reach || 0;\n    const previousReach = previous.metrics.reach || 0;\n\n    let percentageChange = null;\n    if (previousReach > 0) {\n      percentageChange = ((currentReach - previousReach) / previousReach) * 100;\n    } else if (currentReach > 0) {\n      percentageChange = 100; // 100% ökning från 0\n    }\n\n    comparisons.push({\n      currentPeriod: current.getPeriod(),\n      previousPeriod: previous.getPeriod(),\n      currentReach,\n      previousReach,\n      absoluteChange: currentReach - previousReach,\n      percentageChange: percentageChange ? Math.round(percentageChange * 100) / 100 : null,\n      pageName: current.page.pageName,\n      pageId: current.page.pageId\n    });\n  }\n\n  return comparisons;\n}\n\n/**\n * Identifierar månader med exceptionellt hög eller låg reach\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {number} threshold - Tröskelvärde för vad som räknas som exceptionellt (standard 2 = 2 standardavvikelser)\n * @returns {Object} - Exceptionella månader\n */\nexport function findReachAnomalies(pageTimeseries, threshold = 2) {\n  if (!pageTimeseries) {\n    throw new Error('findReachAnomalies kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length < 3) {\n    return { outliers: [], statistics: null }; // Behöver minst 3 datapunkter\n  }\n\n  // Samla alla reach-värden\n  const reachValues = monthlyData\n    .map(data => data.metrics.reach)\n    .filter(reach => reach !== null && reach !== undefined && !isNaN(reach));\n\n  if (reachValues.length < 3) {\n    return { outliers: [], statistics: null };\n  }\n\n  // Beräkna genomsnitt och standardavvikelse\n  const mean = reachValues.reduce((sum, val) => sum + val, 0) / reachValues.length;\n  const variance = reachValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / reachValues.length;\n  const stdDev = Math.sqrt(variance);\n\n  const lowerBound = mean - (threshold * stdDev);\n  const upperBound = mean + (threshold * stdDev);\n\n  // Hitta outliers\n  const outliers = [];\n  for (const data of monthlyData) {\n    const reach = data.metrics.reach;\n    if (reach !== null && reach !== undefined && !isNaN(reach)) {\n      if (reach < lowerBound || reach > upperBound) {\n        outliers.push({\n          period: data.getPeriod(),\n          reach,\n          deviation: reach < lowerBound ? 'låg' : 'hög',\n          deviationFromMean: reach - mean,\n          standardDeviations: Math.abs((reach - mean) / stdDev),\n          pageName: data.page.pageName,\n          pageId: data.page.pageId\n        });\n      }\n    }\n  }\n\n  return {\n    outliers,\n    statistics: {\n      mean: Math.round(mean),\n      standardDeviation: Math.round(stdDev),\n      lowerBound: Math.round(lowerBound),\n      upperBound: Math.round(upperBound),\n      threshold,\n      sampleSize: reachValues.length\n    }\n  };\n}\n\n/**\n * Validerar att en operation är tillåten för given metric\n * Kastar fel om man försöker summera reach eller engagedUsers\n * @param {string} operation - Operation som ska utföras ('sum', 'average', etc.)\n * @param {string} metric - Metric som operationen ska utföras på\n * @throws {Error} - Om operationen inte är tillåten för denna metric\n */\nexport function validateMetricOperation(operation, metric) {\n  if (operation === 'sum' || operation === 'total') {\n    if (NON_SUMMABLE_METRICS.includes(metric)) {\n      throw new Error(\n        `KRITISKT FEL: ${metric} representerar unika personer per månad och kan ALDRIG summeras över tid. ` +\n        `Använd genomsnitt istället. Tillåtna operationer för ${metric}: average, min, max`\n      );\n    }\n  }\n\n  if ((operation === 'average' || operation === 'mean') && SUMMABLE_METRICS.includes(metric)) {\n    console.warn(\n      `VARNING: Du beräknar genomsnitt för ${metric} som normalt summeras över tid. ` +\n      `Kontrollera att detta är det avsedda beteendet.`\n    );\n  }\n}\n\n/**\n * Säker aggregering av en metric med automatisk validering\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric - Metric att aggregera\n * @param {string} operation - Operation att utföra ('sum', 'average', 'min', 'max')\n * @returns {number} - Aggregerat värde\n */\nexport function safeMetricAggregation(pageTimeseries, metric, operation) {\n  if (!pageTimeseries || !metric || !operation) {\n    throw new Error('safeMetricAggregation kräver PageTimeseries, metric och operation');\n  }\n\n  // Validera operation mot metric-typ\n  validateMetricOperation(operation, metric);\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return 0;\n  }\n\n  const values = monthlyData\n    .map(data => data.metrics[metric])\n    .filter(value => value !== null && value !== undefined && !isNaN(value) && value >= 0);\n\n  if (values.length === 0) {\n    return 0;\n  }\n\n  switch (operation.toLowerCase()) {\n    case 'sum':\n    case 'total':\n      return values.reduce((sum, val) => sum + val, 0);\n    \n    case 'average':\n    case 'mean':\n      return Math.round(values.reduce((sum, val) => sum + val, 0) / values.length);\n    \n    case 'min':\n    case 'minimum':\n      return Math.min(...values);\n    \n    case 'max':\n    case 'maximum':\n      return Math.max(...values);\n    \n    default:\n      throw new Error(`Okänd operation: ${operation}. Tillåtna: sum, average, min, max`);\n  }\n}","/**\n * Metric Categorizer\n * \n * Definierarar och kategoriserar Facebook API metrics enligt deras egenskaper\n * Säkerställer korrekt hantering av summerbara vs icke-summerbara metrics\n */\n\n// Import från reach_calculator för konsistens\nimport { SUMMABLE_METRICS, NON_SUMMABLE_METRICS } from '../services/reach_calculator.js';\n\n/**\n * Komplett definition av alla Facebook API metrics med egenskaper\n */\nexport const METRIC_DEFINITIONS = {\n  // ICKE-SUMMERBARA METRICS (Unika personer per månad)\n  reach: {\n    category: 'unique_persons',\n    displayName: 'Räckvidd',\n    description: 'Antal unika personer som såg innehållet under månaden',\n    unit: 'personer',\n    canSumAcrossTime: false,\n    canSumAcrossPages: false, // Överlappning mellan sidor okänd\n    preferredAggregation: 'average',\n    validAggregations: ['average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Reach',\n    icon: '👁️',\n    color: '#3B82F6', // Blue\n    warningNote: 'Kan ALDRIG summeras över månader - representerar unika personer'\n  },\n  \n  engagedUsers: {\n    category: 'unique_persons',\n    displayName: 'Engagerade användare',\n    description: 'Antal unika personer som interagerade med innehållet under månaden',\n    unit: 'personer',\n    canSumAcrossTime: false,\n    canSumAcrossPages: false, // Överlappning mellan sidor okänd\n    preferredAggregation: 'average',\n    validAggregations: ['average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Engaged Users',\n    icon: '🤝',\n    color: '#10B981', // Green\n    warningNote: 'Kan ALDRIG summeras över månader - representerar unika personer'\n  },\n\n  // SUMMERBARA METRICS (Räknbara händelser)\n  engagements: {\n    category: 'countable_events',\n    displayName: 'Interaktioner',\n    description: 'Totalt antal interaktioner (reactions + comments + shares)',\n    unit: 'interaktioner',\n    canSumAcrossTime: true,\n    canSumAcrossPages: true,\n    preferredAggregation: 'sum',\n    validAggregations: ['sum', 'average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Engagements',\n    icon: '💬',\n    color: '#8B5CF6', // Purple\n    warningNote: null\n  },\n\n  reactions: {\n    category: 'countable_events',\n    displayName: 'Reaktioner',\n    description: 'Antal likes, hearts, och andra reaktioner på innehåll',\n    unit: 'reaktioner',\n    canSumAcrossTime: true,\n    canSumAcrossPages: true,\n    preferredAggregation: 'sum',\n    validAggregations: ['sum', 'average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Reactions',\n    icon: '❤️',\n    color: '#EF4444', // Red\n    warningNote: null\n  },\n\n  publications: {\n    category: 'countable_events',\n    displayName: 'Publiceringar',\n    description: 'Antal publicerade inlägg under månaden',\n    unit: 'inlägg',\n    canSumAcrossTime: true,\n    canSumAcrossPages: true,\n    preferredAggregation: 'sum',\n    validAggregations: ['sum', 'average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Publications',\n    icon: '📝',\n    color: '#F59E0B', // Amber\n    warningNote: null\n  },\n\n  status: {\n    category: 'countable_events',\n    displayName: 'Statusuppdateringar',\n    description: 'Antal statusuppdateringar under månaden',\n    unit: 'statusar',\n    canSumAcrossTime: true,\n    canSumAcrossPages: true,\n    preferredAggregation: 'sum',\n    validAggregations: ['sum', 'average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Status',\n    icon: '📢',\n    color: '#14B8A6', // Teal\n    warningNote: null\n  },\n\n  comment: {\n    category: 'countable_events',\n    displayName: 'Kommentarer',\n    description: 'Antal kommentarer på innehåll',\n    unit: 'kommentarer',\n    canSumAcrossTime: true,\n    canSumAcrossPages: true,\n    preferredAggregation: 'sum',\n    validAggregations: ['sum', 'average', 'min', 'max'],\n    dataType: 'integer',\n    csvColumn: 'Comment',\n    icon: '💭',\n    color: '#6366F1', // Indigo\n    warningNote: null\n  }\n};\n\n/**\n * Kategorier av metrics med beskrivningar\n */\nexport const METRIC_CATEGORIES = {\n  unique_persons: {\n    name: 'Unika personer',\n    description: 'Metrics som representerar unika personer per månad och kan aldrig summeras över tid',\n    aggregationRules: {\n      acrossTime: 'average', // Endast genomsnitt över månader\n      acrossPages: 'average', // Genomsnitt över sidor (överlappning okänd)\n      forbidden: ['sum', 'total']\n    },\n    color: '#3B82F6',\n    icon: '👥',\n    warningMessage: 'Dessa metrics kan ALDRIG summeras över månader eftersom de representerar unika personer'\n  },\n  \n  countable_events: {\n    name: 'Räknbara händelser',\n    description: 'Metrics som representerar räknbara händelser och kan summeras över tid och sidor',\n    aggregationRules: {\n      acrossTime: 'sum', // Kan summeras över månader\n      acrossPages: 'sum', // Kan summeras över sidor\n      allowed: ['sum', 'total', 'average', 'min', 'max']\n    },\n    color: '#10B981',\n    icon: '🔢',\n    warningMessage: null\n  }\n};\n\n/**\n * Hämtar metric-definition för ett specifikt metric\n * @param {string} metricKey - Metric-nyckel (t.ex. 'reach', 'engagements')\n * @returns {Object|null} - Metric-definition eller null om inte hittat\n */\nexport function getMetricDefinition(metricKey) {\n  return METRIC_DEFINITIONS[metricKey] || null;\n}\n\n/**\n * Kontrollerar om en metric kan summeras över tid\n * @param {string} metricKey - Metric att kontrollera\n * @returns {boolean} - True om metric kan summeras över månader\n */\nexport function canSumAcrossTime(metricKey) {\n  const definition = getMetricDefinition(metricKey);\n  return definition ? definition.canSumAcrossTime : false;\n}\n\n/**\n * Kontrollerar om en metric kan summeras över sidor\n * @param {string} metricKey - Metric att kontrollera\n * @returns {boolean} - True om metric kan summeras över sidor\n */\nexport function canSumAcrossPages(metricKey) {\n  const definition = getMetricDefinition(metricKey);\n  return definition ? definition.canSumAcrossPages : false;\n}\n\n/**\n * Hämtar föredragen aggregeringsmetod för en metric\n * @param {string} metricKey - Metric att kontrollera\n * @returns {string} - Föredragen aggregering ('sum', 'average', etc.)\n */\nexport function getPreferredAggregation(metricKey) {\n  const definition = getMetricDefinition(metricKey);\n  return definition ? definition.preferredAggregation : 'average';\n}\n\n/**\n * Hämtar alla giltiga aggregeringsmetoder för en metric\n * @param {string} metricKey - Metric att kontrollera\n * @returns {Array<string>} - Lista med giltiga aggregeringar\n */\nexport function getValidAggregations(metricKey) {\n  const definition = getMetricDefinition(metricKey);\n  return definition ? definition.validAggregations : ['average'];\n}\n\n/**\n * Kontrollerar om en aggregeringsmetod är giltig för en metric\n * @param {string} metricKey - Metric att kontrollera\n * @param {string} aggregation - Aggregeringsmetod att validera\n * @returns {boolean} - True om aggregeringen är giltig\n */\nexport function isValidAggregation(metricKey, aggregation) {\n  const validAggregations = getValidAggregations(metricKey);\n  return validAggregations.includes(aggregation);\n}\n\n/**\n * Hämtar alla metrics för en specifik kategori\n * @param {string} category - Kategori att filtrera på ('unique_persons' eller 'countable_events')\n * @returns {Array<string>} - Lista med metric-nycklar i kategorin\n */\nexport function getMetricsByCategory(category) {\n  return Object.keys(METRIC_DEFINITIONS).filter(key => \n    METRIC_DEFINITIONS[key].category === category\n  );\n}\n\n/**\n * Hämtar alla summerbara metrics\n * @returns {Array<string>} - Lista med summerbara metric-nycklar\n */\nexport function getSummerableMetrics() {\n  return getMetricsByCategory('countable_events');\n}\n\n/**\n * Hämtar alla icke-summerbara metrics\n * @returns {Array<string>} - Lista med icke-summerbara metric-nycklar\n */\nexport function getNonSummerableMetrics() {\n  return getMetricsByCategory('unique_persons');\n}\n\n/**\n * Validerar en aggregeringsoperation och ger feedback\n * @param {string} metricKey - Metric som ska aggregeras\n * @param {string} operation - Operation som ska utföras\n * @param {string} context - Kontext ('time' eller 'pages')\n * @returns {Object} - Valideringsresultat med feedback\n */\nexport function validateAggregationOperation(metricKey, operation, context = 'time') {\n  const definition = getMetricDefinition(metricKey);\n  \n  if (!definition) {\n    return {\n      isValid: false,\n      error: `Okänt metric: ${metricKey}`,\n      suggestion: null\n    };\n  }\n\n  const isValidOp = isValidAggregation(metricKey, operation);\n  \n  if (!isValidOp) {\n    const validOps = getValidAggregations(metricKey);\n    const preferred = getPreferredAggregation(metricKey);\n    \n    return {\n      isValid: false,\n      error: `Operation '${operation}' är inte giltig för ${definition.displayName}`,\n      suggestion: `Använd istället: ${preferred} (eller: ${validOps.join(', ')})`,\n      warningNote: definition.warningNote\n    };\n  }\n\n  // Specialkontroll för summering över tid\n  if ((operation === 'sum' || operation === 'total') && context === 'time') {\n    if (!definition.canSumAcrossTime) {\n      return {\n        isValid: false,\n        error: `${definition.displayName} kan ALDRIG summeras över månader`,\n        suggestion: `Använd genomsnitt istället: ${definition.preferredAggregation}`,\n        warningNote: definition.warningNote\n      };\n    }\n  }\n\n  // Specialkontroll för summering över sidor\n  if ((operation === 'sum' || operation === 'total') && context === 'pages') {\n    if (!definition.canSumAcrossPages) {\n      return {\n        isValid: false,\n        error: `${definition.displayName} kan inte summeras över sidor (överlappning okänd)`,\n        suggestion: `Använd genomsnitt istället: average`,\n        warningNote: 'Reach och Engaged Users kan överlappa mellan sidor'\n      };\n    }\n  }\n\n  return {\n    isValid: true,\n    error: null,\n    suggestion: null\n  };\n}\n\n/**\n * Genererar aggregeringsrekommendationer för en lista av metrics\n * @param {Array<string>} metricKeys - Lista med metrics att analysera\n * @param {string} context - Kontext ('time', 'pages', eller 'both')\n * @returns {Object} - Rekommendationer per metric\n */\nexport function generateAggregationRecommendations(metricKeys, context = 'both') {\n  const recommendations = {};\n  \n  for (const metricKey of metricKeys) {\n    const definition = getMetricDefinition(metricKey);\n    \n    if (!definition) {\n      recommendations[metricKey] = {\n        error: `Okänt metric: ${metricKey}`,\n        recommended: null\n      };\n      continue;\n    }\n\n    const rec = {\n      displayName: definition.displayName,\n      category: definition.category,\n      preferred: definition.preferredAggregation,\n      valid: definition.validAggregations,\n      canSumTime: definition.canSumAcrossTime,\n      canSumPages: definition.canSumAcrossPages,\n      warning: definition.warningNote\n    };\n\n    // Kontext-specifika rekommendationer\n    if (context === 'time') {\n      rec.recommendedForTime = definition.canSumAcrossTime ? 'sum' : 'average';\n    } else if (context === 'pages') {\n      rec.recommendedForPages = definition.canSumAcrossPages ? 'sum' : 'average';\n    } else if (context === 'both') {\n      rec.recommendedForTime = definition.canSumAcrossTime ? 'sum' : 'average';\n      rec.recommendedForPages = definition.canSumAcrossPages ? 'sum' : 'average';\n    }\n\n    recommendations[metricKey] = rec;\n  }\n  \n  return recommendations;\n}\n\n/**\n * Formaterar metric-värde för visning enligt dess typ\n * @param {string} metricKey - Metric-nyckel\n * @param {number} value - Värde att formatera\n * @returns {string} - Formaterat värde\n */\nexport function formatMetricValue(metricKey, value) {\n  const definition = getMetricDefinition(metricKey);\n  \n  if (!definition || value === null || value === undefined) {\n    return '-';\n  }\n\n  if (value === 0) {\n    return '0';\n  }\n\n  // Formatera numeriska värden med tusentalsavgränsare\n  if (typeof value === 'number' && definition.dataType === 'integer') {\n    const formatted = new Intl.NumberFormat('sv-SE').format(Math.round(value));\n    return `${formatted} ${definition.unit}`;\n  }\n\n  return String(value);\n}\n\n/**\n * Skapar en komplett metrisk rapport med alla definitioner och regler\n * @returns {Object} - Komplett metrisk dokumentation\n */\nexport function getMetricsDocumentation() {\n  return {\n    overview: {\n      totalMetrics: Object.keys(METRIC_DEFINITIONS).length,\n      summerableCount: getSummerableMetrics().length,\n      nonSummerableCount: getNonSummerableMetrics().length\n    },\n    categories: METRIC_CATEGORIES,\n    metrics: METRIC_DEFINITIONS,\n    rules: {\n      summerbara: {\n        metrics: getSummerableMetrics(),\n        description: 'Dessa metrics kan summeras över både månader och sidor',\n        operations: ['sum', 'average', 'min', 'max']\n      },\n      ickeSummerbara: {\n        metrics: getNonSummerableMetrics(),\n        description: 'Dessa metrics kan ALDRIG summeras - endast genomsnitt är meningsfullt',\n        operations: ['average', 'min', 'max'],\n        warning: 'Summering över tid eller sidor ger felaktiga resultat'\n      }\n    },\n    csvMapping: Object.fromEntries(\n      Object.entries(METRIC_DEFINITIONS).map(([key, def]) => [def.csvColumn, key])\n    )\n  };\n}\n\n/**\n * Validerar konsistens med reach_calculator.js definitioner\n * @returns {Object} - Konsistensrapport\n */\nexport function validateConsistencyWithReachCalculator() {\n  const errors = [];\n  const warnings = [];\n  \n  // Kontrollera att våra summerbara metrics matchar reach_calculator.js\n  const ourSummerable = getSummerableMetrics();\n  const reachCalcSummerable = SUMMABLE_METRICS;\n  \n  const missingSummerable = reachCalcSummerable.filter(m => !ourSummerable.includes(m));\n  const extraSummerable = ourSummerable.filter(m => !reachCalcSummerable.includes(m));\n  \n  if (missingSummerable.length > 0) {\n    errors.push(`Saknade summerbara metrics: ${missingSummerable.join(', ')}`);\n  }\n  \n  if (extraSummerable.length > 0) {\n    errors.push(`Extra summerbara metrics: ${extraSummerable.join(', ')}`);\n  }\n  \n  // Kontrollera icke-summerbara metrics\n  const ourNonSummerable = getNonSummerableMetrics();\n  const reachCalcNonSummerable = NON_SUMMABLE_METRICS;\n  \n  const missingNonSummerable = reachCalcNonSummerable.filter(m => !ourNonSummerable.includes(m));\n  const extraNonSummerable = ourNonSummerable.filter(m => !reachCalcNonSummerable.includes(m));\n  \n  if (missingNonSummerable.length > 0) {\n    errors.push(`Saknade icke-summerbara metrics: ${missingNonSummerable.join(', ')}`);\n  }\n  \n  if (extraNonSummerable.length > 0) {\n    errors.push(`Extra icke-summerbara metrics: ${extraNonSummerable.join(', ')}`);\n  }\n  \n  return {\n    isConsistent: errors.length === 0,\n    errors,\n    warnings\n  };\n}\n\n// Validera konsistens vid modul-load\nconst consistencyCheck = validateConsistencyWithReachCalculator();\nif (!consistencyCheck.isConsistent) {\n  console.error('KRITISK: metric_categorizer.js är inte konsistent med reach_calculator.js:', consistencyCheck.errors);\n}","/**\n * Timeseries Analytics\n * \n * Grundläggande analysverktyg och trend-beräkningar för Facebook API tidserie-data\n * Hanterar korrekt beräkning av trends med hänsyn till summerbara vs icke-summerbara metrics\n */\n\n/**\n * Beräknar procentuell förändring mellan två värden\n * @param {number} currentValue - Nuvarande värde\n * @param {number} previousValue - Föregående värde\n * @returns {number|null} - Procentuell förändring eller null om beräkning inte möjlig\n */\nexport function calculatePercentageChange(currentValue, previousValue) {\n  if (previousValue === 0 || previousValue === null || previousValue === undefined) {\n    return currentValue > 0 ? 100 : 0; // 100% ökning från 0, annars ingen förändring\n  }\n  \n  if (currentValue === null || currentValue === undefined) {\n    return null;\n  }\n\n  return ((currentValue - previousValue) / previousValue) * 100;\n}\n\n/**\n * Beräknar månad-för-månad trend för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric - Metric att analysera\n * @returns {Array<Object>} - Lista med trend-data\n */\nexport function calculateMonthToMonthTrend(pageTimeseries, metric) {\n  if (!pageTimeseries || !metric) {\n    throw new Error('calculateMonthToMonthTrend kräver PageTimeseries och metric');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length < 2) {\n    return []; // Behöver minst 2 månader för att beräkna trend\n  }\n\n  const trendData = [];\n\n  for (let i = 1; i < monthlyData.length; i++) {\n    const current = monthlyData[i];\n    const previous = monthlyData[i - 1];\n\n    const currentValue = current.metrics[metric];\n    const previousValue = previous.metrics[metric];\n    const percentageChange = calculatePercentageChange(currentValue, previousValue);\n\n    trendData.push({\n      period: current.getPeriod(),\n      previousPeriod: previous.getPeriod(),\n      currentValue,\n      previousValue,\n      absoluteChange: currentValue - previousValue,\n      percentageChange,\n      metric,\n      pageName: current.page.pageName,\n      pageId: current.page.pageId\n    });\n  }\n\n  return trendData;\n}\n\n/**\n * Beräknar genomsnittlig månadsförändring över en period\n * @param {Array<Object>} trendData - Trend-data från calculateMonthToMonthTrend\n * @returns {Object} - Genomsnittlig trend-statistik\n */\nexport function calculateAverageTrend(trendData) {\n  if (!trendData || trendData.length === 0) {\n    return {\n      averageAbsoluteChange: 0,\n      averagePercentageChange: 0,\n      totalPeriods: 0,\n      positiveMonths: 0,\n      negativeMonths: 0,\n      stableMonths: 0\n    };\n  }\n\n  let totalAbsolute = 0;\n  let totalPercentage = 0;\n  let validPercentageCount = 0;\n  let positiveMonths = 0;\n  let negativeMonths = 0;\n  let stableMonths = 0;\n\n  for (const trend of trendData) {\n    totalAbsolute += trend.absoluteChange;\n\n    if (trend.percentageChange !== null && !isNaN(trend.percentageChange)) {\n      totalPercentage += trend.percentageChange;\n      validPercentageCount++;\n\n      if (trend.percentageChange > 1) {\n        positiveMonths++;\n      } else if (trend.percentageChange < -1) {\n        negativeMonths++;\n      } else {\n        stableMonths++;\n      }\n    }\n  }\n\n  return {\n    averageAbsoluteChange: totalAbsolute / trendData.length,\n    averagePercentageChange: validPercentageCount > 0 ? totalPercentage / validPercentageCount : 0,\n    totalPeriods: trendData.length,\n    positiveMonths,\n    negativeMonths,\n    stableMonths\n  };\n}\n\n/**\n * Identifierar bäst och sämst presterande månader för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric - Metric att analysera\n * @returns {Object} - Bästa och sämsta prestationer\n */\nexport function findPerformanceExtremes(pageTimeseries, metric) {\n  if (!pageTimeseries || !metric) {\n    throw new Error('findPerformanceExtremes kräver PageTimeseries och metric');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return { best: null, worst: null };\n  }\n\n  let best = monthlyData[0];\n  let worst = monthlyData[0];\n\n  for (const data of monthlyData) {\n    const value = data.metrics[metric];\n    \n    if (value !== null && value !== undefined) {\n      if (best.metrics[metric] === null || value > best.metrics[metric]) {\n        best = data;\n      }\n      \n      if (worst.metrics[metric] === null || value < worst.metrics[metric]) {\n        worst = data;\n      }\n    }\n  }\n\n  return {\n    best: {\n      period: best.getPeriod(),\n      value: best.metrics[metric],\n      data: best\n    },\n    worst: {\n      period: worst.getPeriod(),\n      value: worst.metrics[metric],\n      data: worst\n    }\n  };\n}\n\n/**\n * Beräknar genomsnitt för en metric över en period\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric - Metric att beräkna genomsnitt för\n * @returns {number} - Genomsnittsvärde\n */\nexport function calculateMetricAverage(pageTimeseries, metric) {\n  if (!pageTimeseries || !metric) {\n    throw new Error('calculateMetricAverage kräver PageTimeseries och metric');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return 0;\n  }\n\n  let total = 0;\n  let validCount = 0;\n\n  for (const data of monthlyData) {\n    const value = data.metrics[metric];\n    if (value !== null && value !== undefined && !isNaN(value)) {\n      total += value;\n      validCount++;\n    }\n  }\n\n  return validCount > 0 ? total / validCount : 0;\n}\n\n/**\n * Beräknar total för summerbara metrics över en period\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric - Metric att summera (måste vara summerbar)\n * @returns {number} - Totalsumma\n */\nexport function calculateMetricTotal(pageTimeseries, metric) {\n  if (!pageTimeseries || !metric) {\n    throw new Error('calculateMetricTotal kräver PageTimeseries och metric');\n  }\n\n  // Kontrollera att metric är summerbar\n  const summerableMetrics = ['engagements', 'reactions', 'publications', 'status', 'comment'];\n  if (!summerableMetrics.includes(metric)) {\n    throw new Error(`Metric '${metric}' kan inte summeras över månader. Summerbara metrics: ${summerableMetrics.join(', ')}`);\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return 0;\n  }\n\n  let total = 0;\n\n  for (const data of monthlyData) {\n    const value = data.metrics[metric];\n    if (value !== null && value !== undefined && !isNaN(value)) {\n      total += value;\n    }\n  }\n\n  return total;\n}\n\n/**\n * Beräknar omfattande trend-analys för alla metrics för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @returns {Object} - Omfattande trend-analys\n */\nexport function calculateComprehensiveTrendAnalysis(pageTimeseries) {\n  if (!pageTimeseries) {\n    throw new Error('calculateComprehensiveTrendAnalysis kräver PageTimeseries');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length === 0) {\n    return {\n      pageName: pageTimeseries.page.pageName,\n      pageId: pageTimeseries.page.pageId,\n      totalPeriods: 0,\n      metrics: {}\n    };\n  }\n\n  // Alla tillgängliga metrics\n  const allMetrics = ['reach', 'engagedUsers', 'engagements', 'reactions', 'publications', 'status', 'comment'];\n  const metricsAnalysis = {};\n\n  for (const metric of allMetrics) {\n    const trendData = calculateMonthToMonthTrend(pageTimeseries, metric);\n    const averageTrend = calculateAverageTrend(trendData);\n    const extremes = findPerformanceExtremes(pageTimeseries, metric);\n    \n    // Beräkna total eller genomsnitt beroende på metric-typ\n    let aggregatedValue;\n    const summerableMetrics = ['engagements', 'reactions', 'publications', 'status', 'comment'];\n    \n    if (summerableMetrics.includes(metric)) {\n      aggregatedValue = {\n        type: 'total',\n        value: calculateMetricTotal(pageTimeseries, metric)\n      };\n    } else {\n      aggregatedValue = {\n        type: 'average',\n        value: calculateMetricAverage(pageTimeseries, metric)\n      };\n    }\n\n    metricsAnalysis[metric] = {\n      aggregated: aggregatedValue,\n      trend: averageTrend,\n      extremes,\n      monthlyTrends: trendData\n    };\n  }\n\n  return {\n    pageName: pageTimeseries.page.pageName,\n    pageId: pageTimeseries.page.pageId,\n    totalPeriods: monthlyData.length,\n    firstPeriod: monthlyData[0].getPeriod(),\n    lastPeriod: monthlyData[monthlyData.length - 1].getPeriod(),\n    metrics: metricsAnalysis\n  };\n}\n\n/**\n * Jämför prestanda mellan flera sidor för en specifik metric\n * @param {Array<PageTimeseries>} pageTimeseriesList - Lista med sidtidsserier\n * @param {string} metric - Metric att jämföra\n * @returns {Array<Object>} - Rankad lista med sidprestanda\n */\nexport function comparePagePerformance(pageTimeseriesList, metric) {\n  if (!pageTimeseriesList || pageTimeseriesList.length === 0 || !metric) {\n    throw new Error('comparePagePerformance kräver lista med PageTimeseries och metric');\n  }\n\n  const performances = [];\n\n  for (const pageTimeseries of pageTimeseriesList) {\n    if (pageTimeseries.getMonthCount() === 0) {\n      continue; // Hoppa över sidor utan data\n    }\n\n    const analysis = calculateComprehensiveTrendAnalysis(pageTimeseries);\n    const metricAnalysis = analysis.metrics[metric];\n\n    if (metricAnalysis) {\n      performances.push({\n        pageName: pageTimeseries.page.pageName,\n        pageId: pageTimeseries.page.pageId,\n        totalPeriods: analysis.totalPeriods,\n        aggregatedValue: metricAnalysis.aggregated.value,\n        aggregationType: metricAnalysis.aggregated.type,\n        averageTrend: metricAnalysis.trend.averagePercentageChange,\n        bestPerformance: metricAnalysis.extremes.best,\n        worstPerformance: metricAnalysis.extremes.worst\n      });\n    }\n  }\n\n  // Sortera efter aggregerat värde (högst först)\n  return performances.sort((a, b) => b.aggregatedValue - a.aggregatedValue);\n}\n\n/**\n * Beräknar korrelation mellan två metrics över tid för en sida\n * @param {PageTimeseries} pageTimeseries - Tidserie för en sida\n * @param {string} metric1 - Första metric\n * @param {string} metric2 - Andra metric\n * @returns {Object} - Korrelationsanalys\n */\nexport function calculateMetricCorrelation(pageTimeseries, metric1, metric2) {\n  if (!pageTimeseries || !metric1 || !metric2) {\n    throw new Error('calculateMetricCorrelation kräver PageTimeseries och två metrics');\n  }\n\n  const monthlyData = pageTimeseries.getAllMonthlyData();\n  if (monthlyData.length < 3) {\n    return {\n      correlation: null,\n      message: 'Behöver minst 3 datapunkter för korrelationsanalys'\n    };\n  }\n\n  const values1 = [];\n  const values2 = [];\n\n  for (const data of monthlyData) {\n    const val1 = data.metrics[metric1];\n    const val2 = data.metrics[metric2];\n    \n    if (val1 !== null && val1 !== undefined && !isNaN(val1) &&\n        val2 !== null && val2 !== undefined && !isNaN(val2)) {\n      values1.push(val1);\n      values2.push(val2);\n    }\n  }\n\n  if (values1.length < 3) {\n    return {\n      correlation: null,\n      message: 'Inte tillräckligt med giltiga datapunkter för båda metrics'\n    };\n  }\n\n  // Beräkna Pearson korrelationskoefficient\n  const mean1 = values1.reduce((sum, val) => sum + val, 0) / values1.length;\n  const mean2 = values2.reduce((sum, val) => sum + val, 0) / values2.length;\n\n  let numerator = 0;\n  let denominator1 = 0;\n  let denominator2 = 0;\n\n  for (let i = 0; i < values1.length; i++) {\n    const diff1 = values1[i] - mean1;\n    const diff2 = values2[i] - mean2;\n    \n    numerator += diff1 * diff2;\n    denominator1 += diff1 * diff1;\n    denominator2 += diff2 * diff2;\n  }\n\n  const correlation = numerator / Math.sqrt(denominator1 * denominator2);\n\n  return {\n    correlation: isNaN(correlation) ? 0 : correlation,\n    sampleSize: values1.length,\n    metric1,\n    metric2,\n    mean1,\n    mean2\n  };\n}","/**\n * Timeseries Models\n * \n * Datastrukturer för Facebook API tidserie-analys\n * Hanterar Facebook-sidor och månadsdata med korrekt typning och validering\n */\n\n/**\n * Facebook-sida datastruktur\n * Representerar en enskild Facebook-sida med all grundläggande information\n */\nexport class FacebookPage {\n  constructor(pageName, pageId) {\n    if (!pageName || !pageId) {\n      throw new Error('FacebookPage kräver både pageName och pageId');\n    }\n    \n    this.pageName = pageName.trim();\n    this.pageId = String(pageId).trim();\n    this.createdAt = new Date();\n  }\n\n  /**\n   * Skapar en Facebook-sida från CSV-rad\n   * @param {Object} csvRow - Rad från parsad CSV\n   * @returns {FacebookPage} - Ny FacebookPage instans\n   */\n  static fromCSVRow(csvRow) {\n    if (!csvRow.Page || !csvRow['Page ID']) {\n      throw new Error('CSV-rad saknar obligatoriska fält: Page eller Page ID');\n    }\n    \n    return new FacebookPage(csvRow.Page, csvRow['Page ID']);\n  }\n\n  /**\n   * Returnerar unik nyckel för denna sida\n   * @returns {string} - Unik identifierare\n   */\n  getKey() {\n    return `page_${this.pageId}`;\n  }\n\n  /**\n   * Validerar att sidan är giltig\n   * @returns {boolean} - True om sidan är giltig\n   */\n  isValid() {\n    return this.pageName.length > 0 && this.pageId.length > 0;\n  }\n}\n\n/**\n * Månadsdata för en specifik Facebook-sida\n * Innehåller alla metrics för en sida under en månad\n */\nexport class MonthlyPageData {\n  constructor(page, year, month, metrics) {\n    if (!(page instanceof FacebookPage)) {\n      throw new Error('MonthlyPageData kräver en FacebookPage instans');\n    }\n    \n    if (!year || !month || month < 1 || month > 12) {\n      throw new Error('MonthlyPageData kräver giltigt år och månad (1-12)');\n    }\n\n    this.page = page;\n    this.year = parseInt(year);\n    this.month = parseInt(month);\n    this.metrics = this.validateMetrics(metrics || {});\n    this.createdAt = new Date();\n  }\n\n  /**\n   * Validerar och standardiserar metrics\n   * @param {Object} rawMetrics - Rå metrics från CSV\n   * @returns {Object} - Validerade metrics\n   */\n  validateMetrics(rawMetrics) {\n    const metrics = {\n      // Icke-summerbara metrics (unika personer per månad)\n      reach: this.parseNumeric(rawMetrics.reach || rawMetrics.Reach),\n      engagedUsers: this.parseNumeric(rawMetrics.engagedUsers || rawMetrics['Engaged Users']),\n      \n      // Summerbara metrics (kan adderas över månader)\n      engagements: this.parseNumeric(rawMetrics.engagements || rawMetrics.Engagements),\n      reactions: this.parseNumeric(rawMetrics.reactions || rawMetrics.Reactions),\n      publications: this.parseNumeric(rawMetrics.publications || rawMetrics.Publications),\n      status: this.parseNumeric(rawMetrics.status || rawMetrics.Status),\n      comment: this.parseNumeric(rawMetrics.comment || rawMetrics.Comment)\n    };\n\n    return metrics;\n  }\n\n  /**\n   * Parsar numeriska värden säkert\n   * @param {any} value - Värde att parsa\n   * @returns {number} - Parsad numerisk värde eller 0\n   */\n  parseNumeric(value) {\n    if (value === null || value === undefined || value === '') return 0;\n    const parsed = parseFloat(String(value).replace(/,/g, ''));\n    return isNaN(parsed) ? 0 : parsed;\n  }\n\n  /**\n   * Skapar MonthlyPageData från CSV-rad\n   * @param {Object} csvRow - Rad från parsad CSV\n   * @param {number} year - År för denna data\n   * @param {number} month - Månad för denna data\n   * @returns {MonthlyPageData} - Ny MonthlyPageData instans\n   */\n  static fromCSVRow(csvRow, year, month) {\n    const page = FacebookPage.fromCSVRow(csvRow);\n    return new MonthlyPageData(page, year, month, csvRow);\n  }\n\n  /**\n   * Returnerar unik nyckel för denna månadsdata\n   * @returns {string} - Unik identifierare\n   */\n  getKey() {\n    return `${this.page.getKey()}_${this.year}_${this.month}`;\n  }\n\n  /**\n   * Returnerar period som objekt\n   * @returns {Object} - Period objekt {year, month}\n   */\n  getPeriod() {\n    return {\n      year: this.year,\n      month: this.month\n    };\n  }\n\n  /**\n   * Kontrollerar om detta är samma period som angiven\n   * @param {number} year - År att jämföra\n   * @param {number} month - Månad att jämföra\n   * @returns {boolean} - True om samma period\n   */\n  isSamePeriod(year, month) {\n    return this.year === year && this.month === month;\n  }\n\n  /**\n   * Returnerar summerbara metrics (kan adderas över månader)\n   * @returns {Object} - Summerbara metrics\n   */\n  getSummerableMetrics() {\n    return {\n      engagements: this.metrics.engagements,\n      reactions: this.metrics.reactions,\n      publications: this.metrics.publications,\n      status: this.metrics.status,\n      comment: this.metrics.comment\n    };\n  }\n\n  /**\n   * Returnerar icke-summerbara metrics (unika personer per månad)\n   * @returns {Object} - Icke-summerbara metrics\n   */\n  getNonSummerableMetrics() {\n    return {\n      reach: this.metrics.reach,\n      engagedUsers: this.metrics.engagedUsers\n    };\n  }\n}\n\n/**\n * Tidserie-container för en Facebook-sida\n * Innehåller all månadsdata för en sida över tid\n */\nexport class PageTimeseries {\n  constructor(page) {\n    if (!(page instanceof FacebookPage)) {\n      throw new Error('PageTimeseries kräver en FacebookPage instans');\n    }\n    \n    this.page = page;\n    this.monthlyData = new Map(); // Map<string, MonthlyPageData>\n    this.createdAt = new Date();\n  }\n\n  /**\n   * Lägger till månadsdata för denna sida\n   * @param {MonthlyPageData} monthlyData - Månadsdata att lägga till\n   */\n  addMonthlyData(monthlyData) {\n    if (!(monthlyData instanceof MonthlyPageData)) {\n      throw new Error('addMonthlyData kräver MonthlyPageData instans');\n    }\n\n    if (monthlyData.page.pageId !== this.page.pageId) {\n      throw new Error('MonthlyData måste tillhöra samma sida');\n    }\n\n    const key = `${monthlyData.year}_${monthlyData.month}`;\n    this.monthlyData.set(key, monthlyData);\n  }\n\n  /**\n   * Hämtar månadsdata för specifik period\n   * @param {number} year - År\n   * @param {number} month - Månad\n   * @returns {MonthlyPageData|null} - Månadsdata eller null om inte finns\n   */\n  getMonthlyData(year, month) {\n    const key = `${year}_${month}`;\n    return this.monthlyData.get(key) || null;\n  }\n\n  /**\n   * Returnerar alla månader som har data\n   * @returns {Array<{year: number, month: number}>} - Lista med perioder\n   */\n  getAvailablePeriods() {\n    return Array.from(this.monthlyData.values())\n      .map(data => data.getPeriod())\n      .sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.month - b.month;\n      });\n  }\n\n  /**\n   * Returnerar alla månadsdata sorterat kronologiskt\n   * @returns {Array<MonthlyPageData>} - Sorterad lista med månadsdata\n   */\n  getAllMonthlyData() {\n    return Array.from(this.monthlyData.values())\n      .sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.month - b.month;\n      });\n  }\n\n  /**\n   * Kontrollerar om sidan har data för specifik period\n   * @param {number} year - År\n   * @param {number} month - Månad\n   * @returns {boolean} - True om data finns\n   */\n  hasDataForPeriod(year, month) {\n    return this.getMonthlyData(year, month) !== null;\n  }\n\n  /**\n   * Returnerar antal månader med data\n   * @returns {number} - Antal månader\n   */\n  getMonthCount() {\n    return this.monthlyData.size;\n  }\n}\n\n/**\n * Huvudcontainer för all tidserie-data\n * Hanterar flera Facebook-sidor över tid\n */\nexport class TimeseriesDataset {\n  constructor() {\n    this.pageTimeseries = new Map(); // Map<string, PageTimeseries>\n    this.createdAt = new Date();\n  }\n\n  /**\n   * Lägger till månadsdata för en sida\n   * @param {MonthlyPageData} monthlyData - Månadsdata att lägga till\n   */\n  addMonthlyData(monthlyData) {\n    if (!(monthlyData instanceof MonthlyPageData)) {\n      throw new Error('addMonthlyData kräver MonthlyPageData instans');\n    }\n\n    const pageKey = monthlyData.page.getKey();\n    \n    if (!this.pageTimeseries.has(pageKey)) {\n      this.pageTimeseries.set(pageKey, new PageTimeseries(monthlyData.page));\n    }\n\n    this.pageTimeseries.get(pageKey).addMonthlyData(monthlyData);\n  }\n\n  /**\n   * Hämtar tidserie för en specifik sida\n   * @param {string} pageId - Sido-ID\n   * @returns {PageTimeseries|null} - Sidtidserie eller null\n   */\n  getPageTimeseries(pageId) {\n    const pageKey = `page_${pageId}`;\n    return this.pageTimeseries.get(pageKey) || null;\n  }\n\n  /**\n   * Returnerar alla sidor som har data\n   * @returns {Array<FacebookPage>} - Lista med sidor\n   */\n  getAllPages() {\n    return Array.from(this.pageTimeseries.values())\n      .map(timeseries => timeseries.page)\n      .sort((a, b) => a.pageName.localeCompare(b.pageName));\n  }\n\n  /**\n   * Returnerar alla unika perioder i datasetet\n   * @returns {Array<{year: number, month: number}>} - Lista med perioder\n   */\n  getAllPeriods() {\n    const periodsSet = new Set();\n    \n    for (const timeseries of this.pageTimeseries.values()) {\n      for (const period of timeseries.getAvailablePeriods()) {\n        periodsSet.add(`${period.year}_${period.month}`);\n      }\n    }\n\n    return Array.from(periodsSet)\n      .map(key => {\n        const [year, month] = key.split('_');\n        return { year: parseInt(year), month: parseInt(month) };\n      })\n      .sort((a, b) => {\n        if (a.year !== b.year) return a.year - b.year;\n        return a.month - b.month;\n      });\n  }\n\n  /**\n   * Returnerar alla sidor för en specifik period\n   * @param {number} year - År\n   * @param {number} month - Månad\n   * @returns {Array<MonthlyPageData>} - Lista med månadsdata\n   */\n  getDataForPeriod(year, month) {\n    const result = [];\n    \n    for (const timeseries of this.pageTimeseries.values()) {\n      const monthlyData = timeseries.getMonthlyData(year, month);\n      if (monthlyData) {\n        result.push(monthlyData);\n      }\n    }\n\n    return result.sort((a, b) => a.page.pageName.localeCompare(b.page.pageName));\n  }\n\n  /**\n   * Returnerar statistik om datasetet\n   * @returns {Object} - Dataset-statistik\n   */\n  getStats() {\n    return {\n      totalPages: this.pageTimeseries.size,\n      totalPeriods: this.getAllPeriods().length,\n      totalDataPoints: Array.from(this.pageTimeseries.values())\n        .reduce((sum, timeseries) => sum + timeseries.getMonthCount(), 0)\n    };\n  }\n\n  /**\n   * Rensar all data\n   */\n  clear() {\n    this.pageTimeseries.clear();\n  }\n}","import React, { useState, useMemo } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { TrendingUp, TrendingDown, Activity, LineChart, BarChart3 } from 'lucide-react';\nimport { METRIC_DEFINITIONS } from '../utils/metric_categorizer';\nimport { calculateMonthToMonthTrend, calculateAverageTrend } from '../services/timeseries_analytics';\nimport { TimeseriesDataset } from '../core/timeseries_models';\n\n// ENDAST dessa fyra metrics som ska visas\nconst ALLOWED_METRICS = [\n  { key: 'reach', label: 'Räckvidd', canSum: false },\n  { key: 'engagements', label: 'Engagemang', canSum: true },\n  { key: 'reactions', label: 'Reaktioner', canSum: true },\n  { key: 'publications', label: 'Publiceringar', canSum: true }\n];\n\n// FÖRBÄTTRADE FÄRGER - tydligt åtskilda färger som tilldelas i ordning\nconst CHART_COLORS = [\n  '#2563EB', // Blå\n  '#16A34A', // Grön\n  '#EAB308', // Gul/guld\n  '#DC2626', // Röd\n  '#7C3AED', // Lila\n  '#EA580C', // Orange\n  '#0891B2', // Cyan\n  '#BE185D', // Rosa/magenta\n  '#059669', // Emerald\n  '#7C2D12', // Brun\n  '#4338CA', // Indigo\n  '#C2410C'  // Orange-röd\n];\n\nconst TrendAnalysisView = ({ uploadedPeriods }) => {\n  // State för linjediagram - INGA DEFAULT-VAL\n  const [selectedMetric, setSelectedMetric] = useState('reach');\n  const [selectedPages, setSelectedPages] = useState([]);\n  const [selectedPeriods, setSelectedPeriods] = useState([]);\n  const [hoveredDataPoint, setHoveredDataPoint] = useState(null);\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n\n  // State för trendanalys\n  const [showDetailedTrends, setShowDetailedTrends] = useState(false);\n\n  // Skapa dataset från uppladdade perioder\n  const dataset = useMemo(() => {\n    if (!uploadedPeriods || uploadedPeriods.length === 0) {\n      return null;\n    }\n    return new TimeseriesDataset(uploadedPeriods);\n  }, [uploadedPeriods]);\n\n  // Få alla unika sidor från uploadedPeriods (samma metod som PageTimeseriesView)\n  const availablePages = useMemo(() => {\n    if (!uploadedPeriods || uploadedPeriods.length === 0) {\n      return [];\n    }\n    \n    // Samla alla unika sidor från alla perioder (samma logik som PageTimeseriesView)\n    const pagesMap = new Map();\n    \n    uploadedPeriods.forEach(period => {\n      if (period.data && Array.isArray(period.data)) {\n        period.data.forEach(csvRow => {\n          const pageName = csvRow.Page || csvRow.page || 'Okänd sida';\n          const pageId = csvRow['Page ID'] || csvRow.pageId || `page_${pageName.replace(/\\s+/g, '_')}`;\n          \n          if (!pagesMap.has(pageId)) {\n            pagesMap.set(pageId, {\n              pageId,\n              pageName\n            });\n          }\n        });\n      }\n    });\n    \n    return Array.from(pagesMap.values()).sort((a, b) => \n      a.pageName.localeCompare(b.pageName)\n    );\n  }, [uploadedPeriods]);\n\n  // Få alla tillgängliga perioder sorterade\n  const availablePeriods = useMemo(() => {\n    if (!uploadedPeriods) return [];\n    \n    return uploadedPeriods\n      .map(period => ({\n        ...period,\n        sortKey: period.year * 100 + period.month\n      }))\n      .sort((a, b) => a.sortKey - b.sortKey);\n  }, [uploadedPeriods]);\n\n  // Månadsnamn för X-axel\n  const getMonthName = (month) => {\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', \n                   'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec'];\n    return months[month - 1] || month.toString();\n  };\n\n  // Mappa metric-nycklar till exakta CSV-kolumnnamn\n  const getCSVColumnName = (metricKey) => {\n    const mapping = {\n      'reach': 'Reach',\n      'engagements': 'Engagements', \n      'reactions': 'Reactions',\n      'publications': 'Publications'\n    };\n    return mapping[metricKey] || metricKey;\n  };\n\n  // FÖRBÄTTRAD FÄRGVAL - tilldela färger baserat på ordning av valda sidor\n  const getPageColor = (pageId, selectedPageIds) => {\n    const index = selectedPageIds.indexOf(pageId);\n    return index >= 0 ? CHART_COLORS[index % CHART_COLORS.length] : CHART_COLORS[0];\n  };\n\n  // PNG-export funktion för PPT-optimerad graf MED KONTOINFORMATION OCH LEGENDA\n  const exportChartAsPNG = () => {\n    const svg = document.querySelector('#trend-chart-svg');\n    if (!svg || chartLines.length === 0) return;\n\n    // Skapa en canvas för export\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    \n    // Optimal PPT-storlek: 16:9 ratio, högre upplösning\n    const width = 1920;\n    const height = 1080;\n    canvas.width = width;\n    canvas.height = height;\n    \n    // Vit bakgrund för PPT\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    \n    // Konvertera SVG till PNG via HTML5 Canvas\n    const svgData = new XMLSerializer().serializeToString(svg);\n    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    const URL = window.URL || window.webkitURL;\n    const svgUrl = URL.createObjectURL(svgBlob);\n    \n    const img = new Image();\n    img.onload = () => {\n      // Rita SVG på canvas med skalning för bättre kvalitet\n      ctx.drawImage(img, 0, 150, width, height - 400); // Mer plats för titel och legenda\n      \n      // Lägg till prominent titel\n      ctx.fillStyle = '#1f2937';\n      ctx.font = 'bold 48px Arial, sans-serif';\n      ctx.textAlign = 'center';\n      const title = `Utveckling över tid - ${METRIC_DEFINITIONS[selectedMetric]?.displayName}`;\n      ctx.fillText(title, width / 2, 80);\n      \n      // LÄGG TILL FÄRGKODAD LEGENDA\n      ctx.fillStyle = '#4b5563';\n      ctx.font = 'bold 32px Arial, sans-serif';\n      ctx.textAlign = 'left';\n      \n      // Beräkna legenda-layout\n      const legendStartY = height - 200;\n      const legendItemHeight = 40;\n      const circleRadius = 12;\n      const circleTextGap = 20;\n      const maxItemsPerColumn = 4;\n      const columnWidth = width / Math.ceil(chartLines.length / maxItemsPerColumn);\n      \n      chartLines.forEach((line, index) => {\n        const column = Math.floor(index / maxItemsPerColumn);\n        const row = index % maxItemsPerColumn;\n        \n        const x = 100 + (column * columnWidth);\n        const y = legendStartY + (row * legendItemHeight);\n        \n        // Rita färgcirkel\n        ctx.fillStyle = line.color;\n        ctx.beginPath();\n        ctx.arc(x, y, circleRadius, 0, 2 * Math.PI);\n        ctx.fill();\n        \n        // Rita vit kant runt cirkeln\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        \n        // Rita kontonamn\n        ctx.fillStyle = '#1f2937';\n        ctx.font = '28px Arial, sans-serif';\n        ctx.fillText(line.pageName, x + circleRadius + circleTextGap, y + 8);\n      });\n      \n      // Exportera som PNG\n      canvas.toBlob((blob) => {\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        \n        // Inkludera kontonamn i filnamnet\n        const selectedPageNames = chartLines.map(line => line.pageName);\n        const kontoSuffix = selectedPageNames.length === 1 \n          ? selectedPageNames[0].replace(/[^a-zA-Z0-9]/g, '-')\n          : `${selectedPageNames.length}-konton`;\n        a.download = `trend-analys-${selectedMetric}-${kontoSuffix}-${new Date().toISOString().slice(0, 10)}.png`;\n        \n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n      }, 'image/png', 1.0);\n      \n      URL.revokeObjectURL(svgUrl);\n    };\n    img.src = svgUrl;\n  };\n\n  // Hantera sidval med checkboxar (samma som andra flikar)\n  const handlePageToggle = (pageId) => {\n    setSelectedPages(current => \n      current.includes(pageId) \n        ? current.filter(id => id !== pageId)\n        : [...current, pageId]\n    );\n  };\n\n  // Hantera metric-val med radio buttons\n  const handleMetricToggle = (metricKey) => {\n    setSelectedMetric(metricKey);\n  };\n\n  // Hantera periodval\n  const handlePeriodToggle = (period) => {\n    const periodKey = `${period.year}-${period.month}`;\n    setSelectedPeriods(current => {\n      const exists = current.find(p => `${p.year}-${p.month}` === periodKey);\n      return exists \n        ? current.filter(p => `${p.year}-${p.month}` !== periodKey)\n        : [...current, period];\n    });\n  };\n\n  // Beräkna om alla perioder är valda - FIXAD LOGIK\n  const allPeriodsSelected = useMemo(() => {\n    return selectedPeriods.length > 0 && selectedPeriods.length === availablePeriods.length;\n  }, [selectedPeriods.length, availablePeriods.length]);\n  \n  const handleToggleAllPeriods = () => {\n    if (allPeriodsSelected) {\n      setSelectedPeriods([]); // Avmarkera alla\n    } else {\n      setSelectedPeriods(availablePeriods); // Markera alla\n    }\n  };\n\n  // Generera linjediagram-data - KRÄVER BÅDE SIDOR OCH PERIODER\n  const generateChartData = useMemo(() => {\n    if (!uploadedPeriods || selectedPages.length === 0 || selectedPeriods.length === 0) {\n      return [];\n    }\n\n    const chartPoints = [];\n    // FIXAT: Använd endast valda perioder, INGEN fallback till availablePeriods\n    const periodsToShow = selectedPeriods;\n    \n    periodsToShow.forEach(period => {\n      if (period.data && Array.isArray(period.data)) {\n        selectedPages.forEach(pageId => {\n          const csvRow = period.data.find(row => {\n            const rowPageId = row['Page ID'] || row.pageId || `page_${(row.Page || row.page || '').replace(/\\s+/g, '_')}`;\n            return rowPageId === pageId;\n          });\n          \n          if (csvRow) {\n            // Läs värde från rätt CSV-kolumn\n            const csvColumnName = getCSVColumnName(selectedMetric);\n            const rawValue = csvRow[csvColumnName];\n            \n            // Hantera olika format för numeriska värden\n            let value = 0;\n            if (rawValue !== null && rawValue !== undefined && rawValue !== '') {\n              // Ta bort kommatecken och andra formateringstecken\n              const cleanValue = String(rawValue).replace(/[,\\s]/g, '');\n              value = parseFloat(cleanValue) || 0;\n            }\n            \n            chartPoints.push({\n              periodKey: `${period.year}-${period.month.toString().padStart(2, '0')}`,\n              period: `${getMonthName(period.month)} ${period.year}`,\n              month: getMonthName(period.month),\n              year: period.year,\n              pageId,\n              pageName: csvRow.Page || csvRow.page || 'Okänd sida',\n              value,\n              metric: selectedMetric\n            });\n          }\n        });\n      }\n    });\n\n    return chartPoints;\n  }, [uploadedPeriods, selectedPages, selectedPeriods, selectedMetric]);\n\n  // Gruppera data per sida för linjediagram\n  const chartLines = useMemo(() => {\n    const groupedByPage = new Map();\n    \n    generateChartData.forEach(point => {\n      if (!groupedByPage.has(point.pageId)) {\n        groupedByPage.set(point.pageId, {\n          pageId: point.pageId,\n          pageName: point.pageName,\n          points: [],\n          color: getPageColor(point.pageId, selectedPages) // Använd förbättrad färgval\n        });\n      }\n      groupedByPage.get(point.pageId).points.push(point);\n    });\n\n    // Sortera punkter per period för varje linje\n    groupedByPage.forEach(line => {\n      line.points.sort((a, b) => a.periodKey.localeCompare(b.periodKey));\n    });\n\n    return Array.from(groupedByPage.values());\n  }, [generateChartData, selectedPages]);\n\n  // Beräkna Y-axel range\n  const yAxisRange = useMemo(() => {\n    if (generateChartData.length === 0) return { min: 0, max: 100 };\n    \n    const values = generateChartData.map(d => d.value);\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const padding = (max - min) * 0.1 || 10;\n    \n    return {\n      min: Math.max(0, min - padding),\n      max: max + padding\n    };\n  }, [generateChartData]);\n\n  // MJUK KURV-FUNKTION (Catmull-Rom spline)\n  const createSmoothPath = (points) => {\n    if (points.length < 2) return '';\n    \n    // För få punkter för mjuk kurva, använd vanlig linje\n    if (points.length === 2) {\n      const [p1, p2] = points;\n      return `M ${p1.x} ${p1.y} L ${p2.x} ${p2.y}`;\n    }\n    \n    // Skapa mjuk kurva med quadratic Bézier curves\n    let path = `M ${points[0].x} ${points[0].y}`;\n    \n    for (let i = 1; i < points.length; i++) {\n      const current = points[i];\n      const previous = points[i - 1];\n      \n      if (i === 1) {\n        // Första kurvan\n        const next = points[i + 1] || current;\n        const cp1x = previous.x + (current.x - previous.x) * 0.3;\n        const cp1y = previous.y + (current.y - previous.y) * 0.3;\n        const cp2x = current.x - (next.x - previous.x) * 0.1;\n        const cp2y = current.y - (next.y - previous.y) * 0.1;\n        \n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\n      } else if (i === points.length - 1) {\n        // Sista kurvan\n        const beforePrev = points[i - 2] || previous;\n        const cp1x = previous.x + (current.x - beforePrev.x) * 0.1;\n        const cp1y = previous.y + (current.y - beforePrev.y) * 0.1;\n        const cp2x = current.x - (current.x - previous.x) * 0.3;\n        const cp2y = current.y - (current.y - previous.y) * 0.3;\n        \n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\n      } else {\n        // Mellanliggande kurvor\n        const next = points[i + 1];\n        const beforePrev = points[i - 2] || previous;\n        const cp1x = previous.x + (current.x - beforePrev.x) * 0.1;\n        const cp1y = previous.y + (current.y - beforePrev.y) * 0.1;\n        const cp2x = current.x - (next.x - previous.x) * 0.1;\n        const cp2y = current.y - (next.y - previous.y) * 0.1;\n        \n        path += ` C ${cp1x} ${cp1y}, ${cp2x} ${cp2y}, ${current.x} ${current.y}`;\n      }\n    }\n    \n    return path;\n  };\n\n  // Hantera mouse events för tooltip\n  const handleMouseMove = (event, point) => {\n    const rect = event.currentTarget.getBoundingClientRect();\n    setMousePosition({\n      x: event.clientX - rect.left,\n      y: event.clientY - rect.top\n    });\n    setHoveredDataPoint(point);\n  };\n\n  // Beräkna trendstatistik för alla sidor\n  const trendStatistics = useMemo(() => {\n    if (!dataset) return [];\n\n    const stats = [];\n    \n    availablePages.forEach(page => {\n      const timeseries = dataset.getPageTimeseries(page.pageId);\n      if (!timeseries) return;\n\n      const trendData = calculateMonthToMonthTrend(timeseries, selectedMetric);\n      const avgTrend = calculateAverageTrend(trendData);\n      \n      if (trendData.length > 0) {\n        stats.push({\n          page,\n          trendData,\n          avgTrend,\n          totalPeriods: trendData.length + 1,\n          latestChange: trendData[trendData.length - 1]\n        });\n      }\n    });\n\n    return stats.sort((a, b) => b.avgTrend.averagePercentageChange - a.avgTrend.averagePercentageChange);\n  }, [dataset, availablePages, selectedMetric]);\n\n  if (!uploadedPeriods || uploadedPeriods.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <TrendingUp className=\"h-5 w-5\" />\n            Trendanalys\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-muted-foreground\">\n            Ladda upp minst två månadsfiler för att se trendanalys.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Linjediagram-sektion */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <LineChart className=\"h-5 w-5\" />\n            Utveckling över tid\n          </CardTitle>\n          <div className=\"flex gap-2\">\n            <Button onClick={exportChartAsPNG} variant=\"outline\" size=\"sm\" disabled={chartLines.length === 0}>\n              📊 Exportera PNG\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          {/* Kontroller FÖRST - KORREKT ORDNING: Sidor, Datapunkt, Perioder */}\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            {/* FÖRSTA: Sidval med checkboxar (samma som andra flikar) */}\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Välj Facebook-sidor ({selectedPages.length} valda)</label>\n              <div className=\"max-h-32 overflow-y-auto border rounded p-2 space-y-1\">\n                {availablePages.map(page => {\n                  const isSelected = selectedPages.includes(page.pageId);\n                  \n                  return (\n                    <label key={page.pageId} className=\"flex items-center gap-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => handlePageToggle(page.pageId)}\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\n                      />\n                      <span className=\"text-sm font-medium\">{page.pageName}</span>\n                    </label>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* ANDRA: Datapunkt-väljare - UTAN summerings-kommentar för reach */}\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Välj datapunkt</label>\n              <div className=\"space-y-2\">\n                {ALLOWED_METRICS.map(metric => {\n                  const isSelected = selectedMetric === metric.key;\n                  \n                  return (\n                    <label key={metric.key} className=\"flex items-center gap-2 cursor-pointer\">\n                      <input\n                        type=\"radio\"\n                        name=\"metric\"\n                        checked={isSelected}\n                        onChange={() => handleMetricToggle(metric.key)}\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 focus:ring-facebook-500\"\n                      />\n                      <span className=\"text-sm font-medium\">{metric.label}</span>\n                    </label>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* TREDJE: Periodval med \"Välj alla\" checkbox - FIXAD RÄKNING */}\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Välj perioder ({selectedPeriods.length} valda)</label>\n              \n              {/* Välj alla checkbox */}\n              <label className=\"flex items-center gap-2 cursor-pointer mb-2 p-2 bg-gray-50 rounded\">\n                <input\n                  type=\"checkbox\"\n                  checked={allPeriodsSelected}\n                  onChange={handleToggleAllPeriods}\n                  className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\n                />\n                <span className=\"text-sm font-medium\">Välj alla perioder</span>\n              </label>\n\n              <div className=\"max-h-32 overflow-y-auto border rounded p-2 space-y-1\">\n                {availablePeriods.map(period => {\n                  const isSelected = selectedPeriods.some(p => p.year === period.year && p.month === period.month);\n                  \n                  return (\n                    <label key={`${period.year}-${period.month}`} className=\"flex items-center gap-2 cursor-pointer\">\n                      <input\n                        type=\"checkbox\"\n                        checked={isSelected}\n                        onChange={() => handlePeriodToggle(period)}\n                        className=\"h-4 w-4 text-facebook-500 border-gray-300 rounded focus:ring-facebook-500\"\n                      />\n                      <span className=\"text-sm font-medium\">\n                        {getMonthName(period.month)} {period.year}\n                      </span>\n                    </label>\n                  );\n                })}\n              </div>\n            </div>\n          </div>\n\n          {/* PROMINENT DATAPUNKT-VISNING - FLYTTAD EFTER KONTROLLER */}\n          {selectedMetric && (\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n              <h3 className=\"text-lg font-bold text-blue-900\">\n                Visar: {METRIC_DEFINITIONS[selectedMetric]?.displayName}\n              </h3>\n              <p className=\"text-sm text-blue-700 mt-1\">\n                Aktuell datapunkt som visas i diagrammet\n              </p>\n            </div>\n          )}\n\n          {/* Linjediagram */}\n          {chartLines.length > 0 ? (\n            <div className=\"space-y-4\">\n              {/* Legenda */}\n              <div className=\"flex flex-wrap gap-3\">\n                {chartLines.map(line => (\n                  <div key={line.pageId} className=\"flex items-center gap-2\">\n                    <div \n                      className=\"w-3 h-3 rounded-full border\"\n                      style={{ backgroundColor: line.color }}\n                    />\n                    <span className=\"text-sm font-medium\">{line.pageName}</span>\n                  </div>\n                ))}\n              </div>\n\n              {/* SVG Diagram - STÖRRE STORLEK */}\n              <div className=\"relative\">\n                <svg \n                  id=\"trend-chart-svg\"\n                  width=\"100%\" \n                  height=\"500\" \n                  viewBox=\"0 0 1000 500\"\n                  className=\"border rounded bg-gray-50\"\n                  onMouseLeave={() => setHoveredDataPoint(null)}\n                >\n                  {/* Grid-linjer */}\n                  <defs>\n                    <pattern id=\"grid\" width=\"50\" height=\"50\" patternUnits=\"userSpaceOnUse\">\n                      <path d=\"M 50 0 L 0 0 0 50\" fill=\"none\" stroke=\"#e5e7eb\" strokeWidth=\"1\"/>\n                    </pattern>\n                  </defs>\n                  <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n\n                  {/* Y-axel värden */}\n                  {[0, 25, 50, 75, 100].map(percent => {\n                    const yPos = 450 - (percent / 100) * 380;\n                    const value = yAxisRange.min + (percent / 100) * (yAxisRange.max - yAxisRange.min);\n                    return (\n                      <g key={percent}>\n                        <line x1=\"70\" y1={yPos} x2=\"930\" y2={yPos} stroke=\"#d1d5db\" strokeWidth=\"1\"/>\n                        <text x=\"65\" y={yPos + 4} textAnchor=\"end\" fontSize=\"14\" fill=\"#6b7280\">\n                          {Math.round(value).toLocaleString()}\n                        </text>\n                      </g>\n                    );\n                  })}\n\n                  {/* X-axel månader */}\n                  {availablePeriods.map((period, index) => {\n                    const xPos = 70 + (index / Math.max(1, availablePeriods.length - 1)) * 860;\n                    return (\n                      <g key={`${period.year}-${period.month}`}>\n                        <line x1={xPos} y1=\"70\" x2={xPos} y2=\"450\" stroke=\"#d1d5db\" strokeWidth=\"1\"/>\n                        <text x={xPos} y=\"475\" textAnchor=\"middle\" fontSize=\"14\" fill=\"#6b7280\">\n                          {getMonthName(period.month)}\n                        </text>\n                        <text x={xPos} y=\"490\" textAnchor=\"middle\" fontSize=\"12\" fill=\"#9ca3af\">\n                          {period.year}\n                        </text>\n                      </g>\n                    );\n                  })}\n\n                  {/* MJUKA KURVORNA */}\n                  {chartLines.map(line => {\n                    if (line.points.length < 1) return null;\n\n                    // Beräkna koordinater för alla punkter\n                    const pathPoints = line.points.map((point, index) => {\n                      const periodIndex = availablePeriods.findIndex(p => \n                        `${p.year}-${p.month.toString().padStart(2, '0')}` === point.periodKey\n                      );\n                      const x = 70 + (periodIndex / Math.max(1, availablePeriods.length - 1)) * 860;\n                      const y = 450 - ((point.value - yAxisRange.min) / (yAxisRange.max - yAxisRange.min)) * 380;\n                      \n                      return { x, y, point };\n                    });\n\n                    return (\n                      <g key={line.pageId}>\n                        {/* MJUK KURVA istället för hård linje */}\n                        {line.points.length > 1 && (\n                          <path\n                            d={createSmoothPath(pathPoints)}\n                            fill=\"none\"\n                            stroke={line.color}\n                            strokeWidth=\"4\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                          />\n                        )}\n                        \n                        {/* Punkter */}\n                        {pathPoints.map(({ x, y, point }, index) => (\n                          <circle\n                            key={index}\n                            cx={x}\n                            cy={y}\n                            r=\"6\"\n                            fill={line.color}\n                            stroke=\"white\"\n                            strokeWidth=\"3\"\n                            className=\"cursor-pointer\"\n                            onMouseEnter={(e) => handleMouseMove(e, point)}\n                            onMouseLeave={() => setHoveredDataPoint(null)}\n                          />\n                        ))}\n                      </g>\n                    );\n                  })}\n\n                  {/* FÖRBÄTTRAD TOOLTIP med dynamisk positionering */}\n                  {hoveredDataPoint && (\n                    <g>\n                      {/* Beräkna tooltip-position baserat på muspekaren */}\n                      {(() => {\n                        // Tooltip ska vara 200px bred och 70px hög\n                        const tooltipWidth = 200;\n                        const tooltipHeight = 70;\n                        let tooltipX = mousePosition.x + 15;\n                        let tooltipY = mousePosition.y - 35;\n                        \n                        // Justera om tooltip går utanför höger kant\n                        if (tooltipX + tooltipWidth > 980) {\n                          tooltipX = mousePosition.x - tooltipWidth - 15;\n                        }\n                        \n                        // Justera om tooltip går utanför övre kant\n                        if (tooltipY < 15) {\n                          tooltipY = mousePosition.y + 15;\n                        }\n                        \n                        // Justera om tooltip går utanför nedre kant\n                        if (tooltipY + tooltipHeight > 480) {\n                          tooltipY = mousePosition.y - tooltipHeight - 15;\n                        }\n                        \n                        return (\n                          <>\n                            <rect\n                              x={tooltipX} y={tooltipY} \n                              width={tooltipWidth} height={tooltipHeight}\n                              fill=\"rgba(0,0,0,0.85)\" rx=\"6\"\n                            />\n                            <text x={tooltipX + 12} y={tooltipY + 20} fill=\"white\" fontSize=\"13\" fontWeight=\"bold\">\n                              {hoveredDataPoint.pageName}\n                            </text>\n                            <text x={tooltipX + 12} y={tooltipY + 38} fill=\"white\" fontSize=\"12\">\n                              {hoveredDataPoint.period}\n                            </text>\n                            <text x={tooltipX + 12} y={tooltipY + 55} fill=\"white\" fontSize=\"12\">\n                              {METRIC_DEFINITIONS[hoveredDataPoint.metric]?.displayName}: {hoveredDataPoint.value.toLocaleString()}\n                            </text>\n                          </>\n                        );\n                      })()}\n                    </g>\n                  )}\n                </svg>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <LineChart className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium mb-2\">Välj sidor och perioder för att visa diagram</p>\n              <p className=\"text-sm\">\n                {selectedPages.length === 0 && selectedPeriods.length === 0 \n                  ? \"Markera minst en Facebook-sida och period\"\n                  : selectedPages.length === 0 \n                  ? \"Markera minst en Facebook-sida i listan ovan\"\n                  : \"Markera minst en period i listan ovan\"\n                }\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Trendstatistik-sektion */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <BarChart3 className=\"h-5 w-5\" />\n            Trendstatistik - {METRIC_DEFINITIONS[selectedMetric]?.displayName}\n          </CardTitle>\n          <Button\n            variant=\"outline\"\n            onClick={() => setShowDetailedTrends(!showDetailedTrends)}\n          >\n            {showDetailedTrends ? 'Dölj detaljer' : 'Visa detaljer'}\n          </Button>\n        </CardHeader>\n        <CardContent>\n          {trendStatistics.length === 0 ? (\n            <p className=\"text-muted-foreground\">Ingen trenddata tillgänglig för vald metric.</p>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Top/Bottom performers */}\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4 text-green-600\" />\n                    Bäst presterande sidor\n                  </h4>\n                  {trendStatistics.slice(0, 3).map((stat, index) => (\n                    <div key={stat.page.pageId} className=\"flex items-center justify-between p-3 bg-green-50 rounded\">\n                      <div>\n                        <div className=\"font-medium text-sm\">{stat.page.pageName}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {stat.totalPeriods} månader\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-green-700\">\n                          +{stat.avgTrend.averagePercentageChange.toFixed(1)}%\n                        </div>\n                        <div className=\"text-xs text-green-600\">\n                          genomsnitt/månad\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium flex items-center gap-2\">\n                    <TrendingDown className=\"h-4 w-4 text-red-600\" />\n                    Sämst presterande sidor\n                  </h4>\n                  {trendStatistics.slice(-3).reverse().map((stat, index) => (\n                    <div key={stat.page.pageId} className=\"flex items-center justify-between p-3 bg-red-50 rounded\">\n                      <div>\n                        <div className=\"font-medium text-sm\">{stat.page.pageName}</div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {stat.totalPeriods} månader\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-bold text-red-700\">\n                          {stat.avgTrend.averagePercentageChange.toFixed(1)}%\n                        </div>\n                        <div className=\"text-xs text-red-600\">\n                          genomsnitt/månad\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {/* Detaljerad trendtabell */}\n              {showDetailedTrends && (\n                <div className=\"border rounded-lg overflow-hidden\">\n                  <div className=\"bg-muted p-3 font-medium\">\n                    Detaljerad trendanalys för alla sidor\n                  </div>\n                  <div className=\"max-h-96 overflow-y-auto\">\n                    {trendStatistics.map(stat => (\n                      <div key={stat.page.pageId} className=\"p-3 border-b last:border-b-0\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"font-medium\">{stat.page.pageName}</div>\n                          <div className=\"flex items-center gap-4\">\n                            <span className={`px-2 py-1 rounded text-xs font-medium ${\n                              stat.avgTrend.averagePercentageChange > 0 \n                                ? 'bg-green-100 text-green-800'\n                                : stat.avgTrend.averagePercentageChange < 0\n                                ? 'bg-red-100 text-red-800'\n                                : 'bg-gray-100 text-gray-800'\n                            }`}>\n                              {stat.avgTrend.averagePercentageChange > 0 ? '+' : ''}\n                              {stat.avgTrend.averagePercentageChange.toFixed(1)}% snitt\n                            </span>\n                            <span className=\"text-sm text-muted-foreground\">\n                              {stat.avgTrend.positiveMonths}↗ {stat.avgTrend.negativeMonths}↘ {stat.avgTrend.stableMonths}→\n                            </span>\n                          </div>\n                        </div>\n                        \n                        {stat.latestChange && (\n                          <div className=\"text-sm text-muted-foreground\">\n                            Senaste förändring: {stat.latestChange.previousPeriod} → {stat.latestChange.period}\n                            <span className={`ml-2 font-medium ${\n                              stat.latestChange.percentageChange > 0 ? 'text-green-600' : \n                              stat.latestChange.percentageChange < 0 ? 'text-red-600' : 'text-gray-600'\n                            }`}>\n                              {stat.latestChange.percentageChange > 0 ? '+' : ''}\n                              {stat.latestChange.percentageChange?.toFixed(1)}%\n                            </span>\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default TrendAnalysisView;","import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './components/ui/card';\nimport { Button } from './components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from './components/ui/alert';\nimport { UploadCloud, BarChart3, TrendingUp, Calendar, Info, ArrowLeft } from 'lucide-react';\nimport TimeseriesUploader from './components/TimeseriesUploader';\nimport PageTimeseriesView from './components/PageTimeseriesView';\nimport MonthlyComparisonView from './components/MonthlyComparisonView';\nimport TrendAnalysisView from './components/TrendAnalysisView';\n\nfunction App() {\n  const [hasData, setHasData] = useState(false);\n  const [showUploader, setShowUploader] = useState(false);\n  const [activeTab, setActiveTab] = useState('upload');\n  const [uploadedPeriods, setUploadedPeriods] = useState([]);\n\n  // Handler för när data har laddats upp framgångsrikt\n  const handleDataUploaded = (periods) => {\n    console.log('Data uploaded successfully:', periods);\n    setUploadedPeriods(periods);\n    setHasData(true);\n    setShowUploader(false);\n    setActiveTab('monthly'); // Växla till månadsanalys när data finns\n  };\n\n  // Handler för att avbryta upload och gå tillbaka\n  const handleCancelUpload = () => {\n    setShowUploader(false);\n  };\n\n  // Om uploader visas, visa bara den komponenten\n  if (showUploader) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <header className=\"border-b border-border\">\n          <div className=\"container py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"facebook-brand flex items-center gap-3\">\n                <BarChart3 className=\"h-8 w-8\" />\n                <h1 className=\"text-2xl font-bold text-foreground\">\n                  Facebook API data analyser\n                </h1>\n              </div>\n              <Button variant=\"outline\" onClick={handleCancelUpload}>\n                <ArrowLeft className=\"mr-2 h-4 w-4\" />\n                Tillbaka\n              </Button>\n            </div>\n          </div>\n        </header>\n\n        <main className=\"container py-6\">\n          <TimeseriesUploader \n            onDataUploaded={handleDataUploaded}\n            onCancel={handleCancelUpload}\n          />\n        </main>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <header className=\"border-b border-border\">\n        <div className=\"container py-4\">\n          <div className=\"facebook-brand flex items-center gap-3\">\n            <BarChart3 className=\"h-8 w-8\" />\n            <h1 className=\"text-2xl font-bold text-foreground\">\n              Facebook API data analyser\n            </h1>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container py-6\">\n        <div className=\"space-y-6\">\n          {!hasData ? (\n            /* Välkomstvy - innan data laddats upp */\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader className=\"text-center\">\n                  <CardTitle className=\"text-2xl\">Välkommen till Facebook API data analyser</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-center space-y-4\">\n                  <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n                    Analysera och visualisera utvecklingen av dina Facebook-sidor över tid. \n                    Ladda upp månadsvis CSV-data från Facebook API för att komma igång.\n                  </p>\n                  \n                  <Alert className=\"max-w-2xl mx-auto\">\n                    <Info className=\"h-4 w-4\" />\n                    <AlertTitle>CSV-format som krävs</AlertTitle>\n                    <AlertDescription>\n                      Filnamn: <code>FB_YYYY_MM.csv</code> (ex: FB_2025_08.csv)<br/>\n                      Kolumner: Page, Page ID, Reach, Engaged Users, Engagements, Reactions, Publications, Status, Comment\n                    </AlertDescription>\n                  </Alert>\n\n                  <div className=\"pt-4\">\n                    <Button size=\"lg\" onClick={() => setShowUploader(true)}>\n                      <UploadCloud className=\"mr-2 h-5 w-5\" />\n                      Ladda upp CSV-filer\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Feature preview */}\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <Card className=\"opacity-50\">\n                  <CardHeader>\n                    <Calendar className=\"h-8 w-8 text-facebook-500 mb-2\" />\n                    <CardTitle className=\"text-lg\">Månadsanalys</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Jämför alla Facebook-sidor för en specifik månad och identifiera toppresterare\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"opacity-50\">\n                  <CardHeader>\n                    <TrendingUp className=\"h-8 w-8 text-facebook-500 mb-2\" />\n                    <CardTitle className=\"text-lg\">Trendanalys</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Upptäck trender och utvecklingsmönster över tid för alla Facebook-sidor\n                    </p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"opacity-50\">\n                  <CardHeader>\n                    <BarChart3 className=\"h-8 w-8 text-facebook-500 mb-2\" />\n                    <CardTitle className=\"text-lg\">Sidanalys</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Djupdyk i specifika Facebook-sidor och deras utveckling över månader\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          ) : (\n            /* Huvudgränssnitt - när data finns */\n            <div className=\"grid gap-6\">\n              {/* Data-status sektion */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5 text-facebook-500\" />\n                    Uppladdad data\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-3 gap-4 mb-4\">\n                    <div className=\"text-center p-3 bg-facebook-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-facebook-900\">{uploadedPeriods.length}</div>\n                      <div className=\"text-sm text-facebook-700\">Månader</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-facebook-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-facebook-900\">\n                        {uploadedPeriods.reduce((acc, period) => acc + period.pageCount, 0)}\n                      </div>\n                      <div className=\"text-sm text-facebook-700\">Totalt dataposter</div>\n                    </div>\n                    <div className=\"text-center p-3 bg-facebook-50 rounded-lg\">\n                      <div className=\"text-2xl font-bold text-facebook-900\">\n                        {uploadedPeriods.length > 0 ? Math.max(...uploadedPeriods.map(p => p.pageCount)) : 0}\n                      </div>\n                      <div className=\"text-sm text-facebook-700\">Sidor per månad</div>\n                    </div>\n                  </div>\n                  \n                  {uploadedPeriods.length > 0 && (\n                    <div>\n                      <div className=\"text-sm font-medium mb-2\">Tillgängliga perioder:</div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {uploadedPeriods.map((period, index) => (\n                          <span \n                            key={index}\n                            className=\"inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-facebook-50 text-facebook-700 border border-facebook-200\"\n                          >\n                            {period.displayName} ({period.pageCount} sidor)\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              <Tabs value={activeTab} onValueChange={setActiveTab}>\n                <TabsList className=\"grid w-full grid-cols-4\">\n                  <TabsTrigger value=\"upload\">\n                    <UploadCloud className=\"mr-2 h-4 w-4\" />\n                    Ladda data\n                  </TabsTrigger>\n                  <TabsTrigger value=\"monthly\">\n                    <Calendar className=\"mr-2 h-4 w-4\" />\n                    Månadsanalys\n                  </TabsTrigger>\n                  <TabsTrigger value=\"pages\">\n                    <BarChart3 className=\"mr-2 h-4 w-4\" />\n                    Sidanalys\n                  </TabsTrigger>\n                  <TabsTrigger value=\"trends\">\n                    <TrendingUp className=\"mr-2 h-4 w-4\" />\n                    Trender\n                  </TabsTrigger>\n                </TabsList>\n\n                <TabsContent value=\"upload\" className=\"mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Hantera CSV-data</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      <p className=\"text-muted-foreground\">\n                        Hantera dina uppladdade CSV-filer och ladda upp ytterligare månadsdata.\n                      </p>\n                      <Button onClick={() => setShowUploader(true)}>\n                        <UploadCloud className=\"mr-2 h-4 w-4\" />\n                        Ladda upp mer data\n                      </Button>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                <TabsContent value=\"monthly\" className=\"mt-6\">\n                  <MonthlyComparisonView uploadedPeriods={uploadedPeriods} />\n                </TabsContent>\n\n                <TabsContent value=\"pages\" className=\"mt-6\">\n                  <PageTimeseriesView uploadedPeriods={uploadedPeriods} />\n                </TabsContent>\n\n                <TabsContent value=\"trends\" className=\"mt-6\">\n                  <TrendAnalysisView uploadedPeriods={uploadedPeriods} />\n                </TabsContent>\n              </Tabs>\n            </div>\n          )}\n        </div>\n      </main>\n\n      <footer className=\"border-t border-border mt-12\">\n        <div className=\"container py-4 text-center text-sm text-muted-foreground\">\n          <p>Facebook API data analyser © {new Date().getFullYear()}</p>\n          <p className=\"mt-1\">\n            Tidserie-baserad analys av månadsstatistik | \n            <span className=\"text-facebook-500 font-medium\"> Utvecklad för projektfas 1-8</span>\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App.jsx'\nimport './styles/globals.css'\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n)\n"],"names":["m","require$$0","client","cn","inputs","twMerge","clsx","Card","React.forwardRef","className","props","ref","jsx","CardHeader","CardTitle","CardDescription","CardContent","CardFooter","falsyToString","value","cx","cva","base","config","_config_compoundVariants","variants","defaultVariants","getVariantClassNames","variant","variantProp","defaultVariantProp","variantKey","propsWithoutUndefined","acc","param","key","getCompoundVariantClassNames","cvClass","cvClassName","compoundVariantOptions","buttonVariants","Button","size","asChild","Comp","Slot","Tabs","TabsPrimitive.Root","TabsList","TabsPrimitive.List","TabsTrigger","TabsPrimitive.Trigger","TabsContent","TabsPrimitive.Content","alertVariants","Alert","AlertTitle","AlertDescription","EXPECTED_COLUMNS","TimeseriesUploader","onDataUploaded","onCancel","files","setFiles","useState","uploading","setUploading","dragActive","setDragActive","validationErrors","setValidationErrors","processingStatus","setProcessingStatus","fileInputRef","useRef","validateFilename","filename","pattern","match","year","month","getMonthName","validateCSVContent","content","resolve","Papa","results","headers","missingColumns","col","handleDrop","e","droppedFiles","csvFiles","file","prev","addFiles","handleFileSelect","selectedFiles","newFiles","validatedFiles","validation","existingNames","duplicates","d","uniqueFiles","removeFile","fileId","f","processFiles","validFiles","processedPeriods","fileItem","readFileContent","periodData","error","reject","reader","handleDragOver","handleDragLeave","clearErrors","validFilesCount","hasValidFiles","jsxs","Upload","_a","AlertCircle","index","status","FileText","Calendar","Loader2","CheckCircle2","X","Fragment","BarChart3","Table","TableHeader","TableBody","TableRow","TableHead","TableCell","Select","SelectPrimitive.Root","SelectValue","SelectPrimitive.Value","SelectTrigger","children","SelectPrimitive.Trigger","SelectPrimitive.Icon","ChevronDown","SelectContent","position","SelectPrimitive.Portal","SelectPrimitive.Content","SelectPrimitive.Viewport","SelectLabel","SelectPrimitive.Label","SelectItem","SelectPrimitive.Item","SelectPrimitive.ItemIndicator","Check","SelectPrimitive.ItemText","SelectSeparator","SelectPrimitive.Separator","CHANNEL_COLORS","ProfileIcon","pageName","name","backgroundColor","channelText","nameLower","textColor","PAGE_SIZE_OPTIONS","AVAILABLE_METRICS","METRIC_DEFINITIONS","PageTimeseriesView","uploadedPeriods","availablePages","setAvailablePages","selectedPageId","setSelectedPageId","pageTimeseriesData","setPageTimeseriesData","loading","setLoading","setError","pageStats","setPageStats","trendAnalysis","setTrendAnalysis","sortConfig","setSortConfig","currentPage","setCurrentPage","pageSize","setPageSize","selectedMetrics","setSelectedMetrics","useEffect","pagesMap","period","csvRow","pageId","pages","a","b","err","pageData","pageRow","parseNumericValue","selectedPage","sortedData","calculatePageStatistics","p","parsed","data","stats","availableMetricKeys","metric","values","v","avg","sum","val","min","max","bestMonth","worstMonth","trends","oldestValue","_b","change","_c","percentChange","useMemo","aValue","bValue","comparison","paginatedData","startIndex","totalPages","handleSort","current","getSortIcon","columnKey","ArrowUpDown","ArrowUp","ArrowDown","handleMetricToggle","metricKey","handleExportCSV","def","csvData","item","csvContent","row","blob","link","url","formatValue","Activity","page","isSelected","trend","definition","TrendingUp","TrendingDown","FileDown","option","ChevronLeft","ChevronRight","MonthlyComparisonView","selectedPeriod","setSelectedPeriod","setPeriodData","periodSummary","setPeriodSummary","firstPeriod","matchingPeriod","convertedData","summary","calculatePeriodSummary","total","periodName","metricData","NON_SUMMABLE_METRICS","SUMMABLE_METRICS","getMetricsByCategory","category","getSummerableMetrics","getNonSummerableMetrics","validateConsistencyWithReachCalculator","errors","warnings","ourSummerable","reachCalcSummerable","missingSummerable","extraSummerable","ourNonSummerable","reachCalcNonSummerable","missingNonSummerable","extraNonSummerable","consistencyCheck","calculatePercentageChange","currentValue","previousValue","calculateMonthToMonthTrend","pageTimeseries","monthlyData","trendData","i","previous","percentageChange","calculateAverageTrend","totalAbsolute","totalPercentage","validPercentageCount","positiveMonths","negativeMonths","stableMonths","FacebookPage","MonthlyPageData","metrics","rawMetrics","PageTimeseries","TimeseriesDataset","pageKey","timeseries","periodsSet","result","ALLOWED_METRICS","CHART_COLORS","TrendAnalysisView","selectedMetric","setSelectedMetric","selectedPages","setSelectedPages","selectedPeriods","setSelectedPeriods","hoveredDataPoint","setHoveredDataPoint","mousePosition","setMousePosition","showDetailedTrends","setShowDetailedTrends","dataset","availablePeriods","getCSVColumnName","getPageColor","selectedPageIds","exportChartAsPNG","svg","chartLines","canvas","ctx","width","height","svgData","svgBlob","URL","svgUrl","img","title","legendStartY","legendItemHeight","circleRadius","circleTextGap","maxItemsPerColumn","columnWidth","line","column","x","y","selectedPageNames","kontoSuffix","handlePageToggle","id","handlePeriodToggle","periodKey","allPeriodsSelected","handleToggleAllPeriods","generateChartData","chartPoints","csvColumnName","rawValue","cleanValue","groupedByPage","point","yAxisRange","padding","createSmoothPath","points","p1","p2","path","next","cp1x","cp1y","cp2x","cp2y","beforePrev","handleMouseMove","event","rect","trendStatistics","avgTrend","LineChart","percent","yPos","xPos","pathPoints","tooltipX","tooltipY","stat","App","hasData","setHasData","showUploader","setShowUploader","activeTab","setActiveTab","setUploadedPeriods","handleDataUploaded","periods","handleCancelUpload","ArrowLeft","UploadCloud","Info","ReactDOM","React"],"mappings":"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","x_google_ignoreList":[0,3]}